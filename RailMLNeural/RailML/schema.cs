// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code++. Version 4.0.0.433
//    <NameSpace>ClassLibrary1</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><DataMemberNameArg>OnlyIfDifferent</DataMemberNameArg><DataMemberOnXmlIgnore>False</DataMemberOnXmlIgnore><CodeBaseTag>Net45</CodeBaseTag><InitializeFields>All</InitializeFields><GenerateUnusedComplexTypes>False</GenerateUnusedComplexTypes><GenerateUnusedSimpleTypes>False</GenerateUnusedSimpleTypes><GenerateXMLAttributes>True</GenerateXMLAttributes><OrderXMLAttrib>False</OrderXMLAttrib><EnableLazyLoading>False</EnableLazyLoading><VirtualProp>False</VirtualProp><PascalCase>False</PascalCase><AutomaticProperties>False</AutomaticProperties><PropNameSpecified>Default</PropNameSpecified><PrivateFieldName>StartWithUnderscore</PrivateFieldName><PrivateFieldNamePrefix></PrivateFieldNamePrefix><EnableRestriction>False</EnableRestriction><RestrictionMaxLenght>False</RestrictionMaxLenght><RestrictionRegEx>False</RestrictionRegEx><RestrictionRange>False</RestrictionRange><ValidateProperty>False</ValidateProperty><ClassNamePrefix></ClassNamePrefix><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><EnableAppInfoSettings>False</EnableAppInfoSettings><EnableExternalSchemasCache>False</EnableExternalSchemasCache><EnableDebug>False</EnableDebug><EnableWarn>False</EnableWarn><ExcludeImportedTypes>False</ExcludeImportedTypes><ExpandNesteadAttributeGroup>False</ExpandNesteadAttributeGroup><CleanupCode>False</CleanupCode><EnableXmlSerialization>True</EnableXmlSerialization><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><EnableEncoding>False</EnableEncoding><EnableXMLIndent>False</EnableXMLIndent><Encoder>UTF8</Encoder><Serializer>XmlSerializer</Serializer><sspNullable>True</sspNullable><sspString>True</sspString><sspCollection>True</sspCollection><sspComplexType>True</sspComplexType><sspSimpleType>True</sspSimpleType><BaseClassName>EntityBase</BaseClassName><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><CustomUsings></CustomUsings><AttributesToExlude></AttributesToExlude>
//  </auto-generated>
// ------------------------------------------------------------------------------
#pragma warning disable
namespace RailMLNeural.RailML
{
    using System;
    using System.Xml.Serialization;
    using System.IO;
    using System.Xml;
    using System.Collections.Generic;
    using RailMLNeural.Data;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.railml.org/schemas/2013", IsNullable = false)]
    public partial class infrastructure : tInfrastructure
    {

        private List<eInfraAttr> _infraAttrGroups;

        private List<eTrack> _tracks;

        private eTrackGroups _trackGroups;

        private List<eOcp> _operationControlPoints;

        private List<tController> _controllers;

        private List<tSpeedProfile> _speedProfiles;

        private static XmlSerializer serializer;

        public infrastructure()
        {
            this._speedProfiles = new List<tSpeedProfile>();
            this._controllers = new List<tController>();
            this._operationControlPoints = new List<eOcp>();
            this._trackGroups = new eTrackGroups();
            this._tracks = new List<eTrack>();
            this._infraAttrGroups = new List<eInfraAttr>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("infraAttributes", IsNullable = false)]
        public List<eInfraAttr> infraAttrGroups
        {
            get
            {
                return this._infraAttrGroups;
            }
            set
            {
                this._infraAttrGroups = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("track", IsNullable = false)]
        public List<eTrack> tracks
        {
            get
            {
                return this._tracks;
            }
            set
            {
                this._tracks = value;
            }
        }

        public eTrackGroups trackGroups
        {
            get
            {
                return this._trackGroups;
            }
            set
            {
                this._trackGroups = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("ocp", IsNullable = false)]
        public List<eOcp> operationControlPoints
        {
            get
            {
                return this._operationControlPoints;
            }
            set
            {
                this._operationControlPoints = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("controller", IsNullable = false)]
        public List<tController> controllers
        {
            get
            {
                return this._controllers;
            }
            set
            {
                this._controllers = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("speedProfile", IsNullable = false)]
        public List<tSpeedProfile> speedProfiles
        {
            get
            {
                return this._speedProfiles;
            }
            set
            {
                this._speedProfiles = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(infrastructure));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether infraAttrGroups should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfraAttrGroups()
        {
            return infraAttrGroups != null && infraAttrGroups.Count > 0;
        }

        /// <summary>
        /// Test whether tracks should be serialized
        /// </summary>
        public virtual bool ShouldSerializetracks()
        {
            return tracks != null && tracks.Count > 0;
        }

        /// <summary>
        /// Test whether operationControlPoints should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationControlPoints()
        {
            return operationControlPoints != null && operationControlPoints.Count > 0;
        }

        /// <summary>
        /// Test whether controllers should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrollers()
        {
            return controllers != null && controllers.Count > 0;
        }

        /// <summary>
        /// Test whether speedProfiles should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeedProfiles()
        {
            return speedProfiles != null && speedProfiles.Count > 0;
        }

        /// <summary>
        /// Test whether trackGroups should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackGroups()
        {
            return (_trackGroups != null) && _trackGroups.Any.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current infrastructure object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an infrastructure object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output infrastructure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out infrastructure obj, out System.Exception exception)
        {
            exception = null;
            obj = default(infrastructure);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out infrastructure obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static infrastructure Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((infrastructure)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static infrastructure Deserialize(System.IO.Stream s)
        {
            return ((infrastructure)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current infrastructure object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an infrastructure object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output infrastructure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out infrastructure obj, out System.Exception exception)
        {
            exception = null;
            obj = default(infrastructure);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out infrastructure obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static infrastructure LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eInfraAttr : tElementWithIDAndNameWithoutAny
    {

        private tOwner _owner;

        private tOperationMode _operationMode;

        private tTrainProtection _trainProtection;

        private tElectrification _electrification;

        private tPowerTransmission _powerTransmission;

        private tAxleWeight _axleWeight;

        private tGauge _gauge;

        private List<tSpeedInfo> _speeds;

        private tEpsgCode _epsgCode;

        private List<eGeneralInfraAttribute> _generalInfraAttributes;

        private static XmlSerializer serializer;

        public eInfraAttr()
        {
            this._generalInfraAttributes = new List<eGeneralInfraAttribute>();
            this._epsgCode = new tEpsgCode();
            this._speeds = new List<tSpeedInfo>();
            this._gauge = new tGauge();
            this._axleWeight = new tAxleWeight();
            this._powerTransmission = new tPowerTransmission();
            this._electrification = new tElectrification();
            this._trainProtection = new tTrainProtection();
            this._operationMode = new tOperationMode();
            this._owner = new tOwner();
        }

        public tOwner owner
        {
            get
            {
                return this._owner;
            }
            set
            {
                this._owner = value;
            }
        }

        public tOperationMode operationMode
        {
            get
            {
                return this._operationMode;
            }
            set
            {
                this._operationMode = value;
            }
        }

        public tTrainProtection trainProtection
        {
            get
            {
                return this._trainProtection;
            }
            set
            {
                this._trainProtection = value;
            }
        }

        public tElectrification electrification
        {
            get
            {
                return this._electrification;
            }
            set
            {
                this._electrification = value;
            }
        }

        public tPowerTransmission powerTransmission
        {
            get
            {
                return this._powerTransmission;
            }
            set
            {
                this._powerTransmission = value;
            }
        }

        public tAxleWeight axleWeight
        {
            get
            {
                return this._axleWeight;
            }
            set
            {
                this._axleWeight = value;
            }
        }

        public tGauge gauge
        {
            get
            {
                return this._gauge;
            }
            set
            {
                this._gauge = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("speed", IsNullable = false)]
        public List<tSpeedInfo> speeds
        {
            get
            {
                return this._speeds;
            }
            set
            {
                this._speeds = value;
            }
        }

        public tEpsgCode epsgCode
        {
            get
            {
                return this._epsgCode;
            }
            set
            {
                this._epsgCode = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("generalInfraAttribute", IsNullable = false)]
        public List<eGeneralInfraAttribute> generalInfraAttributes
        {
            get
            {
                return this._generalInfraAttributes;
            }
            set
            {
                this._generalInfraAttributes = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eInfraAttr));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether speeds should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeeds()
        {
            return speeds != null && speeds.Count > 0;
        }

        /// <summary>
        /// Test whether generalInfraAttributes should be serialized
        /// </summary>
        public virtual bool ShouldSerializegeneralInfraAttributes()
        {
            return generalInfraAttributes != null && generalInfraAttributes.Count > 0;
        }

        /// <summary>
        /// Test whether owner should be serialized
        /// </summary>
        public virtual bool ShouldSerializeowner()
        {
            return (_owner != null);
        }

        /// <summary>
        /// Test whether operationMode should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationMode()
        {
            return (_operationMode != null);
        }

        /// <summary>
        /// Test whether trainProtection should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtection()
        {
            return (_trainProtection != null);
        }

        /// <summary>
        /// Test whether electrification should be serialized
        /// </summary>
        public virtual bool ShouldSerializeelectrification()
        {
            return (_electrification != null);
        }

        /// <summary>
        /// Test whether powerTransmission should be serialized
        /// </summary>
        public virtual bool ShouldSerializepowerTransmission()
        {
            return (_powerTransmission != null);
        }

        /// <summary>
        /// Test whether axleWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializeaxleWeight()
        {
            return (_axleWeight != null);
        }

        /// <summary>
        /// Test whether gauge should be serialized
        /// </summary>
        public virtual bool ShouldSerializegauge()
        {
            return (_gauge != null);
        }

        /// <summary>
        /// Test whether epsgCode should be serialized
        /// </summary>
        public virtual bool ShouldSerializeepsgCode()
        {
            return (_epsgCode != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eInfraAttr object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eInfraAttr object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eInfraAttr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eInfraAttr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eInfraAttr);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eInfraAttr obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eInfraAttr Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eInfraAttr)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eInfraAttr Deserialize(System.IO.Stream s)
        {
            return ((eInfraAttr)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eInfraAttr object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eInfraAttr object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eInfraAttr object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eInfraAttr obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eInfraAttr);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eInfraAttr obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eInfraAttr LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOwner : ParentContainer
    {

        private string _ownerName;

        private string _uicno;

        private string _infrastructureManagerRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ownerName
        {
            get
            {
                return this._ownerName;
            }
            set
            {
                this._ownerName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("uic-no", DataType = "positiveInteger")]
        public string uicno
        {
            get
            {
                return this._uicno;
            }
            set
            {
                this._uicno = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string infrastructureManagerRef
        {
            get
            {
                return this._infrastructureManagerRef;
            }
            set
            {
                this._infrastructureManagerRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOwner));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ownerName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeownerName()
        {
            return !string.IsNullOrEmpty(ownerName);
        }

        /// <summary>
        /// Test whether uicno should be serialized
        /// </summary>
        public virtual bool ShouldSerializeuicno()
        {
            return !string.IsNullOrEmpty(uicno);
        }

        /// <summary>
        /// Test whether infrastructureManagerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructureManagerRef()
        {
            return !string.IsNullOrEmpty(infrastructureManagerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOwner object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOwner object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOwner object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOwner obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOwner);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOwner obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOwner Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOwner)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOwner Deserialize(System.IO.Stream s)
        {
            return ((tOwner)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOwner object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOwner object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOwner object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOwner obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOwner);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOwner obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOwner LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://purl.org/dc/elements/1.1/")]
    public partial class SimpleLiteral : ParentContainer
    {

        private List<string> _text;

        private static XmlSerializer serializer;

        public SimpleLiteral()
        {
            this._text = new List<string>();
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public List<string> Text
        {
            get
            {
                return this._text;
            }
            set
            {
                this._text = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(SimpleLiteral));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Text should be serialized
        /// </summary>
        public virtual bool ShouldSerializeText()
        {
            return Text != null && Text.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SimpleLiteral object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an SimpleLiteral object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output SimpleLiteral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out SimpleLiteral obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SimpleLiteral);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out SimpleLiteral obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static SimpleLiteral Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((SimpleLiteral)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static SimpleLiteral Deserialize(System.IO.Stream s)
        {
            return ((SimpleLiteral)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current SimpleLiteral object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an SimpleLiteral object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SimpleLiteral object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out SimpleLiteral obj, out System.Exception exception)
        {
            exception = null;
            obj = default(SimpleLiteral);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out SimpleLiteral obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static SimpleLiteral LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eBlockParts : ParentContainer
    {

        private List<tBlockPart> _blockPart;

        private List<System.Xml.XmlElement> _any;

        private static XmlSerializer serializer;

        public eBlockParts()
        {
            this._any = new List<System.Xml.XmlElement>();
            this._blockPart = new List<tBlockPart>();
        }

        [System.Xml.Serialization.XmlElementAttribute("blockPart")]
        public List<tBlockPart> blockPart
        {
            get
            {
                return this._blockPart;
            }
            set
            {
                this._blockPart = value;
            }
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eBlockParts));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether blockPart should be serialized
        /// </summary>
        public virtual bool ShouldSerializeblockPart()
        {
            return blockPart != null && blockPart.Count > 0;
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eBlockParts object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eBlockParts object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eBlockParts object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eBlockParts obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBlockParts);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eBlockParts obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eBlockParts Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eBlockParts)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eBlockParts Deserialize(System.IO.Stream s)
        {
            return ((eBlockParts)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eBlockParts object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eBlockParts object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eBlockParts object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eBlockParts obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBlockParts);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eBlockParts obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eBlockParts LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBlockPart : tElementWithIDAndName
    {

        private bool _shouldSerializerunLength;

        private bool _shouldSerializefixed;

        private bool _shouldSerializeendserialize;

        private bool _shouldSerializebeginserialize;

        private System.Nullable<System.DateTime> _begin;

        private string _beginDay;

        private System.Nullable<System.DateTime> _end;

        private string _endDay;

        private string _startOcpRef;

        private string _endOcpRef;

        private string _trainPartRef;

        private string _operatingPeriodRef;

        private string _mission;

        private System.Nullable<bool> _fixed;

        private System.Nullable<decimal> _runLength;

        private string _vehicleRef;

        private string _formationRef;

        private static XmlSerializer serializer;

        public tBlockPart()
        {
            this._beginDay = "0";
            this._endDay = "0";
        }

        [XmlIgnore]
        public System.DateTime begin
        {
            get
            {
                if (this._begin.HasValue)
                {
                    return this._begin.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._begin = value;
                _shouldSerializebeginserialize = true;
            }
        }

        [XmlAttributeAttribute("begin")]
        public string beginserialize
        {
            get { return begin.ToString("hh:mm:ss"); }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool beginSpecified
        {
            get
            {
                return this._begin.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._begin = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string beginDay
        {
            get
            {
                return this._beginDay;
            }
            set
            {
                this._beginDay = value;
            }
        }

        [XmlIgnore]
        public System.DateTime end
        {
            get
            {
                if (this._end.HasValue)
                {
                    return this._end.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._end = value;
                _shouldSerializeendserialize = true;
            }
        }

        [XmlAttributeAttribute("end")]
        public string endserialize
        {
            get { return end.ToString("hh:mm:ss"); }
        }
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endSpecified
        {
            get
            {
                return this._end.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._end = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string endDay
        {
            get
            {
                return this._endDay;
            }
            set
            {
                this._endDay = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string startOcpRef
        {
            get
            {
                return this._startOcpRef;
            }
            set
            {
                this._startOcpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string endOcpRef
        {
            get
            {
                return this._endOcpRef;
            }
            set
            {
                this._endOcpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string trainPartRef
        {
            get
            {
                return this._trainPartRef;
            }
            set
            {
                this._trainPartRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string operatingPeriodRef
        {
            get
            {
                return this._operatingPeriodRef;
            }
            set
            {
                this._operatingPeriodRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string mission
        {
            get
            {
                return this._mission;
            }
            set
            {
                this._mission = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool @fixed
        {
            get
            {
                if (this._fixed.HasValue)
                {
                    return this._fixed.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._fixed = value;
                _shouldSerializefixed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fixedSpecified
        {
            get
            {
                return this._fixed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._fixed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal runLength
        {
            get
            {
                if (this._runLength.HasValue)
                {
                    return this._runLength.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._runLength = value;
                _shouldSerializerunLength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool runLengthSpecified
        {
            get
            {
                return this._runLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._runLength = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string vehicleRef
        {
            get
            {
                return this._vehicleRef;
            }
            set
            {
                this._vehicleRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string formationRef
        {
            get
            {
                return this._formationRef;
            }
            set
            {
                this._formationRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBlockPart));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether begin should be serialized
        /// </summary>
        public virtual bool ShouldSerializebeginserialize()
        {
            if (_shouldSerializebeginserialize)
            {
                return true;
            }
            return (_begin != default(System.DateTime));
        }

        /// <summary>
        /// Test whether end should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendserialize()
        {
            if (_shouldSerializeendserialize)
            {
                return true;
            }
            return (_end != default(System.DateTime));
        }

        /// <summary>
        /// Test whether fixed should be serialized
        /// </summary>
        public virtual bool ShouldSerializefixed()
        {
            if (_shouldSerializefixed)
            {
                return true;
            }
            return (_fixed != default(bool));
        }

        /// <summary>
        /// Test whether runLength should be serialized
        /// </summary>
        public virtual bool ShouldSerializerunLength()
        {
            if (_shouldSerializerunLength)
            {
                return true;
            }
            return (_runLength != default(decimal));
        }

        /// <summary>
        /// Test whether beginDay should be serialized
        /// </summary>
        public virtual bool ShouldSerializebeginDay()
        {
            return !string.IsNullOrEmpty(beginDay);
        }

        /// <summary>
        /// Test whether endDay should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendDay()
        {
            return !string.IsNullOrEmpty(endDay);
        }

        /// <summary>
        /// Test whether startOcpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializestartOcpRef()
        {
            return !string.IsNullOrEmpty(startOcpRef);
        }

        /// <summary>
        /// Test whether endOcpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendOcpRef()
        {
            return !string.IsNullOrEmpty(endOcpRef);
        }

        /// <summary>
        /// Test whether trainPartRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainPartRef()
        {
            return !string.IsNullOrEmpty(trainPartRef);
        }

        /// <summary>
        /// Test whether operatingPeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingPeriodRef()
        {
            return !string.IsNullOrEmpty(operatingPeriodRef);
        }

        /// <summary>
        /// Test whether mission should be serialized
        /// </summary>
        public virtual bool ShouldSerializemission()
        {
            return !string.IsNullOrEmpty(mission);
        }

        /// <summary>
        /// Test whether vehicleRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleRef()
        {
            return !string.IsNullOrEmpty(vehicleRef);
        }

        /// <summary>
        /// Test whether formationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeformationRef()
        {
            return !string.IsNullOrEmpty(formationRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBlockPart object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBlockPart object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBlockPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBlockPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBlockPart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBlockPart obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBlockPart Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBlockPart)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBlockPart Deserialize(System.IO.Stream s)
        {
            return ((tBlockPart)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBlockPart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBlockPart object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBlockPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBlockPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBlockPart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBlockPart obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBlockPart LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBlock))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eBlock))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBlockPart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRostering))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eRostering))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrainGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrain))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrain))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainPart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrainPart))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tAnnotation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eAnnotation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCategory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eCategory))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTimetablePeriod))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTimetablePeriod))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperatingPeriod))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOperatingPeriod))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tFormation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eFormation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tVehicle))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eVehicle))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOtherEquipment))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainRadio))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrainRadio))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tNationalSystem))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSpecificTransmissionModule))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tETCS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eETCS))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStorage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eStorage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPropulsion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ePropulsion))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionElementGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBaliseGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eSignalGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBasePlacedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlacedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStrictOrientedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBaseServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlatformEdge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDelimitedOrientedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBridge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTunnel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOrientedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlacedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCrossSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCommonSwitchAndCrossingData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSwitch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eSwitch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStrictOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRadiusChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGradientChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSpeedChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tAxleWeightChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPowerTransmissionChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGaugeChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tElectrificationChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperationModeChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOwnerChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDelimitedOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackCircuitBorder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainDetector))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackCondition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tLevelCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBorder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBalise))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRuleCodeElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDerailer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStopPost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignal))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tMileageChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrack))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrack))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tLocallyControlledArea))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eLocallyControlledArea))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSpeedProfile))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tController))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOpenEnd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBufferStop))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tContractor))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tConcessionaire))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperationalUndertaking))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRailwayUndertaking))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCustomer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tVehicleOperator))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tVehicleManufacturer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tInfrastructureManager))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGlobalElementWithMetadata))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTimetable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRollingstock))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tInfrastructure))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tElementWithIDAndName : ParentContainer
    {

        private List<tAdditionalName> _additionalName;

        private List<System.Xml.XmlElement> _any;

        private string _id;

        private string _code;

        private string _name;

        private string _description;

        private string _lang;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tElementWithIDAndName()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
            this._any = new List<System.Xml.XmlElement>();
            this._additionalName = new List<tAdditionalName>();
        }

        public List<tAdditionalName> additionalName
        {
            get
            {
                return this._additionalName;
            }
            set
            {
                this._additionalName = value;
            }
        }

        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string code
        {
            get
            {
                return this._code;
            }
            set
            {
                this._code = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang
        {
            get
            {
                return this._lang;
            }
            set
            {
                this._lang = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tElementWithIDAndName));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether additionalName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalName()
        {
            return additionalName != null && additionalName.Count > 0;
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeid()
        {
            return !string.IsNullOrEmpty(id);
        }

        /// <summary>
        /// Test whether code should be serialized
        /// </summary>
        public virtual bool ShouldSerializecode()
        {
            return !string.IsNullOrEmpty(code);
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        /// <summary>
        /// Test whether lang should be serialized
        /// </summary>
        public virtual bool ShouldSerializelang()
        {
            return !string.IsNullOrEmpty(lang);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tElementWithIDAndName object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tElementWithIDAndName object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tElementWithIDAndName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tElementWithIDAndName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElementWithIDAndName);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tElementWithIDAndName obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tElementWithIDAndName Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tElementWithIDAndName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tElementWithIDAndName Deserialize(System.IO.Stream s)
        {
            return ((tElementWithIDAndName)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tElementWithIDAndName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tElementWithIDAndName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tElementWithIDAndName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tElementWithIDAndName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElementWithIDAndName);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tElementWithIDAndName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tElementWithIDAndName LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOcpWithIDAndName))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperationControlPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOcp))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tElementWithIDAndNameWithoutAny))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eInfraAttr))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAdditionalName : ParentContainer
    {

        private string _name;

        private string _description;

        private string _lang;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tAdditionalName()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang
        {
            get
            {
                return this._lang;
            }
            set
            {
                this._lang = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAdditionalName));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        /// <summary>
        /// Test whether lang should be serialized
        /// </summary>
        public virtual bool ShouldSerializelang()
        {
            return !string.IsNullOrEmpty(lang);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAdditionalName object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAdditionalName object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAdditionalName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAdditionalName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAdditionalName);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAdditionalName obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tAdditionalName Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAdditionalName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAdditionalName Deserialize(System.IO.Stream s)
        {
            return ((tAdditionalName)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAdditionalName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAdditionalName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAdditionalName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAdditionalName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAdditionalName);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAdditionalName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tAdditionalName LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperationControlPoint))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOcp))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpWithIDAndName : tAdditionalName
    {

        private List<tAdditionalOcpName> _additionalName;

        private List<System.Xml.XmlElement> _any;

        private string _id;

        private string _code;

        private string _type;

        private static XmlSerializer serializer;

        public tOcpWithIDAndName()
        {
            this._any = new List<System.Xml.XmlElement>();
            this._additionalName = new List<tAdditionalOcpName>();
        }

        [System.Xml.Serialization.XmlElementAttribute("additionalName")]
        public List<tAdditionalOcpName> additionalName
        {
            get
            {
                return this._additionalName;
            }
            set
            {
                this._additionalName = value;
            }
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string code
        {
            get
            {
                return this._code;
            }
            set
            {
                this._code = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpWithIDAndName));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether additionalName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalName()
        {
            return additionalName != null && additionalName.Count > 0;
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        /// <summary>
        /// Test whether id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeid()
        {
            return !string.IsNullOrEmpty(id);
        }

        /// <summary>
        /// Test whether code should be serialized
        /// </summary>
        public virtual bool ShouldSerializecode()
        {
            return !string.IsNullOrEmpty(code);
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpWithIDAndName object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpWithIDAndName object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpWithIDAndName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpWithIDAndName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpWithIDAndName);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpWithIDAndName obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOcpWithIDAndName Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpWithIDAndName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpWithIDAndName Deserialize(System.IO.Stream s)
        {
            return ((tOcpWithIDAndName)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpWithIDAndName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpWithIDAndName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpWithIDAndName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpWithIDAndName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpWithIDAndName);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpWithIDAndName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOcpWithIDAndName LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAdditionalOcpName : ParentContainer
    {

        private string _name;

        private string _description;

        private string _lang;

        private string _type;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tAdditionalOcpName()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang
        {
            get
            {
                return this._lang;
            }
            set
            {
                this._lang = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAdditionalOcpName));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        /// <summary>
        /// Test whether lang should be serialized
        /// </summary>
        public virtual bool ShouldSerializelang()
        {
            return !string.IsNullOrEmpty(lang);
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAdditionalOcpName object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAdditionalOcpName object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAdditionalOcpName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAdditionalOcpName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAdditionalOcpName);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAdditionalOcpName obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tAdditionalOcpName Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAdditionalOcpName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAdditionalOcpName Deserialize(System.IO.Stream s)
        {
            return ((tAdditionalOcpName)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAdditionalOcpName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAdditionalOcpName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAdditionalOcpName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAdditionalOcpName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAdditionalOcpName);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAdditionalOcpName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tAdditionalOcpName LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOcp))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperationControlPoint : tOcpWithIDAndName
    {

        private string _number;

        private string _abbrevation;

        private string _timezone;

        private string _parentOcpRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string number
        {
            get
            {
                return this._number;
            }
            set
            {
                this._number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string abbrevation
        {
            get
            {
                return this._abbrevation;
            }
            set
            {
                this._abbrevation = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string timezone
        {
            get
            {
                return this._timezone;
            }
            set
            {
                this._timezone = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string parentOcpRef
        {
            get
            {
                return this._parentOcpRef;
            }
            set
            {
                this._parentOcpRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperationControlPoint));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether number should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumber()
        {
            return !string.IsNullOrEmpty(number);
        }

        /// <summary>
        /// Test whether abbrevation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabbrevation()
        {
            return !string.IsNullOrEmpty(abbrevation);
        }

        /// <summary>
        /// Test whether timezone should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimezone()
        {
            return !string.IsNullOrEmpty(timezone);
        }

        /// <summary>
        /// Test whether parentOcpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeparentOcpRef()
        {
            return !string.IsNullOrEmpty(parentOcpRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperationControlPoint object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperationControlPoint object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperationControlPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperationControlPoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperationControlPoint);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperationControlPoint obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOperationControlPoint Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperationControlPoint)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperationControlPoint Deserialize(System.IO.Stream s)
        {
            return ((tOperationControlPoint)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperationControlPoint object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperationControlPoint object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperationControlPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperationControlPoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperationControlPoint);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperationControlPoint obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOperationControlPoint LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOcp : tOperationControlPoint
    {

        private eOcpPropOperational _propOperational;

        private tOcpPropService _propService;

        private eOcpPropEquipment _propEquipment;

        private eOcpPropOther _propOther;

        private tOcpTsi _tsi;

        private tOcpArea _area;

        private tGeoCoord _geoCoord;

        private List<tDesignator> _designator;

        private static XmlSerializer serializer;

        public eOcp()
        {
            this._designator = new List<tDesignator>();
            this._geoCoord = new tGeoCoord();
            this._area = new tOcpArea();
            this._tsi = new tOcpTsi();
            this._propOther = new eOcpPropOther();
            this._propEquipment = new eOcpPropEquipment();
            this._propService = new tOcpPropService();
            this._propOperational = new eOcpPropOperational();
        }

        public eOcpPropOperational propOperational
        {
            get
            {
                return this._propOperational;
            }
            set
            {
                this._propOperational = value;
            }
        }

        public tOcpPropService propService
        {
            get
            {
                return this._propService;
            }
            set
            {
                this._propService = value;
            }
        }

        public eOcpPropEquipment propEquipment
        {
            get
            {
                return this._propEquipment;
            }
            set
            {
                this._propEquipment = value;
            }
        }

        public eOcpPropOther propOther
        {
            get
            {
                return this._propOther;
            }
            set
            {
                this._propOther = value;
            }
        }

        public tOcpTsi tsi
        {
            get
            {
                return this._tsi;
            }
            set
            {
                this._tsi = value;
            }
        }

        public tOcpArea area
        {
            get
            {
                return this._area;
            }
            set
            {
                this._area = value;
            }
        }

        public tGeoCoord geoCoord
        {
            get
            {
                return this._geoCoord;
            }
            set
            {
                this._geoCoord = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("designator")]
        public List<tDesignator> designator
        {
            get
            {
                return this._designator;
            }
            set
            {
                this._designator = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOcp));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether designator should be serialized
        /// </summary>
        public virtual bool ShouldSerializedesignator()
        {
            return designator != null && designator.Count > 0;
        }

        /// <summary>
        /// Test whether propOperational should be serialized
        /// </summary>
        public virtual bool ShouldSerializepropOperational()
        {
            return (_propOperational != null);
        }

        /// <summary>
        /// Test whether propService should be serialized
        /// </summary>
        public virtual bool ShouldSerializepropService()
        {
            return (_propService != null);
        }

        /// <summary>
        /// Test whether propEquipment should be serialized
        /// </summary>
        public virtual bool ShouldSerializepropEquipment()
        {
            return (_propEquipment != null);
        }

        /// <summary>
        /// Test whether propOther should be serialized
        /// </summary>
        public virtual bool ShouldSerializepropOther()
        {
            return (_propOther != null);
        }

        /// <summary>
        /// Test whether tsi should be serialized
        /// </summary>
        public virtual bool ShouldSerializetsi()
        {
            return (_tsi != null);
        }

        /// <summary>
        /// Test whether area should be serialized
        /// </summary>
        public virtual bool ShouldSerializearea()
        {
            return (_area != null);
        }

        /// <summary>
        /// Test whether geoCoord should be serialized
        /// </summary>
        public virtual bool ShouldSerializegeoCoord()
        {
            return (_geoCoord != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOcp object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOcp object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOcp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOcp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcp);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOcp obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eOcp Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOcp)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOcp Deserialize(System.IO.Stream s)
        {
            return ((eOcp)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOcp object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOcp object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOcp object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOcp obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcp);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOcp obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eOcp LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOcpPropOperational : tOcpPropOperational
    {

        private List<tOcpUptime> _uptime;

        private static XmlSerializer serializer;

        public eOcpPropOperational()
        {
            this._uptime = new List<tOcpUptime>();
        }

        [System.Xml.Serialization.XmlElementAttribute("uptime")]
        public List<tOcpUptime> uptime
        {
            get
            {
                return this._uptime;
            }
            set
            {
                this._uptime = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOcpPropOperational));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether uptime should be serialized
        /// </summary>
        public virtual bool ShouldSerializeuptime()
        {
            return uptime != null && uptime.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOcpPropOperational object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOcpPropOperational object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOcpPropOperational object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOcpPropOperational obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpPropOperational);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOcpPropOperational obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eOcpPropOperational Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOcpPropOperational)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOcpPropOperational Deserialize(System.IO.Stream s)
        {
            return ((eOcpPropOperational)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOcpPropOperational object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOcpPropOperational object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOcpPropOperational object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOcpPropOperational obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpPropOperational);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOcpPropOperational obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eOcpPropOperational LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpUptime : tTimeSpan
    {

        private string _mode;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string mode
        {
            get
            {
                return this._mode;
            }
            set
            {
                this._mode = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpUptime));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether mode should be serialized
        /// </summary>
        public virtual bool ShouldSerializemode()
        {
            return !string.IsNullOrEmpty(mode);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpUptime object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpUptime object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpUptime object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpUptime obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpUptime);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpUptime obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOcpUptime Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpUptime)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpUptime Deserialize(System.IO.Stream s)
        {
            return ((tOcpUptime)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpUptime object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpUptime object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpUptime object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpUptime obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpUptime);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpUptime obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOcpUptime LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOcpUptime))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTimeSpan : ParentContainer
    {

        private bool _shouldSerializeuntil;

        private bool _shouldSerializefrom;

        private System.DateTime _from;

        private System.DateTime _until;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "time")]
        public System.DateTime from
        {
            get
            {
                return this._from;
            }
            set
            {
                this._from = value;
                _shouldSerializefrom = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "time")]
        public System.DateTime until
        {
            get
            {
                return this._until;
            }
            set
            {
                this._until = value;
                _shouldSerializeuntil = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTimeSpan));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether from should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrom()
        {
            if (_shouldSerializefrom)
            {
                return true;
            }
            return (_from != default(System.DateTime));
        }

        /// <summary>
        /// Test whether until should be serialized
        /// </summary>
        public virtual bool ShouldSerializeuntil()
        {
            if (_shouldSerializeuntil)
            {
                return true;
            }
            return (_until != default(System.DateTime));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTimeSpan object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTimeSpan object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTimeSpan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTimeSpan obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTimeSpan);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTimeSpan obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTimeSpan Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTimeSpan)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTimeSpan Deserialize(System.IO.Stream s)
        {
            return ((tTimeSpan)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTimeSpan object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTimeSpan object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTimeSpan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTimeSpan obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTimeSpan);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTimeSpan obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTimeSpan LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOcpPropOperational))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpPropOperational : ParentContainer
    {

        private bool _shouldSerializeensuresTrainSequence;

        private bool _shouldSerializeorderChangeable;

        private string _operationalType;

        private string _trafficType;

        private bool _orderChangeable;

        private bool _ensuresTrainSequence;

        private static XmlSerializer serializer;

        public tOcpPropOperational()
        {
            this._orderChangeable = false;
            this._ensuresTrainSequence = true;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string operationalType
        {
            get
            {
                return this._operationalType;
            }
            set
            {
                this._operationalType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trafficType
        {
            get
            {
                return this._trafficType;
            }
            set
            {
                this._trafficType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool orderChangeable
        {
            get
            {
                return this._orderChangeable;
            }
            set
            {
                this._orderChangeable = value;
                _shouldSerializeorderChangeable = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool ensuresTrainSequence
        {
            get
            {
                return this._ensuresTrainSequence;
            }
            set
            {
                this._ensuresTrainSequence = value;
                _shouldSerializeensuresTrainSequence = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpPropOperational));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether orderChangeable should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorderChangeable()
        {
            if (_shouldSerializeorderChangeable)
            {
                return true;
            }
            return (_orderChangeable != default(bool));
        }

        /// <summary>
        /// Test whether ensuresTrainSequence should be serialized
        /// </summary>
        public virtual bool ShouldSerializeensuresTrainSequence()
        {
            if (_shouldSerializeensuresTrainSequence)
            {
                return true;
            }
            return (_ensuresTrainSequence != default(bool));
        }

        /// <summary>
        /// Test whether operationalType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationalType()
        {
            return !string.IsNullOrEmpty(operationalType);
        }

        /// <summary>
        /// Test whether trafficType should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrafficType()
        {
            return !string.IsNullOrEmpty(trafficType);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpPropOperational object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpPropOperational object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpPropOperational object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpPropOperational obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpPropOperational);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpPropOperational obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOcpPropOperational Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpPropOperational)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpPropOperational Deserialize(System.IO.Stream s)
        {
            return ((tOcpPropOperational)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpPropOperational object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpPropOperational object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpPropOperational object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpPropOperational obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpPropOperational);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpPropOperational obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOcpPropOperational LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpPropService : ParentContainer
    {

        private bool _shouldSerializegoodsMarshalling;

        private bool _shouldSerializegoodsIntermodal;

        private bool _shouldSerializegoodsSiding;

        private bool _shouldSerializegoodsLoading;

        private bool _shouldSerializetariffpoint;

        private bool _shouldSerializeairport;

        private bool _shouldSerializebus;

        private bool _shouldSerializeship;

        private bool _shouldSerializeservice;

        private bool _shouldSerializepassenger;

        private bool _passenger;

        private bool _service;

        private bool _ship;

        private bool _bus;

        private bool _airport;

        private bool _tariffpoint;

        private bool _goodsLoading;

        private bool _goodsSiding;

        private bool _goodsIntermodal;

        private bool _goodsMarshalling;

        private static XmlSerializer serializer;

        public tOcpPropService()
        {
            this._passenger = false;
            this._service = false;
            this._ship = false;
            this._bus = false;
            this._airport = false;
            this._tariffpoint = false;
            this._goodsLoading = false;
            this._goodsSiding = false;
            this._goodsIntermodal = false;
            this._goodsMarshalling = false;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool passenger
        {
            get
            {
                return this._passenger;
            }
            set
            {
                this._passenger = value;
                _shouldSerializepassenger = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool service
        {
            get
            {
                return this._service;
            }
            set
            {
                this._service = value;
                _shouldSerializeservice = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool ship
        {
            get
            {
                return this._ship;
            }
            set
            {
                this._ship = value;
                _shouldSerializeship = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool bus
        {
            get
            {
                return this._bus;
            }
            set
            {
                this._bus = value;
                _shouldSerializebus = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool airport
        {
            get
            {
                return this._airport;
            }
            set
            {
                this._airport = value;
                _shouldSerializeairport = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool tariffpoint
        {
            get
            {
                return this._tariffpoint;
            }
            set
            {
                this._tariffpoint = value;
                _shouldSerializetariffpoint = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool goodsLoading
        {
            get
            {
                return this._goodsLoading;
            }
            set
            {
                this._goodsLoading = value;
                _shouldSerializegoodsLoading = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool goodsSiding
        {
            get
            {
                return this._goodsSiding;
            }
            set
            {
                this._goodsSiding = value;
                _shouldSerializegoodsSiding = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool goodsIntermodal
        {
            get
            {
                return this._goodsIntermodal;
            }
            set
            {
                this._goodsIntermodal = value;
                _shouldSerializegoodsIntermodal = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool goodsMarshalling
        {
            get
            {
                return this._goodsMarshalling;
            }
            set
            {
                this._goodsMarshalling = value;
                _shouldSerializegoodsMarshalling = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpPropService));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether passenger should be serialized
        /// </summary>
        public virtual bool ShouldSerializepassenger()
        {
            if (_shouldSerializepassenger)
            {
                return true;
            }
            return (_passenger != default(bool));
        }

        /// <summary>
        /// Test whether service should be serialized
        /// </summary>
        public virtual bool ShouldSerializeservice()
        {
            if (_shouldSerializeservice)
            {
                return true;
            }
            return (_service != default(bool));
        }

        /// <summary>
        /// Test whether ship should be serialized
        /// </summary>
        public virtual bool ShouldSerializeship()
        {
            if (_shouldSerializeship)
            {
                return true;
            }
            return (_ship != default(bool));
        }

        /// <summary>
        /// Test whether bus should be serialized
        /// </summary>
        public virtual bool ShouldSerializebus()
        {
            if (_shouldSerializebus)
            {
                return true;
            }
            return (_bus != default(bool));
        }

        /// <summary>
        /// Test whether airport should be serialized
        /// </summary>
        public virtual bool ShouldSerializeairport()
        {
            if (_shouldSerializeairport)
            {
                return true;
            }
            return (_airport != default(bool));
        }

        /// <summary>
        /// Test whether tariffpoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializetariffpoint()
        {
            if (_shouldSerializetariffpoint)
            {
                return true;
            }
            return (_tariffpoint != default(bool));
        }

        /// <summary>
        /// Test whether goodsLoading should be serialized
        /// </summary>
        public virtual bool ShouldSerializegoodsLoading()
        {
            if (_shouldSerializegoodsLoading)
            {
                return true;
            }
            return (_goodsLoading != default(bool));
        }

        /// <summary>
        /// Test whether goodsSiding should be serialized
        /// </summary>
        public virtual bool ShouldSerializegoodsSiding()
        {
            if (_shouldSerializegoodsSiding)
            {
                return true;
            }
            return (_goodsSiding != default(bool));
        }

        /// <summary>
        /// Test whether goodsIntermodal should be serialized
        /// </summary>
        public virtual bool ShouldSerializegoodsIntermodal()
        {
            if (_shouldSerializegoodsIntermodal)
            {
                return true;
            }
            return (_goodsIntermodal != default(bool));
        }

        /// <summary>
        /// Test whether goodsMarshalling should be serialized
        /// </summary>
        public virtual bool ShouldSerializegoodsMarshalling()
        {
            if (_shouldSerializegoodsMarshalling)
            {
                return true;
            }
            return (_goodsMarshalling != default(bool));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpPropService object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpPropService object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpPropService object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpPropService obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpPropService);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpPropService obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOcpPropService Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpPropService)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpPropService Deserialize(System.IO.Stream s)
        {
            return ((tOcpPropService)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpPropService object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpPropService object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpPropService object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpPropService obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpPropService);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpPropService obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOcpPropService LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOcpPropEquipment : ParentContainer
    {

        private List<object> _items;

        private static XmlSerializer serializer;

        public eOcpPropEquipment()
        {
            this._items = new List<object>();
        }

        [System.Xml.Serialization.XmlElementAttribute("summary", typeof(tOcpPropEquipmentSummary))]
        [System.Xml.Serialization.XmlElementAttribute("trackRef", typeof(tTrackRefInGroup))]
        public List<object> Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOcpPropEquipment));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Items should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItems()
        {
            return Items != null && Items.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOcpPropEquipment object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOcpPropEquipment object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOcpPropEquipment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOcpPropEquipment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpPropEquipment);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOcpPropEquipment obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eOcpPropEquipment Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOcpPropEquipment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOcpPropEquipment Deserialize(System.IO.Stream s)
        {
            return ((eOcpPropEquipment)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOcpPropEquipment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOcpPropEquipment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOcpPropEquipment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOcpPropEquipment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpPropEquipment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOcpPropEquipment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eOcpPropEquipment LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpPropEquipmentSummary : ParentContainer
    {

        private bool _shouldSerializehasSwitches;

        private bool _shouldSerializehasStarterSignals;

        private bool _shouldSerializehasHomeSignals;

        private bool _shouldSerializepowerstation;

        private bool _shouldSerializesignalBox;

        private System.Nullable<tInterlockingTypes> _signalBox;

        private bool _powerstation;

        private bool _hasHomeSignals;

        private bool _hasStarterSignals;

        private bool _hasSwitches;

        private static XmlSerializer serializer;

        public tOcpPropEquipmentSummary()
        {
            this._powerstation = false;
            this._hasHomeSignals = false;
            this._hasStarterSignals = false;
            this._hasSwitches = false;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tInterlockingTypes signalBox
        {
            get
            {
                if (this._signalBox.HasValue)
                {
                    return this._signalBox.Value;
                }
                else
                {
                    return default(tInterlockingTypes);
                }
            }
            set
            {
                this._signalBox = value;
                _shouldSerializesignalBox = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool signalBoxSpecified
        {
            get
            {
                return this._signalBox.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._signalBox = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool powerstation
        {
            get
            {
                return this._powerstation;
            }
            set
            {
                this._powerstation = value;
                _shouldSerializepowerstation = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool hasHomeSignals
        {
            get
            {
                return this._hasHomeSignals;
            }
            set
            {
                this._hasHomeSignals = value;
                _shouldSerializehasHomeSignals = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool hasStarterSignals
        {
            get
            {
                return this._hasStarterSignals;
            }
            set
            {
                this._hasStarterSignals = value;
                _shouldSerializehasStarterSignals = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool hasSwitches
        {
            get
            {
                return this._hasSwitches;
            }
            set
            {
                this._hasSwitches = value;
                _shouldSerializehasSwitches = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpPropEquipmentSummary));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether signalBox should be serialized
        /// </summary>
        public virtual bool ShouldSerializesignalBox()
        {
            if (_shouldSerializesignalBox)
            {
                return true;
            }
            return (_signalBox != default(tInterlockingTypes));
        }

        /// <summary>
        /// Test whether powerstation should be serialized
        /// </summary>
        public virtual bool ShouldSerializepowerstation()
        {
            if (_shouldSerializepowerstation)
            {
                return true;
            }
            return (_powerstation != default(bool));
        }

        /// <summary>
        /// Test whether hasHomeSignals should be serialized
        /// </summary>
        public virtual bool ShouldSerializehasHomeSignals()
        {
            if (_shouldSerializehasHomeSignals)
            {
                return true;
            }
            return (_hasHomeSignals != default(bool));
        }

        /// <summary>
        /// Test whether hasStarterSignals should be serialized
        /// </summary>
        public virtual bool ShouldSerializehasStarterSignals()
        {
            if (_shouldSerializehasStarterSignals)
            {
                return true;
            }
            return (_hasStarterSignals != default(bool));
        }

        /// <summary>
        /// Test whether hasSwitches should be serialized
        /// </summary>
        public virtual bool ShouldSerializehasSwitches()
        {
            if (_shouldSerializehasSwitches)
            {
                return true;
            }
            return (_hasSwitches != default(bool));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpPropEquipmentSummary object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpPropEquipmentSummary object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpPropEquipmentSummary object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpPropEquipmentSummary obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpPropEquipmentSummary);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpPropEquipmentSummary obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOcpPropEquipmentSummary Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpPropEquipmentSummary)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpPropEquipmentSummary Deserialize(System.IO.Stream s)
        {
            return ((tOcpPropEquipmentSummary)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpPropEquipmentSummary object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpPropEquipmentSummary object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpPropEquipmentSummary object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpPropEquipmentSummary obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpPropEquipmentSummary);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpPropEquipmentSummary obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOcpPropEquipmentSummary LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tInterlockingTypes
    {

        /// <remarks/>
        none,

        /// <remarks/>
        mechanical,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("electro-mechanical")]
        electromechanical,

        /// <remarks/>
        electrical,

        /// <remarks/>
        electronical,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrackRefInGroup : tElementRefInGroup
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrackRefInGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrackRefInGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrackRefInGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrackRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrackRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackRefInGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrackRefInGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrackRefInGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrackRefInGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrackRefInGroup Deserialize(System.IO.Stream s)
        {
            return ((tTrackRefInGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrackRefInGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrackRefInGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrackRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrackRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackRefInGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrackRefInGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrackRefInGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBaliseRefInGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalRefInGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOcpRefInGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackRefInGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tElementRefInGroup : tElementWithReference
    {

        private string _sequence;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                this._sequence = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tElementRefInGroup));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether sequence should be serialized
        /// </summary>
        public virtual bool ShouldSerializesequence()
        {
            return !string.IsNullOrEmpty(sequence);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tElementRefInGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tElementRefInGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tElementRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tElementRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElementRefInGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tElementRefInGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tElementRefInGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tElementRefInGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tElementRefInGroup Deserialize(System.IO.Stream s)
        {
            return ((tElementRefInGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tElementRefInGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tElementRefInGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tElementRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tElementRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElementRefInGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tElementRefInGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tElementRefInGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBlockPartRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tAnnotationRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tServiceSectionRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlatformEdgeRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperatingPeriodRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOperatingPeriodRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSpeedProfileRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainPartRef))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOcpVis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrackElementVis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrackVis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eLineVis))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tElementRefInGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBaliseRefInGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalRefInGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOcpRefInGroup))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackRefInGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tElementWithReference : ParentContainer
    {

        private string _ref;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tElementWithReference()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string @ref
        {
            get
            {
                return this._ref;
            }
            set
            {
                this._ref = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tElementWithReference));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether ref should be serialized
        /// </summary>
        public virtual bool ShouldSerializeref()
        {
            return !string.IsNullOrEmpty(@ref);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tElementWithReference object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tElementWithReference object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tElementWithReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tElementWithReference obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElementWithReference);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tElementWithReference obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tElementWithReference Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tElementWithReference)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tElementWithReference Deserialize(System.IO.Stream s)
        {
            return ((tElementWithReference)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tElementWithReference object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tElementWithReference object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tElementWithReference object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tElementWithReference obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElementWithReference);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tElementWithReference obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tElementWithReference LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBlockPartRef : tElementWithReference
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBlockPartRef));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBlockPartRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBlockPartRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBlockPartRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBlockPartRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBlockPartRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBlockPartRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBlockPartRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBlockPartRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBlockPartRef Deserialize(System.IO.Stream s)
        {
            return ((tBlockPartRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBlockPartRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBlockPartRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBlockPartRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBlockPartRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBlockPartRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBlockPartRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBlockPartRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAnnotationRef : tElementWithReference
    {

        private string _operatingPeriodRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string operatingPeriodRef
        {
            get
            {
                return this._operatingPeriodRef;
            }
            set
            {
                this._operatingPeriodRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAnnotationRef));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether operatingPeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingPeriodRef()
        {
            return !string.IsNullOrEmpty(operatingPeriodRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAnnotationRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAnnotationRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAnnotationRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAnnotationRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAnnotationRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAnnotationRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tAnnotationRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAnnotationRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAnnotationRef Deserialize(System.IO.Stream s)
        {
            return ((tAnnotationRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAnnotationRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAnnotationRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAnnotationRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAnnotationRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAnnotationRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAnnotationRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tAnnotationRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tServiceSectionRef : tElementWithReference
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tServiceSectionRef));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tServiceSectionRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tServiceSectionRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tServiceSectionRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tServiceSectionRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tServiceSectionRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tServiceSectionRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tServiceSectionRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tServiceSectionRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tServiceSectionRef Deserialize(System.IO.Stream s)
        {
            return ((tServiceSectionRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tServiceSectionRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tServiceSectionRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tServiceSectionRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tServiceSectionRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tServiceSectionRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tServiceSectionRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tServiceSectionRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPlatformEdgeRef : tElementWithReference
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPlatformEdgeRef));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPlatformEdgeRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPlatformEdgeRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPlatformEdgeRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPlatformEdgeRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlatformEdgeRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPlatformEdgeRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tPlatformEdgeRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPlatformEdgeRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPlatformEdgeRef Deserialize(System.IO.Stream s)
        {
            return ((tPlatformEdgeRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPlatformEdgeRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPlatformEdgeRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPlatformEdgeRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPlatformEdgeRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlatformEdgeRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPlatformEdgeRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tPlatformEdgeRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrackRef : tElementWithReference
    {

        private bool _shouldSerializedir;

        private System.Nullable<tStrictDirection> _dir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tStrictDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tStrictDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrackRef));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tStrictDirection));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrackRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrackRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrackRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrackRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrackRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrackRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrackRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrackRef Deserialize(System.IO.Stream s)
        {
            return ((tTrackRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrackRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrackRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrackRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrackRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrackRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrackRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tStrictDirection
    {

        /// <remarks/>
        up,

        /// <remarks/>
        down,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOperatingPeriodRef))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperatingPeriodRef : tElementWithReference
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperatingPeriodRef));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperatingPeriodRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperatingPeriodRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperatingPeriodRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperatingPeriodRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperatingPeriodRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperatingPeriodRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOperatingPeriodRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperatingPeriodRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperatingPeriodRef Deserialize(System.IO.Stream s)
        {
            return ((tOperatingPeriodRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperatingPeriodRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperatingPeriodRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperatingPeriodRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperatingPeriodRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperatingPeriodRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperatingPeriodRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOperatingPeriodRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOperatingPeriodRef : tOperatingPeriodRef
    {

        private List<tSpecialService> _specialService;

        private static XmlSerializer serializer;

        public eOperatingPeriodRef()
        {
            this._specialService = new List<tSpecialService>();
        }

        [System.Xml.Serialization.XmlElementAttribute("specialService")]
        public List<tSpecialService> specialService
        {
            get
            {
                return this._specialService;
            }
            set
            {
                this._specialService = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOperatingPeriodRef));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether specialService should be serialized
        /// </summary>
        public virtual bool ShouldSerializespecialService()
        {
            return specialService != null && specialService.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOperatingPeriodRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOperatingPeriodRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOperatingPeriodRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOperatingPeriodRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOperatingPeriodRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOperatingPeriodRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eOperatingPeriodRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOperatingPeriodRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOperatingPeriodRef Deserialize(System.IO.Stream s)
        {
            return ((eOperatingPeriodRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOperatingPeriodRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOperatingPeriodRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOperatingPeriodRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOperatingPeriodRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOperatingPeriodRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOperatingPeriodRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eOperatingPeriodRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSpecialService : ParentContainer
    {

        private bool _shouldSerializesingleDate;

        private bool _shouldSerializetype;

        private bool _shouldSerializestartDate;

        private bool _shouldSerializeendDate;

        private tSpecialServiceType _type;

        private System.Nullable<System.DateTime> _singleDate;

        private Nullable<DateTime> _startDate;

        private Nullable<DateTime> _endDate;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tSpecialServiceType type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
                _shouldSerializetype = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime singleDate
        {
            get
            {
                if (this._singleDate.HasValue)
                {
                    return this._singleDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._singleDate = value;
                _shouldSerializesingleDate = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime startDate
        {
            get
            {
                if (this._startDate.HasValue)
                {
                    return this._startDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._startDate = value;
                _shouldSerializestartDate = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime endDate
        {
            get
            {
                if (this._endDate.HasValue)
                {
                    return this._endDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._endDate = value;
                _shouldSerializeendDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool singleDateSpecified
        {
            get
            {
                return this._singleDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._singleDate = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSpecialService));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            if (_shouldSerializetype)
            {
                return true;
            }
            return (_type != default(tSpecialServiceType));
        }

        /// <summary>
        /// Test whether singleDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializesingleDate()
        {
            if (_shouldSerializesingleDate)
            {
                return true;
            }
            return (_singleDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether singleDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializestartDate()
        {
            if (_shouldSerializestartDate)
            {
                return true;
            }
            return (_startDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether singleDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendDate()
        {
            if (_shouldSerializeendDate)
            {
                return true;
            }
            return (_endDate != default(System.DateTime));
        }


        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSpecialService object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSpecialService object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSpecialService object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSpecialService obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpecialService);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSpecialService obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tSpecialService Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSpecialService)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSpecialService Deserialize(System.IO.Stream s)
        {
            return ((tSpecialService)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSpecialService object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSpecialService object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSpecialService object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSpecialService obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpecialService);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSpecialService obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tSpecialService LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tSpecialServiceType
    {

        /// <remarks/>
        include,

        /// <remarks/>
        exclude,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSpeedProfileRef : tElementWithReference
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSpeedProfileRef));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSpeedProfileRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSpeedProfileRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSpeedProfileRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSpeedProfileRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpeedProfileRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSpeedProfileRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSpeedProfileRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSpeedProfileRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSpeedProfileRef Deserialize(System.IO.Stream s)
        {
            return ((tSpeedProfileRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSpeedProfileRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSpeedProfileRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSpeedProfileRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSpeedProfileRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpeedProfileRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSpeedProfileRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSpeedProfileRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainPartRef : tElementWithReference
    {

        private string _position;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string position
        {
            get
            {
                return this._position;
            }
            set
            {
                this._position = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainPartRef));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether position should be serialized
        /// </summary>
        public virtual bool ShouldSerializeposition()
        {
            return !string.IsNullOrEmpty(position);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainPartRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainPartRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainPartRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainPartRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainPartRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainPartRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainPartRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainPartRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainPartRef Deserialize(System.IO.Stream s)
        {
            return ((tTrainPartRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainPartRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainPartRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainPartRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainPartRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainPartRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainPartRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainPartRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOcpVis : tElementWithReference
    {

        private tPoint _position;

        private tSize _size;

        private static XmlSerializer serializer;

        public eOcpVis()
        {
            this._size = new tSize();
            this._position = new tPoint();
        }

        public tPoint position
        {
            get
            {
                return this._position;
            }
            set
            {
                this._position = value;
            }
        }

        public tSize size
        {
            get
            {
                return this._size;
            }
            set
            {
                this._size = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOcpVis));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether position should be serialized
        /// </summary>
        public virtual bool ShouldSerializeposition()
        {
            return (_position != null);
        }

        /// <summary>
        /// Test whether size should be serialized
        /// </summary>
        public virtual bool ShouldSerializesize()
        {
            return (_size != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOcpVis object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOcpVis object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOcpVis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOcpVis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpVis);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOcpVis obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eOcpVis Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOcpVis)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOcpVis Deserialize(System.IO.Stream s)
        {
            return ((eOcpVis)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOcpVis object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOcpVis object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOcpVis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOcpVis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpVis);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOcpVis obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eOcpVis LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPoint : ParentContainer
    {

        private bool _shouldSerializey;

        private bool _shouldSerializex;

        private double _x;

        private double _y;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double x
        {
            get
            {
                return this._x;
            }
            set
            {
                this._x = value;
                _shouldSerializex = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double y
        {
            get
            {
                return this._y;
            }
            set
            {
                this._y = value;
                _shouldSerializey = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPoint));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether x should be serialized
        /// </summary>
        public virtual bool ShouldSerializex()
        {
            if (_shouldSerializex)
            {
                return true;
            }
            return (_x != default(double));
        }

        /// <summary>
        /// Test whether y should be serialized
        /// </summary>
        public virtual bool ShouldSerializey()
        {
            if (_shouldSerializey)
            {
                return true;
            }
            return (_y != default(double));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPoint object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPoint object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPoint);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPoint obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tPoint Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPoint)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPoint Deserialize(System.IO.Stream s)
        {
            return ((tPoint)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPoint object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPoint object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPoint object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPoint obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPoint);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPoint obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tPoint LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSize : ParentContainer
    {

        private bool _shouldSerializeheight;

        private bool _shouldSerializewidth;

        private double _width;

        private double _height;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double width
        {
            get
            {
                return this._width;
            }
            set
            {
                this._width = value;
                _shouldSerializewidth = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double height
        {
            get
            {
                return this._height;
            }
            set
            {
                this._height = value;
                _shouldSerializeheight = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSize));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether width should be serialized
        /// </summary>
        public virtual bool ShouldSerializewidth()
        {
            if (_shouldSerializewidth)
            {
                return true;
            }
            return (_width != default(double));
        }

        /// <summary>
        /// Test whether height should be serialized
        /// </summary>
        public virtual bool ShouldSerializeheight()
        {
            if (_shouldSerializeheight)
            {
                return true;
            }
            return (_height != default(double));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSize object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSize object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSize object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSize obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSize);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSize obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tSize Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSize)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSize Deserialize(System.IO.Stream s)
        {
            return ((tSize)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSize object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSize object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSize object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSize obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSize);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSize obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tSize LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrackElementVis : tElementWithReference
    {

        private tPoint _position;

        private static XmlSerializer serializer;

        public eTrackElementVis()
        {
            this._position = new tPoint();
        }

        public tPoint position
        {
            get
            {
                return this._position;
            }
            set
            {
                this._position = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrackElementVis));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether position should be serialized
        /// </summary>
        public virtual bool ShouldSerializeposition()
        {
            return (_position != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrackElementVis object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrackElementVis object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrackElementVis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrackElementVis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackElementVis);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrackElementVis obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrackElementVis Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrackElementVis)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrackElementVis Deserialize(System.IO.Stream s)
        {
            return ((eTrackElementVis)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrackElementVis object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrackElementVis object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrackElementVis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrackElementVis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackElementVis);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrackElementVis obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrackElementVis LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrackVis : tElementWithReference
    {

        private List<eTrackElementVis> _trackElementVis;

        private static XmlSerializer serializer;

        public eTrackVis()
        {
            this._trackElementVis = new List<eTrackElementVis>();
        }

        [System.Xml.Serialization.XmlElementAttribute("trackElementVis")]
        public List<eTrackElementVis> trackElementVis
        {
            get
            {
                return this._trackElementVis;
            }
            set
            {
                this._trackElementVis = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrackVis));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackElementVis should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackElementVis()
        {
            return trackElementVis != null && trackElementVis.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrackVis object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrackVis object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrackVis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrackVis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackVis);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrackVis obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrackVis Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrackVis)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrackVis Deserialize(System.IO.Stream s)
        {
            return ((eTrackVis)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrackVis object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrackVis object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrackVis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrackVis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackVis);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrackVis obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrackVis LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eLineVis : tElementWithReference
    {

        private List<eTrackVis> _trackVis;

        private static XmlSerializer serializer;

        public eLineVis()
        {
            this._trackVis = new List<eTrackVis>();
        }

        [System.Xml.Serialization.XmlElementAttribute("trackVis")]
        public List<eTrackVis> trackVis
        {
            get
            {
                return this._trackVis;
            }
            set
            {
                this._trackVis = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eLineVis));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackVis should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackVis()
        {
            return trackVis != null && trackVis.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eLineVis object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eLineVis object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eLineVis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eLineVis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLineVis);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eLineVis obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eLineVis Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eLineVis)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eLineVis Deserialize(System.IO.Stream s)
        {
            return ((eLineVis)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eLineVis object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eLineVis object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eLineVis object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eLineVis obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLineVis);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eLineVis obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eLineVis LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBaliseRefInGroup : tElementRefInGroup
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBaliseRefInGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBaliseRefInGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBaliseRefInGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBaliseRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBaliseRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBaliseRefInGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBaliseRefInGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBaliseRefInGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBaliseRefInGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBaliseRefInGroup Deserialize(System.IO.Stream s)
        {
            return ((tBaliseRefInGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBaliseRefInGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBaliseRefInGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBaliseRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBaliseRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBaliseRefInGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBaliseRefInGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBaliseRefInGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalRefInGroup : tElementRefInGroup
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalRefInGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalRefInGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalRefInGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalRefInGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalRefInGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalRefInGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalRefInGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalRefInGroup Deserialize(System.IO.Stream s)
        {
            return ((tSignalRefInGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalRefInGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalRefInGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalRefInGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalRefInGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalRefInGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpRefInGroup : tElementRefInGroup
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpRefInGroup));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpRefInGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpRefInGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpRefInGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpRefInGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOcpRefInGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpRefInGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpRefInGroup Deserialize(System.IO.Stream s)
        {
            return ((tOcpRefInGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpRefInGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpRefInGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpRefInGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpRefInGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpRefInGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpRefInGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOcpRefInGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOcpPropOther : tOcpPropOther
    {

        private List<tOcpAdditionalName> _additionalName;

        private static XmlSerializer serializer;

        public eOcpPropOther()
        {
            this._additionalName = new List<tOcpAdditionalName>();
        }

        [System.Xml.Serialization.XmlElementAttribute("additionalName")]
        public List<tOcpAdditionalName> additionalName
        {
            get
            {
                return this._additionalName;
            }
            set
            {
                this._additionalName = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOcpPropOther));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether additionalName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalName()
        {
            return additionalName != null && additionalName.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOcpPropOther object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOcpPropOther object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOcpPropOther object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOcpPropOther obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpPropOther);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOcpPropOther obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eOcpPropOther Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOcpPropOther)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOcpPropOther Deserialize(System.IO.Stream s)
        {
            return ((eOcpPropOther)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOcpPropOther object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOcpPropOther object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOcpPropOther object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOcpPropOther obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpPropOther);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOcpPropOther obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eOcpPropOther LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpAdditionalName : ParentContainer
    {

        private string _value;

        private string _type;

        private string _lang;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang
        {
            get
            {
                return this._lang;
            }
            set
            {
                this._lang = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpAdditionalName));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            return !string.IsNullOrEmpty(value);
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether lang should be serialized
        /// </summary>
        public virtual bool ShouldSerializelang()
        {
            return !string.IsNullOrEmpty(lang);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpAdditionalName object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpAdditionalName object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpAdditionalName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpAdditionalName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpAdditionalName);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpAdditionalName obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOcpAdditionalName Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpAdditionalName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpAdditionalName Deserialize(System.IO.Stream s)
        {
            return ((tOcpAdditionalName)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpAdditionalName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpAdditionalName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpAdditionalName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpAdditionalName obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpAdditionalName);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpAdditionalName obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOcpAdditionalName LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOcpPropOther))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpPropOther : ParentContainer
    {

        private bool _shouldSerializechargeFrontier;

        private bool _shouldSerializefrontier;

        private bool _frontier;

        private bool _chargeFrontier;

        private string _status;

        private static XmlSerializer serializer;

        public tOcpPropOther()
        {
            this._frontier = false;
            this._chargeFrontier = false;
            this._status = "operational";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool frontier
        {
            get
            {
                return this._frontier;
            }
            set
            {
                this._frontier = value;
                _shouldSerializefrontier = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool chargeFrontier
        {
            get
            {
                return this._chargeFrontier;
            }
            set
            {
                this._chargeFrontier = value;
                _shouldSerializechargeFrontier = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("operational")]
        public string status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpPropOther));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether frontier should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrontier()
        {
            if (_shouldSerializefrontier)
            {
                return true;
            }
            return (_frontier != default(bool));
        }

        /// <summary>
        /// Test whether chargeFrontier should be serialized
        /// </summary>
        public virtual bool ShouldSerializechargeFrontier()
        {
            if (_shouldSerializechargeFrontier)
            {
                return true;
            }
            return (_chargeFrontier != default(bool));
        }

        /// <summary>
        /// Test whether status should be serialized
        /// </summary>
        public virtual bool ShouldSerializestatus()
        {
            return !string.IsNullOrEmpty(status);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpPropOther object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpPropOther object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpPropOther object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpPropOther obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpPropOther);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpPropOther obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOcpPropOther Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpPropOther)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpPropOther Deserialize(System.IO.Stream s)
        {
            return ((tOcpPropOther)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpPropOther object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpPropOther object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpPropOther object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpPropOther obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpPropOther);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpPropOther obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOcpPropOther LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpTsi : ParentContainer
    {

        private string _country;

        private string _location;

        private string _check;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string country
        {
            get
            {
                return this._country;
            }
            set
            {
                this._country = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string location
        {
            get
            {
                return this._location;
            }
            set
            {
                this._location = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string check
        {
            get
            {
                return this._check;
            }
            set
            {
                this._check = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpTsi));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether country should be serialized
        /// </summary>
        public virtual bool ShouldSerializecountry()
        {
            return !string.IsNullOrEmpty(country);
        }

        /// <summary>
        /// Test whether location should be serialized
        /// </summary>
        public virtual bool ShouldSerializelocation()
        {
            return !string.IsNullOrEmpty(location);
        }

        /// <summary>
        /// Test whether check should be serialized
        /// </summary>
        public virtual bool ShouldSerializecheck()
        {
            return !string.IsNullOrEmpty(check);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpTsi object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpTsi object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpTsi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpTsi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpTsi);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpTsi obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOcpTsi Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpTsi)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpTsi Deserialize(System.IO.Stream s)
        {
            return ((tOcpTsi)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpTsi object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpTsi object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpTsi object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpTsi obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpTsi);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpTsi obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOcpTsi LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpArea : ParentContainer
    {

        private string _name;

        private string _number;

        private string _zip;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string number
        {
            get
            {
                return this._number;
            }
            set
            {
                this._number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string zip
        {
            get
            {
                return this._zip;
            }
            set
            {
                this._zip = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpArea));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        /// <summary>
        /// Test whether number should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumber()
        {
            return !string.IsNullOrEmpty(number);
        }

        /// <summary>
        /// Test whether zip should be serialized
        /// </summary>
        public virtual bool ShouldSerializezip()
        {
            return !string.IsNullOrEmpty(zip);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpArea object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpArea object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpArea obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpArea);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpArea obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOcpArea Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpArea)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpArea Deserialize(System.IO.Stream s)
        {
            return ((tOcpArea)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpArea object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpArea object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpArea obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpArea);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpArea obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOcpArea LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tGeoCoord : ParentContainer
    {

        private bool _shouldSerializeextraHeight;

        private List<double> _coord;

        private System.Nullable<double> _extraHeight;

        private string _epsgCode;

        private string _heightEpsgCode;

        private static XmlSerializer serializer;

        public tGeoCoord()
        {
            this._coord = new List<double>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public List<double> coord
        {
            get
            {
                return this._coord;
            }
            set
            {
                this._coord = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public double extraHeight
        {
            get
            {
                if (this._extraHeight.HasValue)
                {
                    return this._extraHeight.Value;
                }
                else
                {
                    return default(double);
                }
            }
            set
            {
                this._extraHeight = value;
                _shouldSerializeextraHeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool extraHeightSpecified
        {
            get
            {
                return this._extraHeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._extraHeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
        public string epsgCode
        {
            get
            {
                return this._epsgCode;
            }
            set
            {
                this._epsgCode = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
        public string heightEpsgCode
        {
            get
            {
                return this._heightEpsgCode;
            }
            set
            {
                this._heightEpsgCode = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tGeoCoord));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether coord should be serialized
        /// </summary>
        public virtual bool ShouldSerializecoord()
        {
            return coord != null && coord.Count > 0;
        }

        /// <summary>
        /// Test whether extraHeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializeextraHeight()
        {
            if (_shouldSerializeextraHeight)
            {
                return true;
            }
            return (_extraHeight != default(double));
        }

        /// <summary>
        /// Test whether epsgCode should be serialized
        /// </summary>
        public virtual bool ShouldSerializeepsgCode()
        {
            return !string.IsNullOrEmpty(epsgCode);
        }

        /// <summary>
        /// Test whether heightEpsgCode should be serialized
        /// </summary>
        public virtual bool ShouldSerializeheightEpsgCode()
        {
            return !string.IsNullOrEmpty(heightEpsgCode);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tGeoCoord object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tGeoCoord object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tGeoCoord object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tGeoCoord obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGeoCoord);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tGeoCoord obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tGeoCoord Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tGeoCoord)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tGeoCoord Deserialize(System.IO.Stream s)
        {
            return ((tGeoCoord)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tGeoCoord object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tGeoCoord object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tGeoCoord object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tGeoCoord obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGeoCoord);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tGeoCoord obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tGeoCoord LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tDesignator : ParentContainer
    {

        private bool _shouldSerializeendDate;

        private bool _shouldSerializestartDate;

        private string _register;

        private string _entry;

        private System.Nullable<System.DateTime> _startDate;

        private System.Nullable<System.DateTime> _endDate;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tDesignator()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string register
        {
            get
            {
                return this._register;
            }
            set
            {
                this._register = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string entry
        {
            get
            {
                return this._entry;
            }
            set
            {
                this._entry = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime startDate
        {
            get
            {
                if (this._startDate.HasValue)
                {
                    return this._startDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._startDate = value;
                _shouldSerializestartDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified
        {
            get
            {
                return this._startDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._startDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime endDate
        {
            get
            {
                if (this._endDate.HasValue)
                {
                    return this._endDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._endDate = value;
                _shouldSerializeendDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endDateSpecified
        {
            get
            {
                return this._endDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._endDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tDesignator));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether startDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializestartDate()
        {
            if (_shouldSerializestartDate)
            {
                return true;
            }
            return (_startDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether endDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendDate()
        {
            if (_shouldSerializeendDate)
            {
                return true;
            }
            return (_endDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether register should be serialized
        /// </summary>
        public virtual bool ShouldSerializeregister()
        {
            return !string.IsNullOrEmpty(register);
        }

        /// <summary>
        /// Test whether entry should be serialized
        /// </summary>
        public virtual bool ShouldSerializeentry()
        {
            return !string.IsNullOrEmpty(entry);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tDesignator object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tDesignator object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tDesignator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tDesignator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDesignator);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tDesignator obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tDesignator Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tDesignator)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tDesignator Deserialize(System.IO.Stream s)
        {
            return ((tDesignator)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tDesignator object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tDesignator object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tDesignator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tDesignator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDesignator);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tDesignator obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tDesignator LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eInfraAttr))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tElementWithIDAndNameWithoutAny : tAdditionalName
    {

        private string _id;

        private string _code;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string code
        {
            get
            {
                return this._code;
            }
            set
            {
                this._code = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tElementWithIDAndNameWithoutAny));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeid()
        {
            return !string.IsNullOrEmpty(id);
        }

        /// <summary>
        /// Test whether code should be serialized
        /// </summary>
        public virtual bool ShouldSerializecode()
        {
            return !string.IsNullOrEmpty(code);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tElementWithIDAndNameWithoutAny object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tElementWithIDAndNameWithoutAny object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tElementWithIDAndNameWithoutAny object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tElementWithIDAndNameWithoutAny obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElementWithIDAndNameWithoutAny);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tElementWithIDAndNameWithoutAny obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tElementWithIDAndNameWithoutAny Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tElementWithIDAndNameWithoutAny)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tElementWithIDAndNameWithoutAny Deserialize(System.IO.Stream s)
        {
            return ((tElementWithIDAndNameWithoutAny)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tElementWithIDAndNameWithoutAny object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tElementWithIDAndNameWithoutAny object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tElementWithIDAndNameWithoutAny object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tElementWithIDAndNameWithoutAny obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElementWithIDAndNameWithoutAny);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tElementWithIDAndNameWithoutAny obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tElementWithIDAndNameWithoutAny LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eBlock))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBlock : tElementWithIDAndName
    {

        private bool _shouldSerializefixed;

        private string _blockGroupNumber;

        private System.Nullable<bool> _fixed;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string blockGroupNumber
        {
            get
            {
                return this._blockGroupNumber;
            }
            set
            {
                this._blockGroupNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool @fixed
        {
            get
            {
                if (this._fixed.HasValue)
                {
                    return this._fixed.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._fixed = value;
                _shouldSerializefixed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fixedSpecified
        {
            get
            {
                return this._fixed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._fixed = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBlock));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether fixed should be serialized
        /// </summary>
        public virtual bool ShouldSerializefixed()
        {
            if (_shouldSerializefixed)
            {
                return true;
            }
            return (_fixed != default(bool));
        }

        /// <summary>
        /// Test whether blockGroupNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializeblockGroupNumber()
        {
            return !string.IsNullOrEmpty(blockGroupNumber);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBlock object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBlock object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBlock object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBlock obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBlock);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBlock obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBlock Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBlock)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBlock Deserialize(System.IO.Stream s)
        {
            return ((tBlock)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBlock object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBlock object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBlock object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBlock obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBlock);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBlock obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBlock LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eBlock : tBlock
    {

        private List<eBlockPartSequence> _blockPartSequence;

        private static XmlSerializer serializer;

        public eBlock()
        {
            this._blockPartSequence = new List<eBlockPartSequence>();
        }

        public List<eBlockPartSequence> blockPartSequence
        {
            get
            {
                return this._blockPartSequence;
            }
            set
            {
                this._blockPartSequence = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eBlock));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether blockPartSequence should be serialized
        /// </summary>
        public virtual bool ShouldSerializeblockPartSequence()
        {
            return blockPartSequence != null && blockPartSequence.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eBlock object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eBlock object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eBlock object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eBlock obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBlock);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eBlock obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eBlock Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eBlock)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eBlock Deserialize(System.IO.Stream s)
        {
            return ((eBlock)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eBlock object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eBlock object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eBlock object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eBlock obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBlock);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eBlock obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eBlock LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eBlockPartSequence : tBlockPartSequence
    {

        private List<tBlockPartRef> _blockPartRef;

        private static XmlSerializer serializer;

        public eBlockPartSequence()
        {
            this._blockPartRef = new List<tBlockPartRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("blockPartRef")]
        public List<tBlockPartRef> blockPartRef
        {
            get
            {
                return this._blockPartRef;
            }
            set
            {
                this._blockPartRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eBlockPartSequence));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether blockPartRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeblockPartRef()
        {
            return blockPartRef != null && blockPartRef.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eBlockPartSequence object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eBlockPartSequence object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eBlockPartSequence object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eBlockPartSequence obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBlockPartSequence);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eBlockPartSequence obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eBlockPartSequence Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eBlockPartSequence)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eBlockPartSequence Deserialize(System.IO.Stream s)
        {
            return ((eBlockPartSequence)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eBlockPartSequence object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eBlockPartSequence object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eBlockPartSequence object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eBlockPartSequence obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBlockPartSequence);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eBlockPartSequence obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eBlockPartSequence LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eBlockPartSequence))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBlockPartSequence : ParentContainer
    {

        private string _sequence;

        private string _dayOffset;

        private string _preProcessingTime;

        private string _postProcessingTime;

        private string _basicBlockRef;

        private static XmlSerializer serializer;

        public tBlockPartSequence()
        {
            this._dayOffset = "0";
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                this._sequence = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string dayOffset
        {
            get
            {
                return this._dayOffset;
            }
            set
            {
                this._dayOffset = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string preProcessingTime
        {
            get
            {
                return this._preProcessingTime;
            }
            set
            {
                this._preProcessingTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string postProcessingTime
        {
            get
            {
                return this._postProcessingTime;
            }
            set
            {
                this._postProcessingTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string basicBlockRef
        {
            get
            {
                return this._basicBlockRef;
            }
            set
            {
                this._basicBlockRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBlockPartSequence));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether sequence should be serialized
        /// </summary>
        public virtual bool ShouldSerializesequence()
        {
            return !string.IsNullOrEmpty(sequence);
        }

        /// <summary>
        /// Test whether dayOffset should be serialized
        /// </summary>
        public virtual bool ShouldSerializedayOffset()
        {
            return !string.IsNullOrEmpty(dayOffset);
        }

        /// <summary>
        /// Test whether preProcessingTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializepreProcessingTime()
        {
            return !string.IsNullOrEmpty(preProcessingTime);
        }

        /// <summary>
        /// Test whether postProcessingTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializepostProcessingTime()
        {
            return !string.IsNullOrEmpty(postProcessingTime);
        }

        /// <summary>
        /// Test whether basicBlockRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializebasicBlockRef()
        {
            return !string.IsNullOrEmpty(basicBlockRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBlockPartSequence object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBlockPartSequence object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBlockPartSequence object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBlockPartSequence obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBlockPartSequence);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBlockPartSequence obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tBlockPartSequence Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBlockPartSequence)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBlockPartSequence Deserialize(System.IO.Stream s)
        {
            return ((tBlockPartSequence)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBlockPartSequence object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBlockPartSequence object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBlockPartSequence object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBlockPartSequence obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBlockPartSequence);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBlockPartSequence obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tBlockPartSequence LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eRostering))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tRostering : tElementWithIDAndName
    {

        private string _vehicleRef;

        private string _formationRef;

        private string _depot;

        private string _defaultPreProcessingTime;

        private string _defaultPostProcessingTime;

        private string _scope;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string vehicleRef
        {
            get
            {
                return this._vehicleRef;
            }
            set
            {
                this._vehicleRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string formationRef
        {
            get
            {
                return this._formationRef;
            }
            set
            {
                this._formationRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string depot
        {
            get
            {
                return this._depot;
            }
            set
            {
                this._depot = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string defaultPreProcessingTime
        {
            get
            {
                return this._defaultPreProcessingTime;
            }
            set
            {
                this._defaultPreProcessingTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string defaultPostProcessingTime
        {
            get
            {
                return this._defaultPostProcessingTime;
            }
            set
            {
                this._defaultPostProcessingTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string scope
        {
            get
            {
                return this._scope;
            }
            set
            {
                this._scope = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tRostering));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether vehicleRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleRef()
        {
            return !string.IsNullOrEmpty(vehicleRef);
        }

        /// <summary>
        /// Test whether formationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeformationRef()
        {
            return !string.IsNullOrEmpty(formationRef);
        }

        /// <summary>
        /// Test whether depot should be serialized
        /// </summary>
        public virtual bool ShouldSerializedepot()
        {
            return !string.IsNullOrEmpty(depot);
        }

        /// <summary>
        /// Test whether defaultPreProcessingTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializedefaultPreProcessingTime()
        {
            return !string.IsNullOrEmpty(defaultPreProcessingTime);
        }

        /// <summary>
        /// Test whether defaultPostProcessingTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializedefaultPostProcessingTime()
        {
            return !string.IsNullOrEmpty(defaultPostProcessingTime);
        }

        /// <summary>
        /// Test whether scope should be serialized
        /// </summary>
        public virtual bool ShouldSerializescope()
        {
            return !string.IsNullOrEmpty(scope);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tRostering object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tRostering object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tRostering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tRostering obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRostering);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tRostering obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tRostering Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tRostering)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tRostering Deserialize(System.IO.Stream s)
        {
            return ((tRostering)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tRostering object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tRostering object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tRostering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tRostering obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRostering);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tRostering obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tRostering LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eRostering : tRostering
    {

        private eBlockParts _blockParts;

        private List<eBlock> _blocks;

        private List<tCirculation> _circulations;

        private static XmlSerializer serializer;

        public eRostering()
        {
            this._circulations = new List<tCirculation>();
            this._blocks = new List<eBlock>();
            this._blockParts = new eBlockParts();
        }

        public eBlockParts blockParts
        {
            get
            {
                return this._blockParts;
            }
            set
            {
                this._blockParts = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("block", IsNullable = false)]
        public List<eBlock> blocks
        {
            get
            {
                return this._blocks;
            }
            set
            {
                this._blocks = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("circulation", IsNullable = false)]
        public List<tCirculation> circulations
        {
            get
            {
                return this._circulations;
            }
            set
            {
                this._circulations = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eRostering));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether blocks should be serialized
        /// </summary>
        public virtual bool ShouldSerializeblocks()
        {
            return blocks != null && blocks.Count > 0;
        }

        /// <summary>
        /// Test whether circulations should be serialized
        /// </summary>
        public virtual bool ShouldSerializecirculations()
        {
            return circulations != null && circulations.Count > 0;
        }

        /// <summary>
        /// Test whether blockParts should be serialized
        /// </summary>
        public virtual bool ShouldSerializeblockParts()
        {
            return (_blockParts != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eRostering object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eRostering object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eRostering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eRostering obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eRostering);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eRostering obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eRostering Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eRostering)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eRostering Deserialize(System.IO.Stream s)
        {
            return ((eRostering)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eRostering object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eRostering object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eRostering object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eRostering obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eRostering);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eRostering obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eRostering LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCirculation : ParentContainer
    {

        private bool _shouldSerializeendDate;

        private bool _shouldSerializestartDate;

        private string _blockRef;

        private System.Nullable<System.DateTime> _startDate;

        private System.Nullable<System.DateTime> _endDate;

        private string _operatingPeriodRef;

        private string _repeatCount;

        private string _vehicleCounter;

        private string _vehicleGroupCounter;

        private string _nextBlockRef;

        private string _nextOperatingPeriodRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string blockRef
        {
            get
            {
                return this._blockRef;
            }
            set
            {
                this._blockRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime startDate
        {
            get
            {
                if (this._startDate.HasValue)
                {
                    return this._startDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._startDate = value;
                _shouldSerializestartDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified
        {
            get
            {
                return this._startDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._startDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime endDate
        {
            get
            {
                if (this._endDate.HasValue)
                {
                    return this._endDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._endDate = value;
                _shouldSerializeendDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endDateSpecified
        {
            get
            {
                return this._endDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._endDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string operatingPeriodRef
        {
            get
            {
                return this._operatingPeriodRef;
            }
            set
            {
                this._operatingPeriodRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string repeatCount
        {
            get
            {
                return this._repeatCount;
            }
            set
            {
                this._repeatCount = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string vehicleCounter
        {
            get
            {
                return this._vehicleCounter;
            }
            set
            {
                this._vehicleCounter = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string vehicleGroupCounter
        {
            get
            {
                return this._vehicleGroupCounter;
            }
            set
            {
                this._vehicleGroupCounter = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string nextBlockRef
        {
            get
            {
                return this._nextBlockRef;
            }
            set
            {
                this._nextBlockRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string nextOperatingPeriodRef
        {
            get
            {
                return this._nextOperatingPeriodRef;
            }
            set
            {
                this._nextOperatingPeriodRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCirculation));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether startDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializestartDate()
        {
            if (_shouldSerializestartDate)
            {
                return true;
            }
            return (_startDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether endDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendDate()
        {
            if (_shouldSerializeendDate)
            {
                return true;
            }
            return (_endDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether blockRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeblockRef()
        {
            return !string.IsNullOrEmpty(blockRef);
        }

        /// <summary>
        /// Test whether operatingPeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingPeriodRef()
        {
            return !string.IsNullOrEmpty(operatingPeriodRef);
        }

        /// <summary>
        /// Test whether repeatCount should be serialized
        /// </summary>
        public virtual bool ShouldSerializerepeatCount()
        {
            return !string.IsNullOrEmpty(repeatCount);
        }

        /// <summary>
        /// Test whether vehicleCounter should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleCounter()
        {
            return !string.IsNullOrEmpty(vehicleCounter);
        }

        /// <summary>
        /// Test whether vehicleGroupCounter should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleGroupCounter()
        {
            return !string.IsNullOrEmpty(vehicleGroupCounter);
        }

        /// <summary>
        /// Test whether nextBlockRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializenextBlockRef()
        {
            return !string.IsNullOrEmpty(nextBlockRef);
        }

        /// <summary>
        /// Test whether nextOperatingPeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializenextOperatingPeriodRef()
        {
            return !string.IsNullOrEmpty(nextOperatingPeriodRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCirculation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCirculation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCirculation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCirculation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCirculation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCirculation obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tCirculation Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCirculation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCirculation Deserialize(System.IO.Stream s)
        {
            return ((tCirculation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCirculation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCirculation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCirculation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCirculation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCirculation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCirculation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tCirculation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrainGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainGroup : tElementWithIDAndName
    {

        private string _type;

        private string _trainNumber;

        private string _processStatus;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainNumber
        {
            get
            {
                return this._trainNumber;
            }
            set
            {
                this._trainNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string processStatus
        {
            get
            {
                return this._processStatus;
            }
            set
            {
                this._processStatus = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainGroup));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether trainNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainNumber()
        {
            return !string.IsNullOrEmpty(trainNumber);
        }

        /// <summary>
        /// Test whether processStatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprocessStatus()
        {
            return !string.IsNullOrEmpty(processStatus);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainGroup Deserialize(System.IO.Stream s)
        {
            return ((tTrainGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrainGroup : tTrainGroup
    {

        private List<tElementRefInGroup> _trainRef;

        private static XmlSerializer serializer;

        public eTrainGroup()
        {
            this._trainRef = new List<tElementRefInGroup>();
        }

        public List<tElementRefInGroup> trainRef
        {
            get
            {
                return this._trainRef;
            }
            set
            {
                this._trainRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrainGroup));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainRef()
        {
            return trainRef != null && trainRef.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrainGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrainGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrainGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrainGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrainGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrainGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrainGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrainGroup Deserialize(System.IO.Stream s)
        {
            return ((eTrainGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrainGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrainGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrainGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrainGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrainGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrainGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrain))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrain : tElementWithIDAndName
    {

        private bool _shouldSerializescope;

        private bool _shouldSerializetype;

        private tTrainType _type;

        private string _trainNumber;

        private string _additionalTrainNumber;

        private System.Nullable<tTrainScope> _scope;

        private string _processStatus;

        private string _remarks;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTrainType type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
                _shouldSerializetype = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainNumber
        {
            get
            {
                return this._trainNumber;
            }
            set
            {
                this._trainNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string additionalTrainNumber
        {
            get
            {
                return this._additionalTrainNumber;
            }
            set
            {
                this._additionalTrainNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTrainScope scope
        {
            get
            {
                if (this._scope.HasValue)
                {
                    return this._scope.Value;
                }
                else
                {
                    return default(tTrainScope);
                }
            }
            set
            {
                this._scope = value;
                _shouldSerializescope = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool scopeSpecified
        {
            get
            {
                return this._scope.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._scope = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string processStatus
        {
            get
            {
                return this._processStatus;
            }
            set
            {
                this._processStatus = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                this._remarks = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrain));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            if (_shouldSerializetype)
            {
                return true;
            }
            return (_type != default(tTrainType));
        }

        /// <summary>
        /// Test whether scope should be serialized
        /// </summary>
        public virtual bool ShouldSerializescope()
        {
            if (_shouldSerializescope)
            {
                return true;
            }
            return (_scope != default(tTrainScope));
        }

        /// <summary>
        /// Test whether trainNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainNumber()
        {
            return !string.IsNullOrEmpty(trainNumber);
        }

        /// <summary>
        /// Test whether additionalTrainNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalTrainNumber()
        {
            return !string.IsNullOrEmpty(additionalTrainNumber);
        }

        /// <summary>
        /// Test whether processStatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprocessStatus()
        {
            return !string.IsNullOrEmpty(processStatus);
        }

        /// <summary>
        /// Test whether remarks should be serialized
        /// </summary>
        public virtual bool ShouldSerializeremarks()
        {
            return !string.IsNullOrEmpty(remarks);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrain object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrain object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrain object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrain obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrain);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrain obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrain Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrain)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrain Deserialize(System.IO.Stream s)
        {
            return ((tTrain)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrain object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrain object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrain object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrain obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrain);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrain obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrain LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tTrainType
    {

        /// <remarks/>
        operational,

        /// <remarks/>
        commercial,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tTrainScope
    {

        /// <remarks/>
        primary,

        /// <remarks/>
        secondary,

        /// <remarks/>
        secondaryStart,

        /// <remarks/>
        secondaryEnd,

        /// <remarks/>
        secondaryInner,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrain : tTrain
    {

        private List<eTrainPartSequence> _trainPartSequence;

        private static XmlSerializer serializer;

        public eTrain()
        {
            this._trainPartSequence = new List<eTrainPartSequence>();
        }

        public List<eTrainPartSequence> trainPartSequence
        {
            get
            {
                return this._trainPartSequence;
            }
            set
            {
                this._trainPartSequence = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrain));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainPartSequence should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainPartSequence()
        {
            return trainPartSequence != null && trainPartSequence.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrain object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrain object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrain object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrain obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrain);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrain obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrain Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrain)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrain Deserialize(System.IO.Stream s)
        {
            return ((eTrain)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrain object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrain object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrain object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrain obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrain);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrain obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrain LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrainPartSequence : tTrainPartSequence
    {

        private List<tTrainPartRef> _trainPartRef;

        private List<tSpeedProfileRef> _speedProfileRef;

        private List<eEquipment> _equipmentUsage;

        private eBrakeUsage _brakeUsage;

        private static XmlSerializer serializer;

        public eTrainPartSequence()
        {
            this._brakeUsage = new eBrakeUsage();
            this._equipmentUsage = new List<eEquipment>();
            this._speedProfileRef = new List<tSpeedProfileRef>();
            this._trainPartRef = new List<tTrainPartRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("trainPartRef")]
        public List<tTrainPartRef> trainPartRef
        {
            get
            {
                return this._trainPartRef;
            }
            set
            {
                this._trainPartRef = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("speedProfileRef")]
        public List<tSpeedProfileRef> speedProfileRef
        {
            get
            {
                return this._speedProfileRef;
            }
            set
            {
                this._speedProfileRef = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("equipment", IsNullable = false)]
        public List<eEquipment> equipmentUsage
        {
            get
            {
                return this._equipmentUsage;
            }
            set
            {
                this._equipmentUsage = value;
            }
        }

        public eBrakeUsage brakeUsage
        {
            get
            {
                return this._brakeUsage;
            }
            set
            {
                this._brakeUsage = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrainPartSequence));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainPartRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainPartRef()
        {
            return trainPartRef != null && trainPartRef.Count > 0;
        }

        /// <summary>
        /// Test whether speedProfileRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeedProfileRef()
        {
            return speedProfileRef != null && speedProfileRef.Count > 0;
        }

        /// <summary>
        /// Test whether equipmentUsage should be serialized
        /// </summary>
        public virtual bool ShouldSerializeequipmentUsage()
        {
            return equipmentUsage != null && equipmentUsage.Count > 0;
        }

        /// <summary>
        /// Test whether brakeUsage should be serialized
        /// </summary>
        public virtual bool ShouldSerializebrakeUsage()
        {
            return (_brakeUsage != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrainPartSequence object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrainPartSequence object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrainPartSequence object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrainPartSequence obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainPartSequence);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrainPartSequence obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrainPartSequence Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrainPartSequence)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrainPartSequence Deserialize(System.IO.Stream s)
        {
            return ((eTrainPartSequence)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrainPartSequence object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrainPartSequence object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrainPartSequence object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrainPartSequence obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainPartSequence);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrainPartSequence obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrainPartSequence LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eEquipment : tEquipment
    {

        private tEtcsTT _etcs;

        private static XmlSerializer serializer;

        public eEquipment()
        {
            this._etcs = new tEtcsTT();
        }

        public tEtcsTT etcs
        {
            get
            {
                return this._etcs;
            }
            set
            {
                this._etcs = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eEquipment));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether etcs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeetcs()
        {
            return (_etcs != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eEquipment object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eEquipment object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eEquipment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eEquipment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eEquipment);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eEquipment obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eEquipment Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eEquipment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eEquipment Deserialize(System.IO.Stream s)
        {
            return ((eEquipment)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eEquipment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eEquipment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eEquipment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eEquipment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eEquipment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eEquipment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eEquipment LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tEtcsTT : ParentContainer
    {

        private bool _shouldSerializelevel_3;

        private bool _shouldSerializelevel_2;

        private bool _shouldSerializelevel_1;

        private bool _shouldSerializelevel_0;

        private string _srsVersion;

        private System.Nullable<bool> _level_0;

        private System.Nullable<bool> _level_1;

        private System.Nullable<bool> _level_2;

        private System.Nullable<bool> _level_3;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string srsVersion
        {
            get
            {
                return this._srsVersion;
            }
            set
            {
                this._srsVersion = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_0
        {
            get
            {
                if (this._level_0.HasValue)
                {
                    return this._level_0.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_0 = value;
                _shouldSerializelevel_0 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_0Specified
        {
            get
            {
                return this._level_0.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_0 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_1
        {
            get
            {
                if (this._level_1.HasValue)
                {
                    return this._level_1.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_1 = value;
                _shouldSerializelevel_1 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_1Specified
        {
            get
            {
                return this._level_1.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_1 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_2
        {
            get
            {
                if (this._level_2.HasValue)
                {
                    return this._level_2.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_2 = value;
                _shouldSerializelevel_2 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_2Specified
        {
            get
            {
                return this._level_2.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_2 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_3
        {
            get
            {
                if (this._level_3.HasValue)
                {
                    return this._level_3.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_3 = value;
                _shouldSerializelevel_3 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_3Specified
        {
            get
            {
                return this._level_3.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_3 = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tEtcsTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether level_0 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_0()
        {
            if (_shouldSerializelevel_0)
            {
                return true;
            }
            return (_level_0 != default(bool));
        }

        /// <summary>
        /// Test whether level_1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_1()
        {
            if (_shouldSerializelevel_1)
            {
                return true;
            }
            return (_level_1 != default(bool));
        }

        /// <summary>
        /// Test whether level_2 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_2()
        {
            if (_shouldSerializelevel_2)
            {
                return true;
            }
            return (_level_2 != default(bool));
        }

        /// <summary>
        /// Test whether level_3 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_3()
        {
            if (_shouldSerializelevel_3)
            {
                return true;
            }
            return (_level_3 != default(bool));
        }

        /// <summary>
        /// Test whether srsVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializesrsVersion()
        {
            return !string.IsNullOrEmpty(srsVersion);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tEtcsTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tEtcsTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tEtcsTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tEtcsTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEtcsTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tEtcsTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tEtcsTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tEtcsTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tEtcsTT Deserialize(System.IO.Stream s)
        {
            return ((tEtcsTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tEtcsTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tEtcsTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tEtcsTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tEtcsTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEtcsTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tEtcsTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tEtcsTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eEquipment))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tEquipment : ParentContainer
    {

        private bool _shouldSerializeuses;

        private string _type;

        private System.Nullable<bool> _uses;

        private string _description;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool uses
        {
            get
            {
                if (this._uses.HasValue)
                {
                    return this._uses.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._uses = value;
                _shouldSerializeuses = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool usesSpecified
        {
            get
            {
                return this._uses.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._uses = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tEquipment));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether uses should be serialized
        /// </summary>
        public virtual bool ShouldSerializeuses()
        {
            if (_shouldSerializeuses)
            {
                return true;
            }
            return (_uses != default(bool));
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tEquipment object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tEquipment object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tEquipment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tEquipment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEquipment);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tEquipment obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tEquipment Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tEquipment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tEquipment Deserialize(System.IO.Stream s)
        {
            return ((tEquipment)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tEquipment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tEquipment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tEquipment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tEquipment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEquipment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tEquipment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tEquipment LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eBrakeUsage : tBasicBrakeType
    {

        private string _brakePercentage;

        private string _regularBrakePercentage;

        private string _emergencyBrakePercentage;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string brakePercentage
        {
            get
            {
                return this._brakePercentage;
            }
            set
            {
                this._brakePercentage = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string regularBrakePercentage
        {
            get
            {
                return this._regularBrakePercentage;
            }
            set
            {
                this._regularBrakePercentage = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string emergencyBrakePercentage
        {
            get
            {
                return this._emergencyBrakePercentage;
            }
            set
            {
                this._emergencyBrakePercentage = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eBrakeUsage));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether brakePercentage should be serialized
        /// </summary>
        public virtual bool ShouldSerializebrakePercentage()
        {
            return !string.IsNullOrEmpty(brakePercentage);
        }

        /// <summary>
        /// Test whether regularBrakePercentage should be serialized
        /// </summary>
        public virtual bool ShouldSerializeregularBrakePercentage()
        {
            return !string.IsNullOrEmpty(regularBrakePercentage);
        }

        /// <summary>
        /// Test whether emergencyBrakePercentage should be serialized
        /// </summary>
        public virtual bool ShouldSerializeemergencyBrakePercentage()
        {
            return !string.IsNullOrEmpty(emergencyBrakePercentage);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eBrakeUsage object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eBrakeUsage object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eBrakeUsage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eBrakeUsage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBrakeUsage);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eBrakeUsage obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eBrakeUsage Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eBrakeUsage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eBrakeUsage Deserialize(System.IO.Stream s)
        {
            return ((eBrakeUsage)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eBrakeUsage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eBrakeUsage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eBrakeUsage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eBrakeUsage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBrakeUsage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eBrakeUsage obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eBrakeUsage LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eBrakeUsage))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eVehicleBrake))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBasicBrakeType : ParentContainer
    {

        private bool _shouldSerializemeanDeceleration;

        private bool _shouldSerializemaxDeceleration;

        private bool _shouldSerializeemergencyBrakeMass;

        private bool _shouldSerializeregularBrakeMass;

        private List<tBasicBrakeTypeAuxiliaryBrakes> _auxiliaryBrakes;

        private System.Nullable<decimal> _regularBrakeMass;

        private System.Nullable<decimal> _emergencyBrakeMass;

        private System.Nullable<decimal> _maxDeceleration;

        private System.Nullable<decimal> _meanDeceleration;

        private static XmlSerializer serializer;

        public tBasicBrakeType()
        {
            this._auxiliaryBrakes = new List<tBasicBrakeTypeAuxiliaryBrakes>();
        }

        [System.Xml.Serialization.XmlElementAttribute("auxiliaryBrakes")]
        public List<tBasicBrakeTypeAuxiliaryBrakes> auxiliaryBrakes
        {
            get
            {
                return this._auxiliaryBrakes;
            }
            set
            {
                this._auxiliaryBrakes = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal regularBrakeMass
        {
            get
            {
                if (this._regularBrakeMass.HasValue)
                {
                    return this._regularBrakeMass.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._regularBrakeMass = value;
                _shouldSerializeregularBrakeMass = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool regularBrakeMassSpecified
        {
            get
            {
                return this._regularBrakeMass.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._regularBrakeMass = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal emergencyBrakeMass
        {
            get
            {
                if (this._emergencyBrakeMass.HasValue)
                {
                    return this._emergencyBrakeMass.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._emergencyBrakeMass = value;
                _shouldSerializeemergencyBrakeMass = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool emergencyBrakeMassSpecified
        {
            get
            {
                return this._emergencyBrakeMass.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._emergencyBrakeMass = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxDeceleration
        {
            get
            {
                if (this._maxDeceleration.HasValue)
                {
                    return this._maxDeceleration.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxDeceleration = value;
                _shouldSerializemaxDeceleration = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxDecelerationSpecified
        {
            get
            {
                return this._maxDeceleration.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxDeceleration = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanDeceleration
        {
            get
            {
                if (this._meanDeceleration.HasValue)
                {
                    return this._meanDeceleration.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanDeceleration = value;
                _shouldSerializemeanDeceleration = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanDecelerationSpecified
        {
            get
            {
                return this._meanDeceleration.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanDeceleration = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBasicBrakeType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether auxiliaryBrakes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeauxiliaryBrakes()
        {
            return auxiliaryBrakes != null && auxiliaryBrakes.Count > 0;
        }

        /// <summary>
        /// Test whether regularBrakeMass should be serialized
        /// </summary>
        public virtual bool ShouldSerializeregularBrakeMass()
        {
            if (_shouldSerializeregularBrakeMass)
            {
                return true;
            }
            return (_regularBrakeMass != default(decimal));
        }

        /// <summary>
        /// Test whether emergencyBrakeMass should be serialized
        /// </summary>
        public virtual bool ShouldSerializeemergencyBrakeMass()
        {
            if (_shouldSerializeemergencyBrakeMass)
            {
                return true;
            }
            return (_emergencyBrakeMass != default(decimal));
        }

        /// <summary>
        /// Test whether maxDeceleration should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxDeceleration()
        {
            if (_shouldSerializemaxDeceleration)
            {
                return true;
            }
            return (_maxDeceleration != default(decimal));
        }

        /// <summary>
        /// Test whether meanDeceleration should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanDeceleration()
        {
            if (_shouldSerializemeanDeceleration)
            {
                return true;
            }
            return (_meanDeceleration != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBasicBrakeType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBasicBrakeType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBasicBrakeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBasicBrakeType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBasicBrakeType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBasicBrakeType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tBasicBrakeType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBasicBrakeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBasicBrakeType Deserialize(System.IO.Stream s)
        {
            return ((tBasicBrakeType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBasicBrakeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBasicBrakeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBasicBrakeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBasicBrakeType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBasicBrakeType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBasicBrakeType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tBasicBrakeType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBasicBrakeTypeAuxiliaryBrakes : ParentContainer
    {

        private bool _shouldSerializeep;

        private bool _shouldSerializeWb;

        private bool _shouldSerializeMg;

        private bool _shouldSerializeE;

        private bool _shouldSerializeH;

        private bool _shouldSerializebrakeUse;

        private System.Nullable<tBrakeUse> _brakeUse;

        private System.Nullable<bool> _h;

        private System.Nullable<bool> _e;

        private System.Nullable<bool> _mg;

        private System.Nullable<bool> _wb;

        private System.Nullable<bool> _ep;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tBrakeUse brakeUse
        {
            get
            {
                if (this._brakeUse.HasValue)
                {
                    return this._brakeUse.Value;
                }
                else
                {
                    return default(tBrakeUse);
                }
            }
            set
            {
                this._brakeUse = value;
                _shouldSerializebrakeUse = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool brakeUseSpecified
        {
            get
            {
                return this._brakeUse.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._brakeUse = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool H
        {
            get
            {
                if (this._h.HasValue)
                {
                    return this._h.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._h = value;
                _shouldSerializeH = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HSpecified
        {
            get
            {
                return this._h.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._h = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool E
        {
            get
            {
                if (this._e.HasValue)
                {
                    return this._e.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._e = value;
                _shouldSerializeE = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ESpecified
        {
            get
            {
                return this._e.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._e = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Mg
        {
            get
            {
                if (this._mg.HasValue)
                {
                    return this._mg.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._mg = value;
                _shouldSerializeMg = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MgSpecified
        {
            get
            {
                return this._mg.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._mg = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Wb
        {
            get
            {
                if (this._wb.HasValue)
                {
                    return this._wb.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._wb = value;
                _shouldSerializeWb = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool WbSpecified
        {
            get
            {
                return this._wb.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._wb = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ep
        {
            get
            {
                if (this._ep.HasValue)
                {
                    return this._ep.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._ep = value;
                _shouldSerializeep = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool epSpecified
        {
            get
            {
                return this._ep.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._ep = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBasicBrakeTypeAuxiliaryBrakes));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether brakeUse should be serialized
        /// </summary>
        public virtual bool ShouldSerializebrakeUse()
        {
            if (_shouldSerializebrakeUse)
            {
                return true;
            }
            return (_brakeUse != default(tBrakeUse));
        }

        /// <summary>
        /// Test whether H should be serialized
        /// </summary>
        public virtual bool ShouldSerializeH()
        {
            if (_shouldSerializeH)
            {
                return true;
            }
            return (_h != default(bool));
        }

        /// <summary>
        /// Test whether E should be serialized
        /// </summary>
        public virtual bool ShouldSerializeE()
        {
            if (_shouldSerializeE)
            {
                return true;
            }
            return (_e != default(bool));
        }

        /// <summary>
        /// Test whether Mg should be serialized
        /// </summary>
        public virtual bool ShouldSerializeMg()
        {
            if (_shouldSerializeMg)
            {
                return true;
            }
            return (_mg != default(bool));
        }

        /// <summary>
        /// Test whether Wb should be serialized
        /// </summary>
        public virtual bool ShouldSerializeWb()
        {
            if (_shouldSerializeWb)
            {
                return true;
            }
            return (_wb != default(bool));
        }

        /// <summary>
        /// Test whether ep should be serialized
        /// </summary>
        public virtual bool ShouldSerializeep()
        {
            if (_shouldSerializeep)
            {
                return true;
            }
            return (_ep != default(bool));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBasicBrakeTypeAuxiliaryBrakes object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBasicBrakeTypeAuxiliaryBrakes object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBasicBrakeTypeAuxiliaryBrakes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBasicBrakeTypeAuxiliaryBrakes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBasicBrakeTypeAuxiliaryBrakes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBasicBrakeTypeAuxiliaryBrakes obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tBasicBrakeTypeAuxiliaryBrakes Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBasicBrakeTypeAuxiliaryBrakes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBasicBrakeTypeAuxiliaryBrakes Deserialize(System.IO.Stream s)
        {
            return ((tBasicBrakeTypeAuxiliaryBrakes)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBasicBrakeTypeAuxiliaryBrakes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBasicBrakeTypeAuxiliaryBrakes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBasicBrakeTypeAuxiliaryBrakes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBasicBrakeTypeAuxiliaryBrakes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBasicBrakeTypeAuxiliaryBrakes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBasicBrakeTypeAuxiliaryBrakes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tBasicBrakeTypeAuxiliaryBrakes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tBrakeUse
    {

        /// <remarks/>
        unknown,

        /// <remarks/>
        normal,

        /// <remarks/>
        emergency,

        /// <remarks/>
        both,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eVehicleBrake : tBasicBrakeType
    {

        private bool _shouldSerializemaxAutoBrakeMass;

        private bool _shouldSerializeloadSwitch;

        private System.Nullable<tLoadSwitch> _loadSwitch;

        private string _autoBrakePercentage;

        private System.Nullable<decimal> _maxAutoBrakeMass;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tLoadSwitch loadSwitch
        {
            get
            {
                if (this._loadSwitch.HasValue)
                {
                    return this._loadSwitch.Value;
                }
                else
                {
                    return default(tLoadSwitch);
                }
            }
            set
            {
                this._loadSwitch = value;
                _shouldSerializeloadSwitch = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadSwitchSpecified
        {
            get
            {
                return this._loadSwitch.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._loadSwitch = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string autoBrakePercentage
        {
            get
            {
                return this._autoBrakePercentage;
            }
            set
            {
                this._autoBrakePercentage = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxAutoBrakeMass
        {
            get
            {
                if (this._maxAutoBrakeMass.HasValue)
                {
                    return this._maxAutoBrakeMass.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxAutoBrakeMass = value;
                _shouldSerializemaxAutoBrakeMass = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxAutoBrakeMassSpecified
        {
            get
            {
                return this._maxAutoBrakeMass.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxAutoBrakeMass = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eVehicleBrake));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether loadSwitch should be serialized
        /// </summary>
        public virtual bool ShouldSerializeloadSwitch()
        {
            if (_shouldSerializeloadSwitch)
            {
                return true;
            }
            return (_loadSwitch != default(tLoadSwitch));
        }

        /// <summary>
        /// Test whether maxAutoBrakeMass should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxAutoBrakeMass()
        {
            if (_shouldSerializemaxAutoBrakeMass)
            {
                return true;
            }
            return (_maxAutoBrakeMass != default(decimal));
        }

        /// <summary>
        /// Test whether autoBrakePercentage should be serialized
        /// </summary>
        public virtual bool ShouldSerializeautoBrakePercentage()
        {
            return !string.IsNullOrEmpty(autoBrakePercentage);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eVehicleBrake object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eVehicleBrake object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eVehicleBrake object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eVehicleBrake obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eVehicleBrake);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eVehicleBrake obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eVehicleBrake Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eVehicleBrake)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eVehicleBrake Deserialize(System.IO.Stream s)
        {
            return ((eVehicleBrake)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eVehicleBrake object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eVehicleBrake object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eVehicleBrake object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eVehicleBrake obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eVehicleBrake);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eVehicleBrake obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eVehicleBrake LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tLoadSwitch
    {

        /// <remarks/>
        empty,

        /// <remarks/>
        full,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrainPartSequence))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainPartSequence : ParentContainer
    {

        private string _sequence;

        private string _pathStatus;

        private string _categoryRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                this._sequence = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string pathStatus
        {
            get
            {
                return this._pathStatus;
            }
            set
            {
                this._pathStatus = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string categoryRef
        {
            get
            {
                return this._categoryRef;
            }
            set
            {
                this._categoryRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainPartSequence));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether sequence should be serialized
        /// </summary>
        public virtual bool ShouldSerializesequence()
        {
            return !string.IsNullOrEmpty(sequence);
        }

        /// <summary>
        /// Test whether pathStatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializepathStatus()
        {
            return !string.IsNullOrEmpty(pathStatus);
        }

        /// <summary>
        /// Test whether categoryRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecategoryRef()
        {
            return !string.IsNullOrEmpty(categoryRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainPartSequence object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainPartSequence object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainPartSequence object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainPartSequence obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainPartSequence);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainPartSequence obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTrainPartSequence Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainPartSequence)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainPartSequence Deserialize(System.IO.Stream s)
        {
            return ((tTrainPartSequence)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainPartSequence object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainPartSequence object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainPartSequence object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainPartSequence obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainPartSequence);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainPartSequence obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTrainPartSequence LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrainPart))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainPart : tElementWithIDAndName
    {

        private string _line;

        private string _trainLine;

        private string _trainNumber;

        private string _additionalTrainNumber;

        private string _processStatus;

        private string _debitcode;

        private string _remarks;

        private string _timetablePeriodRef;

        private string _categoryRef;

        private string _operator;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string line
        {
            get
            {
                return this._line;
            }
            set
            {
                this._line = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainLine
        {
            get
            {
                return this._trainLine;
            }
            set
            {
                this._trainLine = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainNumber
        {
            get
            {
                return this._trainNumber;
            }
            set
            {
                this._trainNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string additionalTrainNumber
        {
            get
            {
                return this._additionalTrainNumber;
            }
            set
            {
                this._additionalTrainNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string processStatus
        {
            get
            {
                return this._processStatus;
            }
            set
            {
                this._processStatus = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string debitcode
        {
            get
            {
                return this._debitcode;
            }
            set
            {
                this._debitcode = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                this._remarks = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string timetablePeriodRef
        {
            get
            {
                return this._timetablePeriodRef;
            }
            set
            {
                this._timetablePeriodRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string categoryRef
        {
            get
            {
                return this._categoryRef;
            }
            set
            {
                this._categoryRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string @operator
        {
            get
            {
                return this._operator;
            }
            set
            {
                this._operator = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainPart));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether line should be serialized
        /// </summary>
        public virtual bool ShouldSerializeline()
        {
            return !string.IsNullOrEmpty(line);
        }

        /// <summary>
        /// Test whether trainLine should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainLine()
        {
            return !string.IsNullOrEmpty(trainLine);
        }

        /// <summary>
        /// Test whether trainNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainNumber()
        {
            return !string.IsNullOrEmpty(trainNumber);
        }

        /// <summary>
        /// Test whether additionalTrainNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalTrainNumber()
        {
            return !string.IsNullOrEmpty(additionalTrainNumber);
        }

        /// <summary>
        /// Test whether processStatus should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprocessStatus()
        {
            return !string.IsNullOrEmpty(processStatus);
        }

        /// <summary>
        /// Test whether debitcode should be serialized
        /// </summary>
        public virtual bool ShouldSerializedebitcode()
        {
            return !string.IsNullOrEmpty(debitcode);
        }

        /// <summary>
        /// Test whether remarks should be serialized
        /// </summary>
        public virtual bool ShouldSerializeremarks()
        {
            return !string.IsNullOrEmpty(remarks);
        }

        /// <summary>
        /// Test whether timetablePeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimetablePeriodRef()
        {
            return !string.IsNullOrEmpty(timetablePeriodRef);
        }

        /// <summary>
        /// Test whether categoryRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecategoryRef()
        {
            return !string.IsNullOrEmpty(categoryRef);
        }

        /// <summary>
        /// Test whether operator should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperator()
        {
            return !string.IsNullOrEmpty(@operator);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainPart object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainPart object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainPart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainPart obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainPart Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainPart)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainPart Deserialize(System.IO.Stream s)
        {
            return ((tTrainPart)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainPart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainPart object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainPart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainPart obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainPart LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrainPart : tTrainPart
    {

        private eFormationTT _formationTT;

        private eOperatingPeriodRef _operatingPeriodRef;

        private List<eOcpTT> _ocpsTT;

        private eOrganizationalUnitBinding _organizationalUnitBinding;

        private List<tAnnotationRef> _annotationRef;

        private List<System.Xml.XmlElement> _any1;

        private static XmlSerializer serializer;

        public eTrainPart()
        {
            this._any1 = new List<System.Xml.XmlElement>();
            this._annotationRef = new List<tAnnotationRef>();
            this._organizationalUnitBinding = new eOrganizationalUnitBinding();
            this._ocpsTT = new List<eOcpTT>();
            this._operatingPeriodRef = new eOperatingPeriodRef();
            this._formationTT = new eFormationTT();
        }

        public eFormationTT formationTT
        {
            get
            {
                return this._formationTT;
            }
            set
            {
                this._formationTT = value;
            }
        }


        public eOperatingPeriodRef operatingPeriodRef
        {
            get
            {
                return this._operatingPeriodRef;
            }
            set
            {
                this._operatingPeriodRef = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("ocpTT", IsNullable = false)]
        public List<eOcpTT> ocpsTT
        {
            get
            {
                return this._ocpsTT;
            }
            set
            {
                this._ocpsTT = value;
            }
        }

        public eOrganizationalUnitBinding organizationalUnitBinding
        {
            get
            {
                return this._organizationalUnitBinding;
            }
            set
            {
                this._organizationalUnitBinding = value;
            }
        }

        public List<tAnnotationRef> annotationRef
        {
            get
            {
                return this._annotationRef;
            }
            set
            {
                this._annotationRef = value;
            }
        }

        public List<System.Xml.XmlElement> Any1
        {
            get
            {
                return this._any1;
            }
            set
            {
                this._any1 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrainPart));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ocpsTT should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpsTT()
        {
            return ocpsTT != null && ocpsTT.Count > 0;
        }

        /// <summary>
        /// Test whether annotationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeannotationRef()
        {
            return annotationRef != null && annotationRef.Count > 0;
        }

        /// <summary>
        /// Test whether Any1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny1()
        {
            return Any1 != null && Any1.Count > 0;
        }

        /// <summary>
        /// Test whether formationTT should be serialized
        /// </summary>
        public virtual bool ShouldSerializeformationTT()
        {
            return (_formationTT != null);
        }

        /// <summary>
        /// Test whether operatingPeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingPeriodRef()
        {
            return (_operatingPeriodRef != null);
        }

        /// <summary>
        /// Test whether organizationalUnitBinding should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorganizationalUnitBinding()
        {
            return (_organizationalUnitBinding != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrainPart object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrainPart object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrainPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrainPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainPart);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrainPart obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrainPart Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrainPart)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrainPart Deserialize(System.IO.Stream s)
        {
            return ((eTrainPart)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrainPart object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrainPart object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrainPart object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrainPart obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainPart);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrainPart obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrainPart LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eFormationTT : tFormationTT
    {

        private List<eEquipment> _equipmentUsage;

        private ePassengerFacilityTT _passengerUsage;

        private List<tBooking> _reservationInfo;

        private static XmlSerializer serializer;

        public eFormationTT()
        {
            this._reservationInfo = new List<tBooking>();
            this._passengerUsage = new ePassengerFacilityTT();
            this._equipmentUsage = new List<eEquipment>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("equipment", IsNullable = false)]
        public List<eEquipment> equipmentUsage
        {
            get
            {
                return this._equipmentUsage;
            }
            set
            {
                this._equipmentUsage = value;
            }
        }

        public ePassengerFacilityTT passengerUsage
        {
            get
            {
                return this._passengerUsage;
            }
            set
            {
                this._passengerUsage = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("booking", IsNullable = false)]
        public List<tBooking> reservationInfo
        {
            get
            {
                return this._reservationInfo;
            }
            set
            {
                this._reservationInfo = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eFormationTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether equipmentUsage should be serialized
        /// </summary>
        public virtual bool ShouldSerializeequipmentUsage()
        {
            return equipmentUsage != null && equipmentUsage.Count > 0;
        }

        /// <summary>
        /// Test whether reservationInfo should be serialized
        /// </summary>
        public virtual bool ShouldSerializereservationInfo()
        {
            return reservationInfo != null && reservationInfo.Count > 0;
        }

        /// <summary>
        /// Test whether passengerUsage should be serialized
        /// </summary>
        public virtual bool ShouldSerializepassengerUsage()
        {
            return (_passengerUsage != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eFormationTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eFormationTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eFormationTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eFormationTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eFormationTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eFormationTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eFormationTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eFormationTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eFormationTT Deserialize(System.IO.Stream s)
        {
            return ((eFormationTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eFormationTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eFormationTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eFormationTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eFormationTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eFormationTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eFormationTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eFormationTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class ePassengerFacilityTT : ParentContainer
    {

        private List<tPlacesTT> _places;

        private List<tService> _service;

        private static XmlSerializer serializer;

        public ePassengerFacilityTT()
        {
            this._service = new List<tService>();
            this._places = new List<tPlacesTT>();
        }

        [System.Xml.Serialization.XmlElementAttribute("places")]
        public List<tPlacesTT> places
        {
            get
            {
                return this._places;
            }
            set
            {
                this._places = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("service")]
        public List<tService> service
        {
            get
            {
                return this._service;
            }
            set
            {
                this._service = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ePassengerFacilityTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether places should be serialized
        /// </summary>
        public virtual bool ShouldSerializeplaces()
        {
            return places != null && places.Count > 0;
        }

        /// <summary>
        /// Test whether service should be serialized
        /// </summary>
        public virtual bool ShouldSerializeservice()
        {
            return service != null && service.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ePassengerFacilityTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ePassengerFacilityTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ePassengerFacilityTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ePassengerFacilityTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePassengerFacilityTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ePassengerFacilityTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ePassengerFacilityTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ePassengerFacilityTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ePassengerFacilityTT Deserialize(System.IO.Stream s)
        {
            return ((ePassengerFacilityTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ePassengerFacilityTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ePassengerFacilityTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ePassengerFacilityTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ePassengerFacilityTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePassengerFacilityTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ePassengerFacilityTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ePassengerFacilityTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPlacesTT : ParentContainer
    {

        private string _category;

        private string _count;

        private string _description;

        private string _reservation;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string category
        {
            get
            {
                return this._category;
            }
            set
            {
                this._category = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string reservation
        {
            get
            {
                return this._reservation;
            }
            set
            {
                this._reservation = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPlacesTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether category should be serialized
        /// </summary>
        public virtual bool ShouldSerializecategory()
        {
            return !string.IsNullOrEmpty(category);
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        /// <summary>
        /// Test whether reservation should be serialized
        /// </summary>
        public virtual bool ShouldSerializereservation()
        {
            return !string.IsNullOrEmpty(reservation);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPlacesTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPlacesTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPlacesTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPlacesTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlacesTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPlacesTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tPlacesTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPlacesTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPlacesTT Deserialize(System.IO.Stream s)
        {
            return ((tPlacesTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPlacesTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPlacesTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPlacesTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPlacesTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlacesTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPlacesTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tPlacesTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tService : ParentContainer
    {

        private bool _shouldSerializevalue;

        private string _name;

        private string _count;

        private string _description;

        private System.Nullable<decimal> _value;

        private string _type;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal value
        {
            get
            {
                if (this._value.HasValue)
                {
                    return this._value.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._value = value;
                _shouldSerializevalue = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool valueSpecified
        {
            get
            {
                return this._value.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._value = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tService));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            if (_shouldSerializevalue)
            {
                return true;
            }
            return (_value != default(decimal));
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tService object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tService object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tService object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tService obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tService);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tService obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tService Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tService)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tService Deserialize(System.IO.Stream s)
        {
            return ((tService)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tService object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tService object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tService object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tService obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tService);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tService obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tService LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBooking : ParentContainer
    {

        private string _bookingNumber;

        private string _posInFormation;

        private string _vehicleRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bookingNumber
        {
            get
            {
                return this._bookingNumber;
            }
            set
            {
                this._bookingNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string posInFormation
        {
            get
            {
                return this._posInFormation;
            }
            set
            {
                this._posInFormation = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string vehicleRef
        {
            get
            {
                return this._vehicleRef;
            }
            set
            {
                this._vehicleRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBooking));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether bookingNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializebookingNumber()
        {
            return !string.IsNullOrEmpty(bookingNumber);
        }

        /// <summary>
        /// Test whether posInFormation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeposInFormation()
        {
            return !string.IsNullOrEmpty(posInFormation);
        }

        /// <summary>
        /// Test whether vehicleRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleRef()
        {
            return !string.IsNullOrEmpty(vehicleRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBooking object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBooking object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBooking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBooking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBooking);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBooking obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tBooking Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBooking)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBooking Deserialize(System.IO.Stream s)
        {
            return ((tBooking)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBooking object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBooking object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBooking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBooking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBooking);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBooking obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tBooking LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eFormationTT))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tFormationTT : ParentContainer
    {

        private bool _shouldSerializeorientationReversed;

        private bool _shouldSerializetimetableLoad;

        private bool _shouldSerializespeed;

        private bool _shouldSerializelength;

        private bool _shouldSerializeload;

        private bool _shouldSerializeweight;

        private string _formationRef;

        private System.Nullable<decimal> _weight;

        private System.Nullable<decimal> _load;

        private System.Nullable<decimal> _length;

        private System.Nullable<decimal> _speed;

        private System.Nullable<decimal> _timetableLoad;

        private System.Nullable<bool> _orientationReversed;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string formationRef
        {
            get
            {
                return this._formationRef;
            }
            set
            {
                this._formationRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal weight
        {
            get
            {
                if (this._weight.HasValue)
                {
                    return this._weight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._weight = value;
                _shouldSerializeweight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool weightSpecified
        {
            get
            {
                return this._weight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._weight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal load
        {
            get
            {
                if (this._load.HasValue)
                {
                    return this._load.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._load = value;
                _shouldSerializeload = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadSpecified
        {
            get
            {
                return this._load.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._load = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal length
        {
            get
            {
                if (this._length.HasValue)
                {
                    return this._length.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._length = value;
                _shouldSerializelength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthSpecified
        {
            get
            {
                return this._length.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._length = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal speed
        {
            get
            {
                if (this._speed.HasValue)
                {
                    return this._speed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._speed = value;
                _shouldSerializespeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool speedSpecified
        {
            get
            {
                return this._speed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._speed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal timetableLoad
        {
            get
            {
                if (this._timetableLoad.HasValue)
                {
                    return this._timetableLoad.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._timetableLoad = value;
                _shouldSerializetimetableLoad = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool timetableLoadSpecified
        {
            get
            {
                return this._timetableLoad.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._timetableLoad = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool orientationReversed
        {
            get
            {
                if (this._orientationReversed.HasValue)
                {
                    return this._orientationReversed.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._orientationReversed = value;
                _shouldSerializeorientationReversed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool orientationReversedSpecified
        {
            get
            {
                return this._orientationReversed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._orientationReversed = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tFormationTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether weight should be serialized
        /// </summary>
        public virtual bool ShouldSerializeweight()
        {
            if (_shouldSerializeweight)
            {
                return true;
            }
            return (_weight != default(decimal));
        }

        /// <summary>
        /// Test whether load should be serialized
        /// </summary>
        public virtual bool ShouldSerializeload()
        {
            if (_shouldSerializeload)
            {
                return true;
            }
            return (_load != default(decimal));
        }

        /// <summary>
        /// Test whether length should be serialized
        /// </summary>
        public virtual bool ShouldSerializelength()
        {
            if (_shouldSerializelength)
            {
                return true;
            }
            return (_length != default(decimal));
        }

        /// <summary>
        /// Test whether speed should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeed()
        {
            if (_shouldSerializespeed)
            {
                return true;
            }
            return (_speed != default(decimal));
        }

        /// <summary>
        /// Test whether timetableLoad should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimetableLoad()
        {
            if (_shouldSerializetimetableLoad)
            {
                return true;
            }
            return (_timetableLoad != default(decimal));
        }

        /// <summary>
        /// Test whether orientationReversed should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorientationReversed()
        {
            if (_shouldSerializeorientationReversed)
            {
                return true;
            }
            return (_orientationReversed != default(bool));
        }

        /// <summary>
        /// Test whether formationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeformationRef()
        {
            return !string.IsNullOrEmpty(formationRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tFormationTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tFormationTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tFormationTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tFormationTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tFormationTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tFormationTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tFormationTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tFormationTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tFormationTT Deserialize(System.IO.Stream s)
        {
            return ((tFormationTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tFormationTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tFormationTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tFormationTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tFormationTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tFormationTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tFormationTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tFormationTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOcpTT : tOcpTT
    {

        private List<eArrivalDepartureTimes> _times;

        private List<eConnectionTT> _connections;

        private List<eStatistic> _statistics;

        private eSectionTT _sectionTT;

        private eStopDescription _stopDescription;

        private List<System.Xml.XmlElement> _any;

        private static XmlSerializer serializer;

        public eOcpTT()
        {
            this._any = new List<System.Xml.XmlElement>();
            this._stopDescription = new eStopDescription();
            this._sectionTT = new eSectionTT();
            this._statistics = new List<eStatistic>();
            this._connections = new List<eConnectionTT>();
            this._times = new List<eArrivalDepartureTimes>();
        }

        [System.Xml.Serialization.XmlElementAttribute("times")]
        public List<eArrivalDepartureTimes> times
        {
            get
            {
                return this._times;
            }
            set
            {
                this._times = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("connection", IsNullable = false)]
        public List<eConnectionTT> connections
        {
            get
            {
                return this._connections;
            }
            set
            {
                this._connections = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("statistic", IsNullable = false)]
        public List<eStatistic> statistics
        {
            get
            {
                return this._statistics;
            }
            set
            {
                this._statistics = value;
            }
        }

        public eSectionTT sectionTT
        {
            get
            {
                return this._sectionTT;
            }
            set
            {
                this._sectionTT = value;
            }
        }

        public eStopDescription stopDescription
        {
            get
            {
                return this._stopDescription;
            }
            set
            {
                this._stopDescription = value;
            }
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOcpTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether times should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimes()
        {
            return times != null && times.Count > 0;
        }

        /// <summary>
        /// Test whether connections should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconnections()
        {
            return connections != null && connections.Count > 0;
        }

        /// <summary>
        /// Test whether statistics should be serialized
        /// </summary>
        public virtual bool ShouldSerializestatistics()
        {
            return statistics != null && statistics.Count > 0;
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        /// <summary>
        /// Test whether sectionTT should be serialized
        /// </summary>
        public virtual bool ShouldSerializesectionTT()
        {
            return (_sectionTT != null);
        }

        /// <summary>
        /// Test whether stopDescription should be serialized
        /// </summary>
        public virtual bool ShouldSerializestopDescription()
        {
            return (_stopDescription != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOcpTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOcpTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOcpTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOcpTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOcpTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eOcpTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOcpTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOcpTT Deserialize(System.IO.Stream s)
        {
            return ((eOcpTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOcpTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOcpTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOcpTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOcpTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcpTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOcpTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eOcpTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eArrivalDepartureTimes : tArrivalDepartureTimes
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eArrivalDepartureTimes));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eArrivalDepartureTimes object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eArrivalDepartureTimes object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eArrivalDepartureTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eArrivalDepartureTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eArrivalDepartureTimes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eArrivalDepartureTimes obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eArrivalDepartureTimes Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eArrivalDepartureTimes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eArrivalDepartureTimes Deserialize(System.IO.Stream s)
        {
            return ((eArrivalDepartureTimes)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eArrivalDepartureTimes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eArrivalDepartureTimes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eArrivalDepartureTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eArrivalDepartureTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eArrivalDepartureTimes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eArrivalDepartureTimes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eArrivalDepartureTimes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eArrivalDepartureTimes))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tArrivalDepartureTimes : ParentContainer
    {

        private bool _shouldSerializedepartureserialize;

        private bool _shouldSerializearrivalserialize;

        private string _scope;

        private System.Nullable<System.DateTime> _arrival;

        private string _arrivalDay;

        private System.Nullable<System.DateTime> _departure;

        private string _departureDay;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tArrivalDepartureTimes()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
            this._arrivalDay = "0";
            this._departureDay = "0";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string scope
        {
            get
            {
                return this._scope;
            }
            set
            {
                this._scope = value;
            }
        }

        [System.Xml.Serialization.XmlIgnore()]
        //[System.Xml.Serialization.XmlAttributeAttribute(DataType = "time")]
        public System.DateTime arrival
        {
            get
            {
                if (this._arrival.HasValue)
                {
                    return this._arrival.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._arrival = value;
                _shouldSerializearrivalserialize = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("arrival")]
        public string arrivalserialize
        {
            get { return arrival.ToString("hh:mm:ss"); }
            set { }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool arrivalSpecified
        {
            get
            {
                return this._arrival.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._arrival = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string arrivalDay
        {
            get
            {
                return this._arrivalDay;
            }
            set
            {
                this._arrivalDay = value;
            }
        }

        [System.Xml.Serialization.XmlIgnore]
        //[System.Xml.Serialization.XmlAttributeAttribute(DataType = "time")]
        public System.DateTime departure
        {
            get
            {
                if (this._departure.HasValue)
                {
                    return this._departure.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._departure = value;
                _shouldSerializedepartureserialize = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("departure")]
        public string departureserialize
        {
            get { return departure.ToString("hh:mm:ss"); }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool departureSpecified
        {
            get
            {
                return this._departure.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._departure = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string departureDay
        {
            get
            {
                return this._departureDay;
            }
            set
            {
                this._departureDay = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tArrivalDepartureTimes));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether arrival should be serialized
        /// </summary>
        public virtual bool ShouldSerializearrivalserialize()
        {
            if (_shouldSerializearrivalserialize)
            {
                return true;
            }
            return (_arrival != default(System.DateTime));
        }

        /// <summary>
        /// Test whether departure should be serialized
        /// </summary>
        public virtual bool ShouldSerializedepartureserialize()
        {
            if (_shouldSerializedepartureserialize)
            {
                return true;
            }
            return (_departure != default(System.DateTime));
        }

        /// <summary>
        /// Test whether scope should be serialized
        /// </summary>
        public virtual bool ShouldSerializescope()
        {
            return !string.IsNullOrEmpty(scope);
        }

        /// <summary>
        /// Test whether arrivalDay should be serialized
        /// </summary>
        public virtual bool ShouldSerializearrivalDay()
        {
            return !string.IsNullOrEmpty(arrivalDay);
        }

        /// <summary>
        /// Test whether departureDay should be serialized
        /// </summary>
        public virtual bool ShouldSerializedepartureDay()
        {
            return !string.IsNullOrEmpty(departureDay);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tArrivalDepartureTimes object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tArrivalDepartureTimes object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tArrivalDepartureTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tArrivalDepartureTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tArrivalDepartureTimes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tArrivalDepartureTimes obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tArrivalDepartureTimes Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tArrivalDepartureTimes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tArrivalDepartureTimes Deserialize(System.IO.Stream s)
        {
            return ((tArrivalDepartureTimes)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tArrivalDepartureTimes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tArrivalDepartureTimes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tArrivalDepartureTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tArrivalDepartureTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tArrivalDepartureTimes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tArrivalDepartureTimes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tArrivalDepartureTimes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eConnectionTT : tConnectionTT
    {

        private List<tAnnotationRef> _annotationRef;

        private static XmlSerializer serializer;

        public eConnectionTT()
        {
            this._annotationRef = new List<tAnnotationRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("annotationRef")]
        public List<tAnnotationRef> annotationRef
        {
            get
            {
                return this._annotationRef;
            }
            set
            {
                this._annotationRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eConnectionTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether annotationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeannotationRef()
        {
            return annotationRef != null && annotationRef.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eConnectionTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eConnectionTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eConnectionTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eConnectionTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eConnectionTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eConnectionTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eConnectionTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eConnectionTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eConnectionTT Deserialize(System.IO.Stream s)
        {
            return ((eConnectionTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eConnectionTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eConnectionTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eConnectionTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eConnectionTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eConnectionTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eConnectionTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eConnectionTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eConnectionTT))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tConnectionTT : ParentContainer
    {

        private string _trainRef;

        private string _minConnTime;

        private string _maxConnTime;

        private string _connOperation;

        private string _connType;

        private string _ocpRef;

        private string _trainPartRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string trainRef
        {
            get
            {
                return this._trainRef;
            }
            set
            {
                this._trainRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string minConnTime
        {
            get
            {
                return this._minConnTime;
            }
            set
            {
                this._minConnTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string maxConnTime
        {
            get
            {
                return this._maxConnTime;
            }
            set
            {
                this._maxConnTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string connOperation
        {
            get
            {
                return this._connOperation;
            }
            set
            {
                this._connOperation = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string connType
        {
            get
            {
                return this._connType;
            }
            set
            {
                this._connType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpRef
        {
            get
            {
                return this._ocpRef;
            }
            set
            {
                this._ocpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string trainPartRef
        {
            get
            {
                return this._trainPartRef;
            }
            set
            {
                this._trainPartRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tConnectionTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainRef()
        {
            return !string.IsNullOrEmpty(trainRef);
        }

        /// <summary>
        /// Test whether minConnTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializeminConnTime()
        {
            return !string.IsNullOrEmpty(minConnTime);
        }

        /// <summary>
        /// Test whether maxConnTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxConnTime()
        {
            return !string.IsNullOrEmpty(maxConnTime);
        }

        /// <summary>
        /// Test whether connOperation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconnOperation()
        {
            return !string.IsNullOrEmpty(connOperation);
        }

        /// <summary>
        /// Test whether connType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconnType()
        {
            return !string.IsNullOrEmpty(connType);
        }

        /// <summary>
        /// Test whether ocpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpRef()
        {
            return !string.IsNullOrEmpty(ocpRef);
        }

        /// <summary>
        /// Test whether trainPartRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainPartRef()
        {
            return !string.IsNullOrEmpty(trainPartRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tConnectionTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tConnectionTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tConnectionTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tConnectionTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tConnectionTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tConnectionTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tConnectionTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tConnectionTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tConnectionTT Deserialize(System.IO.Stream s)
        {
            return ((tConnectionTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tConnectionTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tConnectionTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tConnectionTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tConnectionTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tConnectionTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tConnectionTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tConnectionTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eStatistic : tStatistic
    {

        private tStatisticTimes _mean;

        private tStatisticTimes _median;

        private tStandardDeviationTimes _standardDeviation;

        private List<tStatisticAnalyses> _statisticAnalyses;

        private static XmlSerializer serializer;

        public eStatistic()
        {
            this._statisticAnalyses = new List<tStatisticAnalyses>();
            this._standardDeviation = new tStandardDeviationTimes();
            this._median = new tStatisticTimes();
            this._mean = new tStatisticTimes();
        }

        public tStatisticTimes mean
        {
            get
            {
                return this._mean;
            }
            set
            {
                this._mean = value;
            }
        }

        public tStatisticTimes median
        {
            get
            {
                return this._median;
            }
            set
            {
                this._median = value;
            }
        }

        public tStandardDeviationTimes standardDeviation
        {
            get
            {
                return this._standardDeviation;
            }
            set
            {
                this._standardDeviation = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("statisticAnalyses")]
        public List<tStatisticAnalyses> statisticAnalyses
        {
            get
            {
                return this._statisticAnalyses;
            }
            set
            {
                this._statisticAnalyses = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eStatistic));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether statisticAnalyses should be serialized
        /// </summary>
        public virtual bool ShouldSerializestatisticAnalyses()
        {
            return statisticAnalyses != null && statisticAnalyses.Count > 0;
        }

        /// <summary>
        /// Test whether mean should be serialized
        /// </summary>
        public virtual bool ShouldSerializemean()
        {
            return (_mean != null);
        }

        /// <summary>
        /// Test whether median should be serialized
        /// </summary>
        public virtual bool ShouldSerializemedian()
        {
            return (_median != null);
        }

        /// <summary>
        /// Test whether standardDeviation should be serialized
        /// </summary>
        public virtual bool ShouldSerializestandardDeviation()
        {
            return (_standardDeviation != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eStatistic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eStatistic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eStatistic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eStatistic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eStatistic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eStatistic obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eStatistic Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eStatistic)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eStatistic Deserialize(System.IO.Stream s)
        {
            return ((eStatistic)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eStatistic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eStatistic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eStatistic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eStatistic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eStatistic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eStatistic obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eStatistic LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStatisticTimes : ParentContainer
    {

        private bool _shouldSerializedeparture;

        private bool _shouldSerializearrival;

        private System.Nullable<System.DateTime> _arrival;

        private string _arrivalDay;

        private System.Nullable<System.DateTime> _departure;

        private string _departureDay;

        private string _arrivalDelay;

        private string _departureDelay;

        private string _stopTime;

        private static XmlSerializer serializer;

        public tStatisticTimes()
        {
            this._arrivalDay = "0";
            this._departureDay = "0";
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "time")]
        public System.DateTime arrival
        {
            get
            {
                if (this._arrival.HasValue)
                {
                    return this._arrival.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._arrival = value;
                _shouldSerializearrival = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool arrivalSpecified
        {
            get
            {
                return this._arrival.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._arrival = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string arrivalDay
        {
            get
            {
                return this._arrivalDay;
            }
            set
            {
                this._arrivalDay = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "time")]
        public System.DateTime departure
        {
            get
            {
                if (this._departure.HasValue)
                {
                    return this._departure.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._departure = value;
                _shouldSerializedeparture = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool departureSpecified
        {
            get
            {
                return this._departure.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._departure = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        [System.ComponentModel.DefaultValueAttribute("0")]
        public string departureDay
        {
            get
            {
                return this._departureDay;
            }
            set
            {
                this._departureDay = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string arrivalDelay
        {
            get
            {
                return this._arrivalDelay;
            }
            set
            {
                this._arrivalDelay = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string departureDelay
        {
            get
            {
                return this._departureDelay;
            }
            set
            {
                this._departureDelay = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string stopTime
        {
            get
            {
                return this._stopTime;
            }
            set
            {
                this._stopTime = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStatisticTimes));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether arrival should be serialized
        /// </summary>
        public virtual bool ShouldSerializearrival()
        {
            if (_shouldSerializearrival)
            {
                return true;
            }
            return (_arrival != default(System.DateTime));
        }

        /// <summary>
        /// Test whether departure should be serialized
        /// </summary>
        public virtual bool ShouldSerializedeparture()
        {
            if (_shouldSerializedeparture)
            {
                return true;
            }
            return (_departure != default(System.DateTime));
        }

        /// <summary>
        /// Test whether arrivalDay should be serialized
        /// </summary>
        public virtual bool ShouldSerializearrivalDay()
        {
            return !string.IsNullOrEmpty(arrivalDay);
        }

        /// <summary>
        /// Test whether departureDay should be serialized
        /// </summary>
        public virtual bool ShouldSerializedepartureDay()
        {
            return !string.IsNullOrEmpty(departureDay);
        }

        /// <summary>
        /// Test whether arrivalDelay should be serialized
        /// </summary>
        public virtual bool ShouldSerializearrivalDelay()
        {
            return !string.IsNullOrEmpty(arrivalDelay);
        }

        /// <summary>
        /// Test whether departureDelay should be serialized
        /// </summary>
        public virtual bool ShouldSerializedepartureDelay()
        {
            return !string.IsNullOrEmpty(departureDelay);
        }

        /// <summary>
        /// Test whether stopTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializestopTime()
        {
            return !string.IsNullOrEmpty(stopTime);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStatisticTimes object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStatisticTimes object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStatisticTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStatisticTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStatisticTimes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStatisticTimes obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tStatisticTimes Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStatisticTimes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStatisticTimes Deserialize(System.IO.Stream s)
        {
            return ((tStatisticTimes)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStatisticTimes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStatisticTimes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStatisticTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStatisticTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStatisticTimes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStatisticTimes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tStatisticTimes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStandardDeviationTimes : ParentContainer
    {

        private string _arrivalDelay;

        private string _departureDelay;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string arrivalDelay
        {
            get
            {
                return this._arrivalDelay;
            }
            set
            {
                this._arrivalDelay = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string departureDelay
        {
            get
            {
                return this._departureDelay;
            }
            set
            {
                this._departureDelay = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStandardDeviationTimes));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether arrivalDelay should be serialized
        /// </summary>
        public virtual bool ShouldSerializearrivalDelay()
        {
            return !string.IsNullOrEmpty(arrivalDelay);
        }

        /// <summary>
        /// Test whether departureDelay should be serialized
        /// </summary>
        public virtual bool ShouldSerializedepartureDelay()
        {
            return !string.IsNullOrEmpty(departureDelay);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStandardDeviationTimes object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStandardDeviationTimes object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStandardDeviationTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStandardDeviationTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStandardDeviationTimes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStandardDeviationTimes obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tStandardDeviationTimes Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStandardDeviationTimes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStandardDeviationTimes Deserialize(System.IO.Stream s)
        {
            return ((tStandardDeviationTimes)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStandardDeviationTimes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStandardDeviationTimes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStandardDeviationTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStandardDeviationTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStandardDeviationTimes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStandardDeviationTimes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tStandardDeviationTimes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStatisticAnalyses : ParentContainer
    {

        private bool _shouldSerializepercentage;

        private string _description;

        private System.Nullable<decimal> _percentage;

        private string _value;

        private string _figure;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal percentage
        {
            get
            {
                if (this._percentage.HasValue)
                {
                    return this._percentage.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._percentage = value;
                _shouldSerializepercentage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool percentageSpecified
        {
            get
            {
                return this._percentage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._percentage = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string figure
        {
            get
            {
                return this._figure;
            }
            set
            {
                this._figure = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStatisticAnalyses));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether percentage should be serialized
        /// </summary>
        public virtual bool ShouldSerializepercentage()
        {
            if (_shouldSerializepercentage)
            {
                return true;
            }
            return (_percentage != default(decimal));
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            return !string.IsNullOrEmpty(value);
        }

        /// <summary>
        /// Test whether figure should be serialized
        /// </summary>
        public virtual bool ShouldSerializefigure()
        {
            return !string.IsNullOrEmpty(figure);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStatisticAnalyses object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStatisticAnalyses object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStatisticAnalyses object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStatisticAnalyses obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStatisticAnalyses);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStatisticAnalyses obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tStatisticAnalyses Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStatisticAnalyses)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStatisticAnalyses Deserialize(System.IO.Stream s)
        {
            return ((tStatisticAnalyses)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStatisticAnalyses object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStatisticAnalyses object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStatisticAnalyses object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStatisticAnalyses obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStatisticAnalyses);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStatisticAnalyses obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tStatisticAnalyses LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eStatistic))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStatistic : ParentContainer
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStatistic));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStatistic object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStatistic object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStatistic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStatistic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStatistic);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStatistic obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tStatistic Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStatistic)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStatistic Deserialize(System.IO.Stream s)
        {
            return ((tStatistic)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStatistic object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStatistic object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStatistic object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStatistic obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStatistic);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStatistic obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tStatistic LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eSectionTT : tSectionTT
    {

        private List<tTrackRef> _trackRef;

        private tRunTimes _runTimes;

        private static XmlSerializer serializer;

        public eSectionTT()
        {
            this._runTimes = new tRunTimes();
            this._trackRef = new List<tTrackRef>();
        }

        [System.Xml.Serialization.XmlElementAttribute("trackRef")]
        public List<tTrackRef> trackRef
        {
            get
            {
                return this._trackRef;
            }
            set
            {
                this._trackRef = value;
            }
        }

        public tRunTimes runTimes
        {
            get
            {
                return this._runTimes;
            }
            set
            {
                this._runTimes = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eSectionTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackRef()
        {
            return trackRef != null && trackRef.Count > 0;
        }

        /// <summary>
        /// Test whether runTimes should be serialized
        /// </summary>
        public virtual bool ShouldSerializerunTimes()
        {
            return (_runTimes != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eSectionTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eSectionTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eSectionTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eSectionTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eSectionTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eSectionTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eSectionTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eSectionTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eSectionTT Deserialize(System.IO.Stream s)
        {
            return ((eSectionTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eSectionTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eSectionTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eSectionTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eSectionTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eSectionTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eSectionTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eSectionTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tRunTimes : ParentContainer
    {

        private string _minimalTime;

        private string _operationalReserve;

        private string _additionalReserve;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string minimalTime
        {
            get
            {
                return this._minimalTime;
            }
            set
            {
                this._minimalTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string operationalReserve
        {
            get
            {
                return this._operationalReserve;
            }
            set
            {
                this._operationalReserve = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string additionalReserve
        {
            get
            {
                return this._additionalReserve;
            }
            set
            {
                this._additionalReserve = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tRunTimes));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether minimalTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializeminimalTime()
        {
            return !string.IsNullOrEmpty(minimalTime);
        }

        /// <summary>
        /// Test whether operationalReserve should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationalReserve()
        {
            return !string.IsNullOrEmpty(operationalReserve);
        }

        /// <summary>
        /// Test whether additionalReserve should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalReserve()
        {
            return !string.IsNullOrEmpty(additionalReserve);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tRunTimes object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tRunTimes object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tRunTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tRunTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRunTimes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tRunTimes obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tRunTimes Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tRunTimes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tRunTimes Deserialize(System.IO.Stream s)
        {
            return ((tRunTimes)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tRunTimes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tRunTimes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tRunTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tRunTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRunTimes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tRunTimes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tRunTimes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eSectionTT))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSectionTT : ParentContainer
    {

        private bool _shouldSerializedistance;

        private bool _shouldSerializepercentageSupplement;

        private string _section;

        private string _lineRef;

        private string _trackInfo;

        private string _description;

        private string _remarks;

        private System.Nullable<decimal> _percentageSupplement;

        private System.Nullable<decimal> _distance;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string section
        {
            get
            {
                return this._section;
            }
            set
            {
                this._section = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string lineRef
        {
            get
            {
                return this._lineRef;
            }
            set
            {
                this._lineRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trackInfo
        {
            get
            {
                return this._trackInfo;
            }
            set
            {
                this._trackInfo = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                this._remarks = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal percentageSupplement
        {
            get
            {
                if (this._percentageSupplement.HasValue)
                {
                    return this._percentageSupplement.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._percentageSupplement = value;
                _shouldSerializepercentageSupplement = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool percentageSupplementSpecified
        {
            get
            {
                return this._percentageSupplement.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._percentageSupplement = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal distance
        {
            get
            {
                if (this._distance.HasValue)
                {
                    return this._distance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._distance = value;
                _shouldSerializedistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool distanceSpecified
        {
            get
            {
                return this._distance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._distance = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSectionTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether percentageSupplement should be serialized
        /// </summary>
        public virtual bool ShouldSerializepercentageSupplement()
        {
            if (_shouldSerializepercentageSupplement)
            {
                return true;
            }
            return (_percentageSupplement != default(decimal));
        }

        /// <summary>
        /// Test whether distance should be serialized
        /// </summary>
        public virtual bool ShouldSerializedistance()
        {
            if (_shouldSerializedistance)
            {
                return true;
            }
            return (_distance != default(decimal));
        }

        /// <summary>
        /// Test whether section should be serialized
        /// </summary>
        public virtual bool ShouldSerializesection()
        {
            return !string.IsNullOrEmpty(section);
        }

        /// <summary>
        /// Test whether lineRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializelineRef()
        {
            return !string.IsNullOrEmpty(lineRef);
        }

        /// <summary>
        /// Test whether trackInfo should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackInfo()
        {
            return !string.IsNullOrEmpty(trackInfo);
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        /// <summary>
        /// Test whether remarks should be serialized
        /// </summary>
        public virtual bool ShouldSerializeremarks()
        {
            return !string.IsNullOrEmpty(remarks);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSectionTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSectionTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSectionTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSectionTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSectionTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSectionTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tSectionTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSectionTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSectionTT Deserialize(System.IO.Stream s)
        {
            return ((tSectionTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSectionTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSectionTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSectionTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSectionTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSectionTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSectionTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tSectionTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eStopDescription : tStopDescription
    {

        private tStopTimes _stopTimes;

        private List<tPlatformEdgeRef> _platformEdgeRef;

        private List<tServiceSectionRef> _serviceSectionRef;

        private List<tAnnotationRef> _annotationRef;

        private static XmlSerializer serializer;

        public eStopDescription()
        {
            this._annotationRef = new List<tAnnotationRef>();
            this._serviceSectionRef = new List<tServiceSectionRef>();
            this._platformEdgeRef = new List<tPlatformEdgeRef>();
            this._stopTimes = new tStopTimes();
        }

        public tStopTimes stopTimes
        {
            get
            {
                return this._stopTimes;
            }
            set
            {
                this._stopTimes = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("platformEdgeRef")]
        public List<tPlatformEdgeRef> platformEdgeRef
        {
            get
            {
                return this._platformEdgeRef;
            }
            set
            {
                this._platformEdgeRef = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("serviceSectionRef")]
        public List<tServiceSectionRef> serviceSectionRef
        {
            get
            {
                return this._serviceSectionRef;
            }
            set
            {
                this._serviceSectionRef = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("annotationRef")]
        public List<tAnnotationRef> annotationRef
        {
            get
            {
                return this._annotationRef;
            }
            set
            {
                this._annotationRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eStopDescription));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether platformEdgeRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeplatformEdgeRef()
        {
            return platformEdgeRef != null && platformEdgeRef.Count > 0;
        }

        /// <summary>
        /// Test whether serviceSectionRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeserviceSectionRef()
        {
            return serviceSectionRef != null && serviceSectionRef.Count > 0;
        }

        /// <summary>
        /// Test whether annotationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeannotationRef()
        {
            return annotationRef != null && annotationRef.Count > 0;
        }

        /// <summary>
        /// Test whether stopTimes should be serialized
        /// </summary>
        public virtual bool ShouldSerializestopTimes()
        {
            return (_stopTimes != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eStopDescription object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eStopDescription object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eStopDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eStopDescription obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eStopDescription);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eStopDescription obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eStopDescription Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eStopDescription)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eStopDescription Deserialize(System.IO.Stream s)
        {
            return ((eStopDescription)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eStopDescription object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eStopDescription object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eStopDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eStopDescription obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eStopDescription);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eStopDescription obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eStopDescription LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStopTimes : ParentContainer
    {

        private string _minimalTime;

        private string _operationalReserve;

        private string _additionalReserve;

        private string _shuntingTime;

        private string _clearanceTime;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string minimalTime
        {
            get
            {
                return this._minimalTime;
            }
            set
            {
                this._minimalTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string operationalReserve
        {
            get
            {
                return this._operationalReserve;
            }
            set
            {
                this._operationalReserve = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string additionalReserve
        {
            get
            {
                return this._additionalReserve;
            }
            set
            {
                this._additionalReserve = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string shuntingTime
        {
            get
            {
                return this._shuntingTime;
            }
            set
            {
                this._shuntingTime = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string clearanceTime
        {
            get
            {
                return this._clearanceTime;
            }
            set
            {
                this._clearanceTime = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStopTimes));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether minimalTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializeminimalTime()
        {
            return !string.IsNullOrEmpty(minimalTime);
        }

        /// <summary>
        /// Test whether operationalReserve should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationalReserve()
        {
            return !string.IsNullOrEmpty(operationalReserve);
        }

        /// <summary>
        /// Test whether additionalReserve should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalReserve()
        {
            return !string.IsNullOrEmpty(additionalReserve);
        }

        /// <summary>
        /// Test whether shuntingTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializeshuntingTime()
        {
            return !string.IsNullOrEmpty(shuntingTime);
        }

        /// <summary>
        /// Test whether clearanceTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializeclearanceTime()
        {
            return !string.IsNullOrEmpty(clearanceTime);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStopTimes object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStopTimes object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStopTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStopTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStopTimes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStopTimes obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tStopTimes Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStopTimes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStopTimes Deserialize(System.IO.Stream s)
        {
            return ((tStopTimes)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStopTimes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStopTimes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStopTimes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStopTimes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStopTimes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStopTimes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tStopTimes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eStopDescription))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStopDescription : ParentContainer
    {

        private bool _shouldSerializeoperationalStopOrdered;

        private bool _shouldSerializeguaranteedPass;

        private bool _shouldSerializeonOff;

        private bool _shouldSerializestopOnRequest;

        private bool _shouldSerializecommercial;

        private System.Nullable<bool> _commercial;

        private System.Nullable<bool> _stopOnRequest;

        private System.Nullable<tOnOff> _onOff;

        private string _purpose;

        private System.Nullable<bool> _guaranteedPass;

        private System.Nullable<bool> _operationalStopOrdered;

        private string _operatingPeriodRef;

        private string _stopPostRef;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tStopDescription()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool commercial
        {
            get
            {
                if (this._commercial.HasValue)
                {
                    return this._commercial.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._commercial = value;
                _shouldSerializecommercial = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool commercialSpecified
        {
            get
            {
                return this._commercial.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._commercial = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool stopOnRequest
        {
            get
            {
                if (this._stopOnRequest.HasValue)
                {
                    return this._stopOnRequest.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._stopOnRequest = value;
                _shouldSerializestopOnRequest = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool stopOnRequestSpecified
        {
            get
            {
                return this._stopOnRequest.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._stopOnRequest = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tOnOff onOff
        {
            get
            {
                if (this._onOff.HasValue)
                {
                    return this._onOff.Value;
                }
                else
                {
                    return default(tOnOff);
                }
            }
            set
            {
                this._onOff = value;
                _shouldSerializeonOff = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool onOffSpecified
        {
            get
            {
                return this._onOff.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._onOff = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string purpose
        {
            get
            {
                return this._purpose;
            }
            set
            {
                this._purpose = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool guaranteedPass
        {
            get
            {
                if (this._guaranteedPass.HasValue)
                {
                    return this._guaranteedPass.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._guaranteedPass = value;
                _shouldSerializeguaranteedPass = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool guaranteedPassSpecified
        {
            get
            {
                return this._guaranteedPass.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._guaranteedPass = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool operationalStopOrdered
        {
            get
            {
                if (this._operationalStopOrdered.HasValue)
                {
                    return this._operationalStopOrdered.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._operationalStopOrdered = value;
                _shouldSerializeoperationalStopOrdered = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool operationalStopOrderedSpecified
        {
            get
            {
                return this._operationalStopOrdered.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._operationalStopOrdered = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string operatingPeriodRef
        {
            get
            {
                return this._operatingPeriodRef;
            }
            set
            {
                this._operatingPeriodRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string stopPostRef
        {
            get
            {
                return this._stopPostRef;
            }
            set
            {
                this._stopPostRef = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStopDescription));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether commercial should be serialized
        /// </summary>
        public virtual bool ShouldSerializecommercial()
        {
            if (_shouldSerializecommercial)
            {
                return true;
            }
            return (_commercial != default(bool));
        }

        /// <summary>
        /// Test whether stopOnRequest should be serialized
        /// </summary>
        public virtual bool ShouldSerializestopOnRequest()
        {
            if (_shouldSerializestopOnRequest)
            {
                return true;
            }
            return (_stopOnRequest != default(bool));
        }

        /// <summary>
        /// Test whether onOff should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonOff()
        {
            if (_shouldSerializeonOff)
            {
                return true;
            }
            return (_onOff != default(tOnOff));
        }

        /// <summary>
        /// Test whether guaranteedPass should be serialized
        /// </summary>
        public virtual bool ShouldSerializeguaranteedPass()
        {
            if (_shouldSerializeguaranteedPass)
            {
                return true;
            }
            return (_guaranteedPass != default(bool));
        }

        /// <summary>
        /// Test whether operationalStopOrdered should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationalStopOrdered()
        {
            if (_shouldSerializeoperationalStopOrdered)
            {
                return true;
            }
            return (_operationalStopOrdered != default(bool));
        }

        /// <summary>
        /// Test whether purpose should be serialized
        /// </summary>
        public virtual bool ShouldSerializepurpose()
        {
            return !string.IsNullOrEmpty(purpose);
        }

        /// <summary>
        /// Test whether operatingPeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingPeriodRef()
        {
            return !string.IsNullOrEmpty(operatingPeriodRef);
        }

        /// <summary>
        /// Test whether stopPostRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializestopPostRef()
        {
            return !string.IsNullOrEmpty(stopPostRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStopDescription object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStopDescription object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStopDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStopDescription obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStopDescription);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStopDescription obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tStopDescription Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStopDescription)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStopDescription Deserialize(System.IO.Stream s)
        {
            return ((tStopDescription)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStopDescription object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStopDescription object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStopDescription object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStopDescription obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStopDescription);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStopDescription obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tStopDescription LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tOnOff
    {

        /// <remarks/>
        both,

        /// <remarks/>
        on,

        /// <remarks/>
        off,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOcpTT))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOcpTT : ParentContainer
    {

        private bool _shouldSerializeoffset;

        private bool _shouldSerializealignment;

        private bool _shouldSerializetrainReverse;

        private bool _shouldSerializeocpType;

        private string _sequence;

        private string _ocpRef;

        private string _trackRef;

        private string _trackInfo;

        private System.Nullable<tOcpTTType> _ocpType;

        private string _remarks;

        private System.Nullable<bool> _trainReverse;

        private System.Nullable<tTrainAlignment> _alignment;

        private System.Nullable<decimal> _offset;

        private string _shuntingTime;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                this._sequence = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpRef
        {
            get
            {
                return this._ocpRef;
            }
            set
            {
                this._ocpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string trackRef
        {
            get
            {
                return this._trackRef;
            }
            set
            {
                this._trackRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trackInfo
        {
            get
            {
                return this._trackInfo;
            }
            set
            {
                this._trackInfo = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tOcpTTType ocpType
        {
            get
            {
                if (this._ocpType.HasValue)
                {
                    return this._ocpType.Value;
                }
                else
                {
                    return default(tOcpTTType);
                }
            }
            set
            {
                this._ocpType = value;
                _shouldSerializeocpType = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ocpTypeSpecified
        {
            get
            {
                return this._ocpType.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._ocpType = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                this._remarks = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool trainReverse
        {
            get
            {
                if (this._trainReverse.HasValue)
                {
                    return this._trainReverse.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._trainReverse = value;
                _shouldSerializetrainReverse = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trainReverseSpecified
        {
            get
            {
                return this._trainReverse.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trainReverse = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTrainAlignment alignment
        {
            get
            {
                if (this._alignment.HasValue)
                {
                    return this._alignment.Value;
                }
                else
                {
                    return default(tTrainAlignment);
                }
            }
            set
            {
                this._alignment = value;
                _shouldSerializealignment = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool alignmentSpecified
        {
            get
            {
                return this._alignment.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._alignment = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal offset
        {
            get
            {
                if (this._offset.HasValue)
                {
                    return this._offset.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._offset = value;
                _shouldSerializeoffset = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool offsetSpecified
        {
            get
            {
                return this._offset.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._offset = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "duration")]
        public string shuntingTime
        {
            get
            {
                return this._shuntingTime;
            }
            set
            {
                this._shuntingTime = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOcpTT));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ocpType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpType()
        {
            if (_shouldSerializeocpType)
            {
                return true;
            }
            return (_ocpType != default(tOcpTTType));
        }

        /// <summary>
        /// Test whether trainReverse should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainReverse()
        {
            if (_shouldSerializetrainReverse)
            {
                return true;
            }
            return (_trainReverse != default(bool));
        }

        /// <summary>
        /// Test whether alignment should be serialized
        /// </summary>
        public virtual bool ShouldSerializealignment()
        {
            if (_shouldSerializealignment)
            {
                return true;
            }
            return (_alignment != default(tTrainAlignment));
        }

        /// <summary>
        /// Test whether offset should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoffset()
        {
            if (_shouldSerializeoffset)
            {
                return true;
            }
            return (_offset != default(decimal));
        }

        /// <summary>
        /// Test whether sequence should be serialized
        /// </summary>
        public virtual bool ShouldSerializesequence()
        {
            return !string.IsNullOrEmpty(sequence);
        }

        /// <summary>
        /// Test whether ocpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpRef()
        {
            return !string.IsNullOrEmpty(ocpRef);
        }

        /// <summary>
        /// Test whether trackRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackRef()
        {
            return !string.IsNullOrEmpty(trackRef);
        }

        /// <summary>
        /// Test whether trackInfo should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackInfo()
        {
            return !string.IsNullOrEmpty(trackInfo);
        }

        /// <summary>
        /// Test whether remarks should be serialized
        /// </summary>
        public virtual bool ShouldSerializeremarks()
        {
            return !string.IsNullOrEmpty(remarks);
        }

        /// <summary>
        /// Test whether shuntingTime should be serialized
        /// </summary>
        public virtual bool ShouldSerializeshuntingTime()
        {
            return !string.IsNullOrEmpty(shuntingTime);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOcpTT object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOcpTT object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOcpTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOcpTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpTT);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOcpTT obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOcpTT Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOcpTT)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOcpTT Deserialize(System.IO.Stream s)
        {
            return ((tOcpTT)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOcpTT object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOcpTT object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOcpTT object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOcpTT obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOcpTT);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOcpTT obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOcpTT LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tOcpTTType
    {

        /// <remarks/>
        stop,

        /// <remarks/>
        pass,

        /// <remarks/>
        begin,

        /// <remarks/>
        end,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tTrainAlignment
    {

        /// <remarks/>
        head,

        /// <remarks/>
        center,

        /// <remarks/>
        rear,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOrganizationalUnitBinding : ParentContainer
    {

        private tElementWithReference _vehicleOperator;

        private tElementWithReference _customer;

        private tElementWithReference _railwayUndertaking;

        private tElementWithReference _operationalUndertaking;

        private tElementWithReference _concessionaire;

        private tElementWithReference _contractor;

        private List<System.Xml.XmlElement> _any;

        private static XmlSerializer serializer;

        public eOrganizationalUnitBinding()
        {
            this._any = new List<System.Xml.XmlElement>();
            this._contractor = new tElementWithReference();
            this._concessionaire = new tElementWithReference();
            this._operationalUndertaking = new tElementWithReference();
            this._railwayUndertaking = new tElementWithReference();
            this._customer = new tElementWithReference();
            this._vehicleOperator = new tElementWithReference();
        }

        public tElementWithReference vehicleOperator
        {
            get
            {
                return this._vehicleOperator;
            }
            set
            {
                this._vehicleOperator = value;
            }
        }

        public tElementWithReference customer
        {
            get
            {
                return this._customer;
            }
            set
            {
                this._customer = value;
            }
        }

        public tElementWithReference railwayUndertaking
        {
            get
            {
                return this._railwayUndertaking;
            }
            set
            {
                this._railwayUndertaking = value;
            }
        }

        public tElementWithReference operationalUndertaking
        {
            get
            {
                return this._operationalUndertaking;
            }
            set
            {
                this._operationalUndertaking = value;
            }
        }

        public tElementWithReference concessionaire
        {
            get
            {
                return this._concessionaire;
            }
            set
            {
                this._concessionaire = value;
            }
        }

        public tElementWithReference contractor
        {
            get
            {
                return this._contractor;
            }
            set
            {
                this._contractor = value;
            }
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOrganizationalUnitBinding));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        /// <summary>
        /// Test whether vehicleOperator should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleOperator()
        {
            return (_vehicleOperator != null);
        }

        /// <summary>
        /// Test whether customer should be serialized
        /// </summary>
        public virtual bool ShouldSerializecustomer()
        {
            return (_customer != null);
        }

        /// <summary>
        /// Test whether railwayUndertaking should be serialized
        /// </summary>
        public virtual bool ShouldSerializerailwayUndertaking()
        {
            return (_railwayUndertaking != null);
        }

        /// <summary>
        /// Test whether operationalUndertaking should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationalUndertaking()
        {
            return (_operationalUndertaking != null);
        }

        /// <summary>
        /// Test whether concessionaire should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconcessionaire()
        {
            return (_concessionaire != null);
        }

        /// <summary>
        /// Test whether contractor should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontractor()
        {
            return (_contractor != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOrganizationalUnitBinding object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOrganizationalUnitBinding object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOrganizationalUnitBinding object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOrganizationalUnitBinding obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOrganizationalUnitBinding);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOrganizationalUnitBinding obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eOrganizationalUnitBinding Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOrganizationalUnitBinding)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOrganizationalUnitBinding Deserialize(System.IO.Stream s)
        {
            return ((eOrganizationalUnitBinding)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOrganizationalUnitBinding object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOrganizationalUnitBinding object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOrganizationalUnitBinding object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOrganizationalUnitBinding obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOrganizationalUnitBinding);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOrganizationalUnitBinding obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eOrganizationalUnitBinding LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eAnnotation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAnnotation : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAnnotation));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAnnotation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAnnotation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAnnotation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAnnotation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAnnotation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAnnotation obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tAnnotation Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAnnotation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAnnotation Deserialize(System.IO.Stream s)
        {
            return ((tAnnotation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAnnotation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAnnotation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAnnotation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAnnotation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAnnotation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAnnotation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tAnnotation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eAnnotation : tAnnotation
    {

        private List<eAnnotationText> _text;

        private static XmlSerializer serializer;

        public eAnnotation()
        {
            this._text = new List<eAnnotationText>();
        }

        public List<eAnnotationText> text
        {
            get
            {
                return this._text;
            }
            set
            {
                this._text = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eAnnotation));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether text should be serialized
        /// </summary>
        public virtual bool ShouldSerializetext()
        {
            return text != null && text.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eAnnotation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eAnnotation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eAnnotation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eAnnotation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eAnnotation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eAnnotation obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eAnnotation Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eAnnotation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eAnnotation Deserialize(System.IO.Stream s)
        {
            return ((eAnnotation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eAnnotation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eAnnotation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eAnnotation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eAnnotation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eAnnotation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eAnnotation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eAnnotation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eAnnotationText : tAnnotationText
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eAnnotationText));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eAnnotationText object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eAnnotationText object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eAnnotationText object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eAnnotationText obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eAnnotationText);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eAnnotationText obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eAnnotationText Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eAnnotationText)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eAnnotationText Deserialize(System.IO.Stream s)
        {
            return ((eAnnotationText)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eAnnotationText object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eAnnotationText object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eAnnotationText object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eAnnotationText obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eAnnotationText);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eAnnotationText obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eAnnotationText LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eAnnotationText))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAnnotationText : ParentContainer
    {

        private string _lang;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private string _value;

        private static XmlSerializer serializer;

        public tAnnotationText()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string lang
        {
            get
            {
                return this._lang;
            }
            set
            {
                this._lang = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAnnotationText));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether lang should be serialized
        /// </summary>
        public virtual bool ShouldSerializelang()
        {
            return !string.IsNullOrEmpty(lang);
        }

        /// <summary>
        /// Test whether Value should be serialized
        /// </summary>
        public virtual bool ShouldSerializeValue()
        {
            return !string.IsNullOrEmpty(Value);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAnnotationText object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAnnotationText object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAnnotationText object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAnnotationText obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAnnotationText);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAnnotationText obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tAnnotationText Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAnnotationText)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAnnotationText Deserialize(System.IO.Stream s)
        {
            return ((tAnnotationText)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAnnotationText object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAnnotationText object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAnnotationText object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAnnotationText obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAnnotationText);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAnnotationText obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tAnnotationText LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eCategory))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCategory : tElementWithIDAndName
    {

        private bool _shouldSerializedeadrun;

        private bool _shouldSerializetrainUsage;

        private System.Nullable<tUsageType> _trainUsage;

        private System.Nullable<bool> _deadrun;

        private string _categoryPriority;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tUsageType trainUsage
        {
            get
            {
                if (this._trainUsage.HasValue)
                {
                    return this._trainUsage.Value;
                }
                else
                {
                    return default(tUsageType);
                }
            }
            set
            {
                this._trainUsage = value;
                _shouldSerializetrainUsage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trainUsageSpecified
        {
            get
            {
                return this._trainUsage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trainUsage = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool deadrun
        {
            get
            {
                if (this._deadrun.HasValue)
                {
                    return this._deadrun.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._deadrun = value;
                _shouldSerializedeadrun = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deadrunSpecified
        {
            get
            {
                return this._deadrun.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._deadrun = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string categoryPriority
        {
            get
            {
                return this._categoryPriority;
            }
            set
            {
                this._categoryPriority = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCategory));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainUsage should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainUsage()
        {
            if (_shouldSerializetrainUsage)
            {
                return true;
            }
            return (_trainUsage != default(tUsageType));
        }

        /// <summary>
        /// Test whether deadrun should be serialized
        /// </summary>
        public virtual bool ShouldSerializedeadrun()
        {
            if (_shouldSerializedeadrun)
            {
                return true;
            }
            return (_deadrun != default(bool));
        }

        /// <summary>
        /// Test whether categoryPriority should be serialized
        /// </summary>
        public virtual bool ShouldSerializecategoryPriority()
        {
            return !string.IsNullOrEmpty(categoryPriority);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCategory object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCategory object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCategory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCategory);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCategory obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tCategory Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCategory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCategory Deserialize(System.IO.Stream s)
        {
            return ((tCategory)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCategory object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCategory object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCategory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCategory);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCategory obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tCategory LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tUsageType
    {

        /// <remarks/>
        passenger,

        /// <remarks/>
        goods,

        /// <remarks/>
        mixed,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eCategory : tCategory
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eCategory));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eCategory object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eCategory object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eCategory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eCategory);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eCategory obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eCategory Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eCategory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eCategory Deserialize(System.IO.Stream s)
        {
            return ((eCategory)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eCategory object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eCategory object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eCategory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eCategory obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eCategory);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eCategory obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eCategory LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTimetablePeriod))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTimetablePeriod : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTimetablePeriod));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTimetablePeriod object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTimetablePeriod object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTimetablePeriod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTimetablePeriod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTimetablePeriod);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTimetablePeriod obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTimetablePeriod Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTimetablePeriod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTimetablePeriod Deserialize(System.IO.Stream s)
        {
            return ((tTimetablePeriod)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTimetablePeriod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTimetablePeriod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTimetablePeriod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTimetablePeriod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTimetablePeriod);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTimetablePeriod obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTimetablePeriod LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTimetablePeriod : tTimetablePeriod
    {

        private List<tHoliday> _holidays;

        private static XmlSerializer serializer;

        public eTimetablePeriod()
        {
            this._holidays = new List<tHoliday>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("holiday", IsNullable = false)]
        public List<tHoliday> holidays
        {
            get
            {
                return this._holidays;
            }
            set
            {
                this._holidays = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTimetablePeriod));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether holidays should be serialized
        /// </summary>
        public virtual bool ShouldSerializeholidays()
        {
            return holidays != null && holidays.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTimetablePeriod object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTimetablePeriod object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTimetablePeriod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTimetablePeriod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTimetablePeriod);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTimetablePeriod obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTimetablePeriod Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTimetablePeriod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTimetablePeriod Deserialize(System.IO.Stream s)
        {
            return ((eTimetablePeriod)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTimetablePeriod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTimetablePeriod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTimetablePeriod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTimetablePeriod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTimetablePeriod);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTimetablePeriod obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTimetablePeriod LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tHoliday : ParentContainer
    {

        private bool _shouldSerializeholidayDate;

        private System.DateTime _holidayDate;

        private string _description;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime holidayDate
        {
            get
            {
                return this._holidayDate;
            }
            set
            {
                this._holidayDate = value;
                _shouldSerializeholidayDate = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tHoliday));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether holidayDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeholidayDate()
        {
            if (_shouldSerializeholidayDate)
            {
                return true;
            }
            return (_holidayDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tHoliday object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tHoliday object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tHoliday object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tHoliday obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tHoliday);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tHoliday obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tHoliday Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tHoliday)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tHoliday Deserialize(System.IO.Stream s)
        {
            return ((tHoliday)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tHoliday object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tHoliday object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tHoliday object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tHoliday obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tHoliday);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tHoliday obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tHoliday LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOperatingPeriod))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperatingPeriod : tElementWithIDAndName
    {

        private string _timetablePeriodRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string timetablePeriodRef
        {
            get
            {
                return this._timetablePeriodRef;
            }
            set
            {
                this._timetablePeriodRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperatingPeriod));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether timetablePeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimetablePeriodRef()
        {
            return !string.IsNullOrEmpty(timetablePeriodRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperatingPeriod object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperatingPeriod object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperatingPeriod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperatingPeriod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperatingPeriod);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperatingPeriod obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOperatingPeriod Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperatingPeriod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperatingPeriod Deserialize(System.IO.Stream s)
        {
            return ((tOperatingPeriod)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperatingPeriod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperatingPeriod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperatingPeriod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperatingPeriod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperatingPeriod);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperatingPeriod obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOperatingPeriod LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOperatingPeriod : tOperatingPeriod
    {
        private string _bitMask;

        private System.Nullable<System.DateTime> _startDate;

        private System.Nullable<System.DateTime> _endDate;

        private bool _shouldSerializeendDate;

        private bool _shouldSerializestartDate;

        private List<eOperatingDay> _operatingDay;

        private List<tSpecialService> _specialService;

        private static XmlSerializer serializer;

        public eOperatingPeriod()
        {
            this._specialService = new List<tSpecialService>();
            this._operatingDay = new List<eOperatingDay>();
        }

        public string bitMask
        {
            get { return _bitMask; }
            set { _bitMask = value; }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime startDate
        {
            get
            {
                if (this._startDate.HasValue)
                {
                    return this._startDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._startDate = value;
                _shouldSerializestartDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified
        {
            get
            {
                return this._startDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._startDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime endDate
        {
            get
            {
                if (this._endDate.HasValue)
                {
                    return this._endDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._endDate = value;
                _shouldSerializeendDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endDateSpecified
        {
            get
            {
                return this._endDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._endDate = null;
                }
            }
        }

        public List<eOperatingDay> operatingDay
        {
            get
            {
                return this._operatingDay;
            }
            set
            {
                this._operatingDay = value;
            }
        }

        public List<tSpecialService> specialService
        {
            get
            {
                return this._specialService;
            }
            set
            {
                this._specialService = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOperatingPeriod));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether operatingDay should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingDay()
        {
            return operatingDay != null && operatingDay.Count > 0;
        }

        public virtual bool ShouldSerializestartDate()
        {
            if (_shouldSerializestartDate)
            {
                return true;
            }
            return (_startDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether endDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendDate()
        {
            if (_shouldSerializeendDate)
            {
                return true;
            }
            return (_endDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether specialService should be serialized
        /// </summary>
        public virtual bool ShouldSerializespecialService()
        {
            return specialService != null && specialService.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOperatingPeriod object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOperatingPeriod object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOperatingPeriod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOperatingPeriod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOperatingPeriod);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOperatingPeriod obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eOperatingPeriod Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOperatingPeriod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOperatingPeriod Deserialize(System.IO.Stream s)
        {
            return ((eOperatingPeriod)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOperatingPeriod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOperatingPeriod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOperatingPeriod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOperatingPeriod obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOperatingPeriod);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOperatingPeriod obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eOperatingPeriod LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOperatingDay : tOperatingDay
    {

        private System.Nullable<System.DateTime> _startDate;

        private System.Nullable<System.DateTime> _endDate;

        private bool _shouldSerializestartDate;

        private bool _shouldSerializeendDate;

        private List<tOperatingDayDeviance> _operatingDayDeviance;

        private static XmlSerializer serializer;

        public eOperatingDay()
        {
            this._operatingDayDeviance = new List<tOperatingDayDeviance>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime startDate
        {
            get
            {
                if (this._startDate.HasValue)
                {
                    return this._startDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._startDate = value;
                _shouldSerializestartDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified
        {
            get
            {
                return this._startDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._startDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime endDate
        {
            get
            {
                if (this._endDate.HasValue)
                {
                    return this._endDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._endDate = value;
                _shouldSerializeendDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endDateSpecified
        {
            get
            {
                return this._endDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._endDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("operatingDayDeviance")]
        public List<tOperatingDayDeviance> operatingDayDeviance
        {
            get
            {
                return this._operatingDayDeviance;
            }
            set
            {
                this._operatingDayDeviance = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOperatingDay));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether operatingDayDeviance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingDayDeviance()
        {
            return operatingDayDeviance != null && operatingDayDeviance.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOperatingDay object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOperatingDay object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOperatingDay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOperatingDay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOperatingDay);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOperatingDay obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eOperatingDay Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOperatingDay)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOperatingDay Deserialize(System.IO.Stream s)
        {
            return ((eOperatingDay)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOperatingDay object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOperatingDay object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOperatingDay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOperatingDay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOperatingDay);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOperatingDay obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eOperatingDay LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperatingDayDeviance : ParentContainer
    {

        private bool _shouldSerializeonRequest;

        private string _operatingCode;

        private System.Nullable<bool> _onRequest;

        private string _holidayOffset;

        private string _ranking;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string operatingCode
        {
            get
            {
                return this._operatingCode;
            }
            set
            {
                this._operatingCode = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool onRequest
        {
            get
            {
                if (this._onRequest.HasValue)
                {
                    return this._onRequest.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._onRequest = value;
                _shouldSerializeonRequest = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool onRequestSpecified
        {
            get
            {
                return this._onRequest.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._onRequest = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string holidayOffset
        {
            get
            {
                return this._holidayOffset;
            }
            set
            {
                this._holidayOffset = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string ranking
        {
            get
            {
                return this._ranking;
            }
            set
            {
                this._ranking = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperatingDayDeviance));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether onRequest should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonRequest()
        {
            if (_shouldSerializeonRequest)
            {
                return true;
            }
            return (_onRequest != default(bool));
        }

        /// <summary>
        /// Test whether operatingCode should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingCode()
        {
            return !string.IsNullOrEmpty(operatingCode);
        }

        /// <summary>
        /// Test whether holidayOffset should be serialized
        /// </summary>
        public virtual bool ShouldSerializeholidayOffset()
        {
            return !string.IsNullOrEmpty(holidayOffset);
        }

        /// <summary>
        /// Test whether ranking should be serialized
        /// </summary>
        public virtual bool ShouldSerializeranking()
        {
            return !string.IsNullOrEmpty(ranking);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperatingDayDeviance object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperatingDayDeviance object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperatingDayDeviance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperatingDayDeviance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperatingDayDeviance);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperatingDayDeviance obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOperatingDayDeviance Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperatingDayDeviance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperatingDayDeviance Deserialize(System.IO.Stream s)
        {
            return ((tOperatingDayDeviance)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperatingDayDeviance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperatingDayDeviance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperatingDayDeviance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperatingDayDeviance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperatingDayDeviance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperatingDayDeviance obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOperatingDayDeviance LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eOperatingDay))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperatingDay : ParentContainer
    {

        private bool _shouldSerializeendDate;

        private bool _shouldSerializestartDate;

        private bool _shouldSerializeonRequest;

        private string _operatingCode;

        private System.Nullable<bool> _onRequest;

        private System.Nullable<System.DateTime> _startDate;

        private System.Nullable<System.DateTime> _endDate;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string operatingCode
        {
            get
            {
                return this._operatingCode;
            }
            set
            {
                this._operatingCode = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool onRequest
        {
            get
            {
                if (this._onRequest.HasValue)
                {
                    return this._onRequest.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._onRequest = value;
                _shouldSerializeonRequest = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool onRequestSpecified
        {
            get
            {
                return this._onRequest.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._onRequest = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime startDate
        {
            get
            {
                if (this._startDate.HasValue)
                {
                    return this._startDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._startDate = value;
                _shouldSerializestartDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified
        {
            get
            {
                return this._startDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._startDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime endDate
        {
            get
            {
                if (this._endDate.HasValue)
                {
                    return this._endDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._endDate = value;
                _shouldSerializeendDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endDateSpecified
        {
            get
            {
                return this._endDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._endDate = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperatingDay));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether onRequest should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonRequest()
        {
            if (_shouldSerializeonRequest)
            {
                return true;
            }
            return (_onRequest != default(bool));
        }

        /// <summary>
        /// Test whether startDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializestartDate()
        {
            if (_shouldSerializestartDate)
            {
                return true;
            }
            return (_startDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether endDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendDate()
        {
            if (_shouldSerializeendDate)
            {
                return true;
            }
            return (_endDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether operatingCode should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingCode()
        {
            return !string.IsNullOrEmpty(operatingCode);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperatingDay object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperatingDay object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperatingDay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperatingDay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperatingDay);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperatingDay obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOperatingDay Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperatingDay)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperatingDay Deserialize(System.IO.Stream s)
        {
            return ((tOperatingDay)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperatingDay object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperatingDay object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperatingDay object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperatingDay obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperatingDay);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperatingDay obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOperatingDay LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eFormation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tFormation : tElementWithIDAndName
    {

        private bool _shouldSerializetareWeight;

        private bool _shouldSerializenettoWeight;

        private bool _shouldSerializebruttoWeight;

        private bool _shouldSerializeweight;

        private bool _shouldSerializespeed;

        private bool _shouldSerializelength;

        private string _formationCount;

        private System.Nullable<decimal> _length;

        private System.Nullable<decimal> _speed;

        private System.Nullable<decimal> _weight;

        private System.Nullable<decimal> _bruttoWeight;

        private System.Nullable<decimal> _nettoWeight;

        private System.Nullable<decimal> _tareWeight;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string formationCount
        {
            get
            {
                return this._formationCount;
            }
            set
            {
                this._formationCount = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal length
        {
            get
            {
                if (this._length.HasValue)
                {
                    return this._length.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._length = value;
                _shouldSerializelength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthSpecified
        {
            get
            {
                return this._length.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._length = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal speed
        {
            get
            {
                if (this._speed.HasValue)
                {
                    return this._speed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._speed = value;
                _shouldSerializespeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool speedSpecified
        {
            get
            {
                return this._speed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._speed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal weight
        {
            get
            {
                if (this._weight.HasValue)
                {
                    return this._weight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._weight = value;
                _shouldSerializeweight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool weightSpecified
        {
            get
            {
                return this._weight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._weight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal bruttoWeight
        {
            get
            {
                if (this._bruttoWeight.HasValue)
                {
                    return this._bruttoWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._bruttoWeight = value;
                _shouldSerializebruttoWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bruttoWeightSpecified
        {
            get
            {
                return this._bruttoWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._bruttoWeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nettoWeight
        {
            get
            {
                if (this._nettoWeight.HasValue)
                {
                    return this._nettoWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nettoWeight = value;
                _shouldSerializenettoWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nettoWeightSpecified
        {
            get
            {
                return this._nettoWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nettoWeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal tareWeight
        {
            get
            {
                if (this._tareWeight.HasValue)
                {
                    return this._tareWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._tareWeight = value;
                _shouldSerializetareWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tareWeightSpecified
        {
            get
            {
                return this._tareWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._tareWeight = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tFormation));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether length should be serialized
        /// </summary>
        public virtual bool ShouldSerializelength()
        {
            if (_shouldSerializelength)
            {
                return true;
            }
            return (_length != default(decimal));
        }

        /// <summary>
        /// Test whether speed should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeed()
        {
            if (_shouldSerializespeed)
            {
                return true;
            }
            return (_speed != default(decimal));
        }

        /// <summary>
        /// Test whether weight should be serialized
        /// </summary>
        public virtual bool ShouldSerializeweight()
        {
            if (_shouldSerializeweight)
            {
                return true;
            }
            return (_weight != default(decimal));
        }

        /// <summary>
        /// Test whether bruttoWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializebruttoWeight()
        {
            if (_shouldSerializebruttoWeight)
            {
                return true;
            }
            return (_bruttoWeight != default(decimal));
        }

        /// <summary>
        /// Test whether nettoWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializenettoWeight()
        {
            if (_shouldSerializenettoWeight)
            {
                return true;
            }
            return (_nettoWeight != default(decimal));
        }

        /// <summary>
        /// Test whether tareWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializetareWeight()
        {
            if (_shouldSerializetareWeight)
            {
                return true;
            }
            return (_tareWeight != default(decimal));
        }

        /// <summary>
        /// Test whether formationCount should be serialized
        /// </summary>
        public virtual bool ShouldSerializeformationCount()
        {
            return !string.IsNullOrEmpty(formationCount);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tFormation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tFormation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tFormation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tFormation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tFormation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tFormation obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tFormation Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tFormation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tFormation Deserialize(System.IO.Stream s)
        {
            return ((tFormation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tFormation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tFormation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tFormation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tFormation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tFormation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tFormation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tFormation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eFormation : tFormation
    {

        private List<tVehicleRef> _trainOrder;

        private List<tElementWithReference> _categoryRef;

        private tTrainEngine _trainEngine;

        private tBasicBrakeType _trainBrakes;

        private tTrainResistance _trainResistance;

        private static XmlSerializer serializer;

        public eFormation()
        {
            this._trainResistance = new tTrainResistance();
            this._trainBrakes = new tBasicBrakeType();
            this._trainEngine = new tTrainEngine();
            this._categoryRef = new List<tElementWithReference>();
            this._trainOrder = new List<tVehicleRef>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("vehicleRef", IsNullable = false)]
        public List<tVehicleRef> trainOrder
        {
            get
            {
                return this._trainOrder;
            }
            set
            {
                this._trainOrder = value;
            }
        }

        public List<tElementWithReference> categoryRef
        {
            get
            {
                return this._categoryRef;
            }
            set
            {
                this._categoryRef = value;
            }
        }

        public tTrainEngine trainEngine
        {
            get
            {
                return this._trainEngine;
            }
            set
            {
                this._trainEngine = value;
            }
        }

        public tBasicBrakeType trainBrakes
        {
            get
            {
                return this._trainBrakes;
            }
            set
            {
                this._trainBrakes = value;
            }
        }

        public tTrainResistance trainResistance
        {
            get
            {
                return this._trainResistance;
            }
            set
            {
                this._trainResistance = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eFormation));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainOrder should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainOrder()
        {
            return trainOrder != null && trainOrder.Count > 0;
        }

        /// <summary>
        /// Test whether categoryRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecategoryRef()
        {
            return categoryRef != null && categoryRef.Count > 0;
        }

        /// <summary>
        /// Test whether trainEngine should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainEngine()
        {
            return (_trainEngine != null);
        }

        /// <summary>
        /// Test whether trainBrakes should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainBrakes()
        {
            return (_trainBrakes != null);
        }

        /// <summary>
        /// Test whether trainResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainResistance()
        {
            return (_trainResistance != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eFormation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eFormation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eFormation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eFormation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eFormation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eFormation obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eFormation Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eFormation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eFormation Deserialize(System.IO.Stream s)
        {
            return ((eFormation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eFormation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eFormation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eFormation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eFormation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eFormation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eFormation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eFormation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tVehicleRef : ParentContainer
    {

        private bool _shouldSerializerearGangway;

        private bool _shouldSerializefrontGangway;

        private string _orderNumber;

        private string _vehicleRef;

        private string _vehicleCount;

        private System.Nullable<bool> _frontGangway;

        private System.Nullable<bool> _rearGangway;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string orderNumber
        {
            get
            {
                return this._orderNumber;
            }
            set
            {
                this._orderNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string vehicleRef
        {
            get
            {
                return this._vehicleRef;
            }
            set
            {
                this._vehicleRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string vehicleCount
        {
            get
            {
                return this._vehicleCount;
            }
            set
            {
                this._vehicleCount = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool frontGangway
        {
            get
            {
                if (this._frontGangway.HasValue)
                {
                    return this._frontGangway.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._frontGangway = value;
                _shouldSerializefrontGangway = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool frontGangwaySpecified
        {
            get
            {
                return this._frontGangway.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._frontGangway = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool rearGangway
        {
            get
            {
                if (this._rearGangway.HasValue)
                {
                    return this._rearGangway.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._rearGangway = value;
                _shouldSerializerearGangway = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rearGangwaySpecified
        {
            get
            {
                return this._rearGangway.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._rearGangway = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tVehicleRef));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether frontGangway should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrontGangway()
        {
            if (_shouldSerializefrontGangway)
            {
                return true;
            }
            return (_frontGangway != default(bool));
        }

        /// <summary>
        /// Test whether rearGangway should be serialized
        /// </summary>
        public virtual bool ShouldSerializerearGangway()
        {
            if (_shouldSerializerearGangway)
            {
                return true;
            }
            return (_rearGangway != default(bool));
        }

        /// <summary>
        /// Test whether orderNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorderNumber()
        {
            return !string.IsNullOrEmpty(orderNumber);
        }

        /// <summary>
        /// Test whether vehicleRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleRef()
        {
            return !string.IsNullOrEmpty(vehicleRef);
        }

        /// <summary>
        /// Test whether vehicleCount should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleCount()
        {
            return !string.IsNullOrEmpty(vehicleCount);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tVehicleRef object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tVehicleRef object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tVehicleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tVehicleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tVehicleRef);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tVehicleRef obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tVehicleRef Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tVehicleRef)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tVehicleRef Deserialize(System.IO.Stream s)
        {
            return ((tVehicleRef)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tVehicleRef object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tVehicleRef object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tVehicleRef object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tVehicleRef obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tVehicleRef);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tVehicleRef obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tVehicleRef LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainEngine : ParentContainer
    {

        private bool _shouldSerializetrainMaxAcceleration;

        private bool _shouldSerializetrainMeanAcceleration;

        private System.Nullable<decimal> _trainMeanAcceleration;

        private System.Nullable<decimal> _trainMaxAcceleration;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal trainMeanAcceleration
        {
            get
            {
                if (this._trainMeanAcceleration.HasValue)
                {
                    return this._trainMeanAcceleration.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._trainMeanAcceleration = value;
                _shouldSerializetrainMeanAcceleration = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trainMeanAccelerationSpecified
        {
            get
            {
                return this._trainMeanAcceleration.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trainMeanAcceleration = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal trainMaxAcceleration
        {
            get
            {
                if (this._trainMaxAcceleration.HasValue)
                {
                    return this._trainMaxAcceleration.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._trainMaxAcceleration = value;
                _shouldSerializetrainMaxAcceleration = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trainMaxAccelerationSpecified
        {
            get
            {
                return this._trainMaxAcceleration.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trainMaxAcceleration = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainEngine));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainMeanAcceleration should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainMeanAcceleration()
        {
            if (_shouldSerializetrainMeanAcceleration)
            {
                return true;
            }
            return (_trainMeanAcceleration != default(decimal));
        }

        /// <summary>
        /// Test whether trainMaxAcceleration should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainMaxAcceleration()
        {
            if (_shouldSerializetrainMaxAcceleration)
            {
                return true;
            }
            return (_trainMaxAcceleration != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainEngine object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainEngine object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainEngine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainEngine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainEngine);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainEngine obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTrainEngine Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainEngine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainEngine Deserialize(System.IO.Stream s)
        {
            return ((tTrainEngine)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainEngine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainEngine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainEngine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainEngine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainEngine);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainEngine obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTrainEngine LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainResistance : tCurve
    {

        private bool _shouldSerializetunnelFactor;

        private System.Nullable<decimal> _tunnelFactor;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal tunnelFactor
        {
            get
            {
                if (this._tunnelFactor.HasValue)
                {
                    return this._tunnelFactor.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._tunnelFactor = value;
                _shouldSerializetunnelFactor = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tunnelFactorSpecified
        {
            get
            {
                return this._tunnelFactor.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._tunnelFactor = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainResistance));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether tunnelFactor should be serialized
        /// </summary>
        public virtual bool ShouldSerializetunnelFactor()
        {
            if (_shouldSerializetunnelFactor)
            {
                return true;
            }
            return (_tunnelFactor != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainResistance object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainResistance object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainResistance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainResistance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainResistance);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainResistance obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainResistance Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainResistance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainResistance Deserialize(System.IO.Stream s)
        {
            return ((tTrainResistance)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainResistance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainResistance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainResistance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainResistance obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainResistance);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainResistance obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainResistance LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tEfficiencyCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCurrentLimitation))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCurrentCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tEffortCurve))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tLosses))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainResistance))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCurve : ParentContainer
    {

        private bool _shouldSerializeAny;

        private System.Xml.XmlElement _any;

        private tCurveValueTable _valueTable;

        private static XmlSerializer serializer;

        public tCurve()
        {
            this._valueTable = new tCurveValueTable();
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public System.Xml.XmlElement Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
                _shouldSerializeAny = true;
            }
        }

        public tCurveValueTable valueTable
        {
            get
            {
                return this._valueTable;
            }
            set
            {
                this._valueTable = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCurve));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            if (_shouldSerializeAny)
            {
                return true;
            }
            return (_any != default(System.Xml.XmlElement));
        }

        /// <summary>
        /// Test whether valueTable should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalueTable()
        {
            return (_valueTable != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCurve object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCurve object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCurve object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCurve obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurve);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCurve obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tCurve Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCurve)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCurve Deserialize(System.IO.Stream s)
        {
            return ((tCurve)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCurve object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCurve object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCurve object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCurve obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurve);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCurve obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tCurve LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCurveValueTable : tValueTable
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCurveValueTable));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCurveValueTable object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCurveValueTable object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCurveValueTable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCurveValueTable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurveValueTable);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCurveValueTable obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tCurveValueTable Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCurveValueTable)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCurveValueTable Deserialize(System.IO.Stream s)
        {
            return ((tCurveValueTable)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCurveValueTable object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCurveValueTable object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCurveValueTable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCurveValueTable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurveValueTable);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCurveValueTable obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tCurveValueTable LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tValueTable : ParentContainer
    {

        private List<tValueTableColumnHeader> _columnHeader;

        private List<tValueTableValueLine> _valueLine;

        private string _xValueName;

        private string _xValueUnit;

        private string _yValueName;

        private string _yValueUnit;

        private string _zValueName;

        private string _zValueUnit;

        private static XmlSerializer serializer;

        public tValueTable()
        {
            this._valueLine = new List<tValueTableValueLine>();
            this._columnHeader = new List<tValueTableColumnHeader>();
        }

        [System.Xml.Serialization.XmlElementAttribute("columnHeader")]
        public List<tValueTableColumnHeader> columnHeader
        {
            get
            {
                return this._columnHeader;
            }
            set
            {
                this._columnHeader = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("valueLine")]
        public List<tValueTableValueLine> valueLine
        {
            get
            {
                return this._valueLine;
            }
            set
            {
                this._valueLine = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string xValueName
        {
            get
            {
                return this._xValueName;
            }
            set
            {
                this._xValueName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string xValueUnit
        {
            get
            {
                return this._xValueUnit;
            }
            set
            {
                this._xValueUnit = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string yValueName
        {
            get
            {
                return this._yValueName;
            }
            set
            {
                this._yValueName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string yValueUnit
        {
            get
            {
                return this._yValueUnit;
            }
            set
            {
                this._yValueUnit = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string zValueName
        {
            get
            {
                return this._zValueName;
            }
            set
            {
                this._zValueName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string zValueUnit
        {
            get
            {
                return this._zValueUnit;
            }
            set
            {
                this._zValueUnit = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tValueTable));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether columnHeader should be serialized
        /// </summary>
        public virtual bool ShouldSerializecolumnHeader()
        {
            return columnHeader != null && columnHeader.Count > 0;
        }

        /// <summary>
        /// Test whether valueLine should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalueLine()
        {
            return valueLine != null && valueLine.Count > 0;
        }

        /// <summary>
        /// Test whether xValueName should be serialized
        /// </summary>
        public virtual bool ShouldSerializexValueName()
        {
            return !string.IsNullOrEmpty(xValueName);
        }

        /// <summary>
        /// Test whether xValueUnit should be serialized
        /// </summary>
        public virtual bool ShouldSerializexValueUnit()
        {
            return !string.IsNullOrEmpty(xValueUnit);
        }

        /// <summary>
        /// Test whether yValueName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeyValueName()
        {
            return !string.IsNullOrEmpty(yValueName);
        }

        /// <summary>
        /// Test whether yValueUnit should be serialized
        /// </summary>
        public virtual bool ShouldSerializeyValueUnit()
        {
            return !string.IsNullOrEmpty(yValueUnit);
        }

        /// <summary>
        /// Test whether zValueName should be serialized
        /// </summary>
        public virtual bool ShouldSerializezValueName()
        {
            return !string.IsNullOrEmpty(zValueName);
        }

        /// <summary>
        /// Test whether zValueUnit should be serialized
        /// </summary>
        public virtual bool ShouldSerializezValueUnit()
        {
            return !string.IsNullOrEmpty(zValueUnit);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tValueTable object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tValueTable object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tValueTable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tValueTable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValueTable);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tValueTable obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tValueTable Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tValueTable)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tValueTable Deserialize(System.IO.Stream s)
        {
            return ((tValueTable)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tValueTable object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tValueTable object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tValueTable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tValueTable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValueTable);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tValueTable obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tValueTable LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tValueTableColumnHeader : ParentContainer
    {

        private bool _shouldSerializezValue;

        private decimal _zValue;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal zValue
        {
            get
            {
                return this._zValue;
            }
            set
            {
                this._zValue = value;
                _shouldSerializezValue = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tValueTableColumnHeader));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether zValue should be serialized
        /// </summary>
        public virtual bool ShouldSerializezValue()
        {
            if (_shouldSerializezValue)
            {
                return true;
            }
            return (_zValue != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tValueTableColumnHeader object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tValueTableColumnHeader object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tValueTableColumnHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tValueTableColumnHeader obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValueTableColumnHeader);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tValueTableColumnHeader obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tValueTableColumnHeader Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tValueTableColumnHeader)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tValueTableColumnHeader Deserialize(System.IO.Stream s)
        {
            return ((tValueTableColumnHeader)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tValueTableColumnHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tValueTableColumnHeader object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tValueTableColumnHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tValueTableColumnHeader obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValueTableColumnHeader);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tValueTableColumnHeader obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tValueTableColumnHeader LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tValueTableValueLine : ParentContainer
    {

        private bool _shouldSerializexValue;

        private List<tValueTableValueLineValues> _values;

        private decimal _xValue;

        private static XmlSerializer serializer;

        public tValueTableValueLine()
        {
            this._values = new List<tValueTableValueLineValues>();
        }

        [System.Xml.Serialization.XmlElementAttribute("values")]
        public List<tValueTableValueLineValues> values
        {
            get
            {
                return this._values;
            }
            set
            {
                this._values = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal xValue
        {
            get
            {
                return this._xValue;
            }
            set
            {
                this._xValue = value;
                _shouldSerializexValue = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tValueTableValueLine));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether values should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalues()
        {
            return values != null && values.Count > 0;
        }

        /// <summary>
        /// Test whether xValue should be serialized
        /// </summary>
        public virtual bool ShouldSerializexValue()
        {
            if (_shouldSerializexValue)
            {
                return true;
            }
            return (_xValue != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tValueTableValueLine object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tValueTableValueLine object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tValueTableValueLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tValueTableValueLine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValueTableValueLine);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tValueTableValueLine obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tValueTableValueLine Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tValueTableValueLine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tValueTableValueLine Deserialize(System.IO.Stream s)
        {
            return ((tValueTableValueLine)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tValueTableValueLine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tValueTableValueLine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tValueTableValueLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tValueTableValueLine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValueTableValueLine);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tValueTableValueLine obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tValueTableValueLine LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tValueTableValueLineValues : ParentContainer
    {

        private bool _shouldSerializeyValue;

        private decimal _yValue;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal yValue
        {
            get
            {
                return this._yValue;
            }
            set
            {
                this._yValue = value;
                _shouldSerializeyValue = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tValueTableValueLineValues));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether yValue should be serialized
        /// </summary>
        public virtual bool ShouldSerializeyValue()
        {
            if (_shouldSerializeyValue)
            {
                return true;
            }
            return (_yValue != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tValueTableValueLineValues object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tValueTableValueLineValues object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tValueTableValueLineValues object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tValueTableValueLineValues obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValueTableValueLineValues);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tValueTableValueLineValues obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tValueTableValueLineValues Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tValueTableValueLineValues)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tValueTableValueLineValues Deserialize(System.IO.Stream s)
        {
            return ((tValueTableValueLineValues)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tValueTableValueLineValues object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tValueTableValueLineValues object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tValueTableValueLineValues object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tValueTableValueLineValues obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValueTableValueLineValues);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tValueTableValueLineValues obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tValueTableValueLineValues LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tEfficiencyCurve : tCurve
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tEfficiencyCurve));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tEfficiencyCurve object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tEfficiencyCurve object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tEfficiencyCurve object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tEfficiencyCurve obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEfficiencyCurve);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tEfficiencyCurve obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tEfficiencyCurve Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tEfficiencyCurve)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tEfficiencyCurve Deserialize(System.IO.Stream s)
        {
            return ((tEfficiencyCurve)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tEfficiencyCurve object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tEfficiencyCurve object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tEfficiencyCurve object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tEfficiencyCurve obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEfficiencyCurve);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tEfficiencyCurve obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tEfficiencyCurve LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCurrentLimitation : tCurve
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCurrentLimitation));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCurrentLimitation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCurrentLimitation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCurrentLimitation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCurrentLimitation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurrentLimitation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCurrentLimitation obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tCurrentLimitation Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCurrentLimitation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCurrentLimitation Deserialize(System.IO.Stream s)
        {
            return ((tCurrentLimitation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCurrentLimitation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCurrentLimitation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCurrentLimitation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCurrentLimitation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurrentLimitation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCurrentLimitation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tCurrentLimitation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCurrentCurve : tCurve
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCurrentCurve));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCurrentCurve object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCurrentCurve object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCurrentCurve object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCurrentCurve obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurrentCurve);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCurrentCurve obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tCurrentCurve Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCurrentCurve)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCurrentCurve Deserialize(System.IO.Stream s)
        {
            return ((tCurrentCurve)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCurrentCurve object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCurrentCurve object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCurrentCurve object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCurrentCurve obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurrentCurve);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCurrentCurve obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tCurrentCurve LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tEffortCurve : tCurve
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tEffortCurve));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tEffortCurve object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tEffortCurve object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tEffortCurve object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tEffortCurve obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEffortCurve);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tEffortCurve obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tEffortCurve Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tEffortCurve)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tEffortCurve Deserialize(System.IO.Stream s)
        {
            return ((tEffortCurve)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tEffortCurve object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tEffortCurve object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tEffortCurve object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tEffortCurve obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEffortCurve);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tEffortCurve obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tEffortCurve LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLosses : tCurve
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLosses));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLosses object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLosses object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLosses object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLosses obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLosses);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLosses obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tLosses Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLosses)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLosses Deserialize(System.IO.Stream s)
        {
            return ((tLosses)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLosses object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLosses object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLosses object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLosses obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLosses);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLosses obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tLosses LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eVehicle))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tVehicle : tElementWithIDAndName
    {

        private bool _shouldSerializeonTrainTailOnly;

        private bool _shouldSerializeonTrainHead;

        private bool _shouldSerializeresistanceFactor;

        private bool _shouldSerializeaxleLoad;

        private bool _shouldSerializenettoAdhesionWeight;

        private bool _shouldSerializetareAdhesionWeight;

        private bool _shouldSerializebruttoAdhesionWeight;

        private bool _shouldSerializetareWeight;

        private bool _shouldSerializenettoWeight;

        private bool _shouldSerializebruttoWeight;

        private bool _shouldSerializetowingSpeed;

        private bool _shouldSerializespeed;

        private bool _shouldSerializelength;

        private bool _shouldSerializeadjustableWheelSet;

        private bool _shouldSerializetrackGaugeAlternative;

        private bool _shouldSerializetrackGauge;

        private string _vehicleFamilyRef;

        private string _axleSequence;

        private string _numberDrivenAxles;

        private string _numberNonDrivenAxles;

        private System.Nullable<decimal> _trackGauge;

        private System.Nullable<decimal> _trackGaugeAlternative;

        private System.Nullable<bool> _adjustableWheelSet;

        private System.Nullable<decimal> _length;

        private System.Nullable<decimal> _speed;

        private System.Nullable<decimal> _towingSpeed;

        private System.Nullable<decimal> _bruttoWeight;

        private System.Nullable<decimal> _nettoWeight;

        private System.Nullable<decimal> _tareWeight;

        private System.Nullable<decimal> _bruttoAdhesionWeight;

        private System.Nullable<decimal> _tareAdhesionWeight;

        private System.Nullable<decimal> _nettoAdhesionWeight;

        private System.Nullable<decimal> _axleLoad;

        private System.Nullable<decimal> _resistanceFactor;

        private System.Nullable<bool> _onTrainHead;

        private System.Nullable<bool> _onTrainTailOnly;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string vehicleFamilyRef
        {
            get
            {
                return this._vehicleFamilyRef;
            }
            set
            {
                this._vehicleFamilyRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string axleSequence
        {
            get
            {
                return this._axleSequence;
            }
            set
            {
                this._axleSequence = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string numberDrivenAxles
        {
            get
            {
                return this._numberDrivenAxles;
            }
            set
            {
                this._numberDrivenAxles = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string numberNonDrivenAxles
        {
            get
            {
                return this._numberNonDrivenAxles;
            }
            set
            {
                this._numberNonDrivenAxles = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal trackGauge
        {
            get
            {
                if (this._trackGauge.HasValue)
                {
                    return this._trackGauge.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._trackGauge = value;
                _shouldSerializetrackGauge = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trackGaugeSpecified
        {
            get
            {
                return this._trackGauge.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trackGauge = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal trackGaugeAlternative
        {
            get
            {
                if (this._trackGaugeAlternative.HasValue)
                {
                    return this._trackGaugeAlternative.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._trackGaugeAlternative = value;
                _shouldSerializetrackGaugeAlternative = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trackGaugeAlternativeSpecified
        {
            get
            {
                return this._trackGaugeAlternative.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trackGaugeAlternative = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool adjustableWheelSet
        {
            get
            {
                if (this._adjustableWheelSet.HasValue)
                {
                    return this._adjustableWheelSet.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._adjustableWheelSet = value;
                _shouldSerializeadjustableWheelSet = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool adjustableWheelSetSpecified
        {
            get
            {
                return this._adjustableWheelSet.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._adjustableWheelSet = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal length
        {
            get
            {
                if (this._length.HasValue)
                {
                    return this._length.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._length = value;
                _shouldSerializelength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthSpecified
        {
            get
            {
                return this._length.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._length = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal speed
        {
            get
            {
                if (this._speed.HasValue)
                {
                    return this._speed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._speed = value;
                _shouldSerializespeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool speedSpecified
        {
            get
            {
                return this._speed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._speed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal towingSpeed
        {
            get
            {
                if (this._towingSpeed.HasValue)
                {
                    return this._towingSpeed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._towingSpeed = value;
                _shouldSerializetowingSpeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool towingSpeedSpecified
        {
            get
            {
                return this._towingSpeed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._towingSpeed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal bruttoWeight
        {
            get
            {
                if (this._bruttoWeight.HasValue)
                {
                    return this._bruttoWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._bruttoWeight = value;
                _shouldSerializebruttoWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bruttoWeightSpecified
        {
            get
            {
                return this._bruttoWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._bruttoWeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nettoWeight
        {
            get
            {
                if (this._nettoWeight.HasValue)
                {
                    return this._nettoWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nettoWeight = value;
                _shouldSerializenettoWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nettoWeightSpecified
        {
            get
            {
                return this._nettoWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nettoWeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal tareWeight
        {
            get
            {
                if (this._tareWeight.HasValue)
                {
                    return this._tareWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._tareWeight = value;
                _shouldSerializetareWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tareWeightSpecified
        {
            get
            {
                return this._tareWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._tareWeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal bruttoAdhesionWeight
        {
            get
            {
                if (this._bruttoAdhesionWeight.HasValue)
                {
                    return this._bruttoAdhesionWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._bruttoAdhesionWeight = value;
                _shouldSerializebruttoAdhesionWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bruttoAdhesionWeightSpecified
        {
            get
            {
                return this._bruttoAdhesionWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._bruttoAdhesionWeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal tareAdhesionWeight
        {
            get
            {
                if (this._tareAdhesionWeight.HasValue)
                {
                    return this._tareAdhesionWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._tareAdhesionWeight = value;
                _shouldSerializetareAdhesionWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tareAdhesionWeightSpecified
        {
            get
            {
                return this._tareAdhesionWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._tareAdhesionWeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nettoAdhesionWeight
        {
            get
            {
                if (this._nettoAdhesionWeight.HasValue)
                {
                    return this._nettoAdhesionWeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nettoAdhesionWeight = value;
                _shouldSerializenettoAdhesionWeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nettoAdhesionWeightSpecified
        {
            get
            {
                return this._nettoAdhesionWeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nettoAdhesionWeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal axleLoad
        {
            get
            {
                if (this._axleLoad.HasValue)
                {
                    return this._axleLoad.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._axleLoad = value;
                _shouldSerializeaxleLoad = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool axleLoadSpecified
        {
            get
            {
                return this._axleLoad.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._axleLoad = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal resistanceFactor
        {
            get
            {
                if (this._resistanceFactor.HasValue)
                {
                    return this._resistanceFactor.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._resistanceFactor = value;
                _shouldSerializeresistanceFactor = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resistanceFactorSpecified
        {
            get
            {
                return this._resistanceFactor.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._resistanceFactor = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool onTrainHead
        {
            get
            {
                if (this._onTrainHead.HasValue)
                {
                    return this._onTrainHead.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._onTrainHead = value;
                _shouldSerializeonTrainHead = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool onTrainHeadSpecified
        {
            get
            {
                return this._onTrainHead.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._onTrainHead = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool onTrainTailOnly
        {
            get
            {
                if (this._onTrainTailOnly.HasValue)
                {
                    return this._onTrainTailOnly.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._onTrainTailOnly = value;
                _shouldSerializeonTrainTailOnly = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool onTrainTailOnlySpecified
        {
            get
            {
                return this._onTrainTailOnly.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._onTrainTailOnly = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tVehicle));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackGauge should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackGauge()
        {
            if (_shouldSerializetrackGauge)
            {
                return true;
            }
            return (_trackGauge != default(decimal));
        }

        /// <summary>
        /// Test whether trackGaugeAlternative should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackGaugeAlternative()
        {
            if (_shouldSerializetrackGaugeAlternative)
            {
                return true;
            }
            return (_trackGaugeAlternative != default(decimal));
        }

        /// <summary>
        /// Test whether adjustableWheelSet should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadjustableWheelSet()
        {
            if (_shouldSerializeadjustableWheelSet)
            {
                return true;
            }
            return (_adjustableWheelSet != default(bool));
        }

        /// <summary>
        /// Test whether length should be serialized
        /// </summary>
        public virtual bool ShouldSerializelength()
        {
            if (_shouldSerializelength)
            {
                return true;
            }
            return (_length != default(decimal));
        }

        /// <summary>
        /// Test whether speed should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeed()
        {
            if (_shouldSerializespeed)
            {
                return true;
            }
            return (_speed != default(decimal));
        }

        /// <summary>
        /// Test whether towingSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializetowingSpeed()
        {
            if (_shouldSerializetowingSpeed)
            {
                return true;
            }
            return (_towingSpeed != default(decimal));
        }

        /// <summary>
        /// Test whether bruttoWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializebruttoWeight()
        {
            if (_shouldSerializebruttoWeight)
            {
                return true;
            }
            return (_bruttoWeight != default(decimal));
        }

        /// <summary>
        /// Test whether nettoWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializenettoWeight()
        {
            if (_shouldSerializenettoWeight)
            {
                return true;
            }
            return (_nettoWeight != default(decimal));
        }

        /// <summary>
        /// Test whether tareWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializetareWeight()
        {
            if (_shouldSerializetareWeight)
            {
                return true;
            }
            return (_tareWeight != default(decimal));
        }

        /// <summary>
        /// Test whether bruttoAdhesionWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializebruttoAdhesionWeight()
        {
            if (_shouldSerializebruttoAdhesionWeight)
            {
                return true;
            }
            return (_bruttoAdhesionWeight != default(decimal));
        }

        /// <summary>
        /// Test whether tareAdhesionWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializetareAdhesionWeight()
        {
            if (_shouldSerializetareAdhesionWeight)
            {
                return true;
            }
            return (_tareAdhesionWeight != default(decimal));
        }

        /// <summary>
        /// Test whether nettoAdhesionWeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializenettoAdhesionWeight()
        {
            if (_shouldSerializenettoAdhesionWeight)
            {
                return true;
            }
            return (_nettoAdhesionWeight != default(decimal));
        }

        /// <summary>
        /// Test whether axleLoad should be serialized
        /// </summary>
        public virtual bool ShouldSerializeaxleLoad()
        {
            if (_shouldSerializeaxleLoad)
            {
                return true;
            }
            return (_axleLoad != default(decimal));
        }

        /// <summary>
        /// Test whether resistanceFactor should be serialized
        /// </summary>
        public virtual bool ShouldSerializeresistanceFactor()
        {
            if (_shouldSerializeresistanceFactor)
            {
                return true;
            }
            return (_resistanceFactor != default(decimal));
        }

        /// <summary>
        /// Test whether onTrainHead should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonTrainHead()
        {
            if (_shouldSerializeonTrainHead)
            {
                return true;
            }
            return (_onTrainHead != default(bool));
        }

        /// <summary>
        /// Test whether onTrainTailOnly should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonTrainTailOnly()
        {
            if (_shouldSerializeonTrainTailOnly)
            {
                return true;
            }
            return (_onTrainTailOnly != default(bool));
        }

        /// <summary>
        /// Test whether vehicleFamilyRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleFamilyRef()
        {
            return !string.IsNullOrEmpty(vehicleFamilyRef);
        }

        /// <summary>
        /// Test whether axleSequence should be serialized
        /// </summary>
        public virtual bool ShouldSerializeaxleSequence()
        {
            return !string.IsNullOrEmpty(axleSequence);
        }

        /// <summary>
        /// Test whether numberDrivenAxles should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumberDrivenAxles()
        {
            return !string.IsNullOrEmpty(numberDrivenAxles);
        }

        /// <summary>
        /// Test whether numberNonDrivenAxles should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumberNonDrivenAxles()
        {
            return !string.IsNullOrEmpty(numberNonDrivenAxles);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tVehicle object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tVehicle object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tVehicle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tVehicle obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tVehicle);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tVehicle obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tVehicle Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tVehicle)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tVehicle Deserialize(System.IO.Stream s)
        {
            return ((tVehicle)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tVehicle object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tVehicle object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tVehicle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tVehicle obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tVehicle);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tVehicle obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tVehicle LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eVehicle : tVehicle
    {

        private eClassification _classification;

        private eEngine _engine;

        private eWagon _wagon;

        private eVehicleBrakes _vehicleBrakes;

        private eLoadLimitMatrix _loadLimitMatrix;

        private eCurvingLimitation _curvingLimitation;

        private static XmlSerializer serializer;

        public eVehicle()
        {
            this._curvingLimitation = new eCurvingLimitation();
            this._loadLimitMatrix = new eLoadLimitMatrix();
            this._vehicleBrakes = new eVehicleBrakes();
            this._wagon = new eWagon();
            this._engine = new eEngine();
            this._classification = new eClassification();
        }

        public eClassification classification
        {
            get
            {
                return this._classification;
            }
            set
            {
                this._classification = value;
            }
        }

        public eEngine engine
        {
            get
            {
                return this._engine;
            }
            set
            {
                this._engine = value;
            }
        }

        public eWagon wagon
        {
            get
            {
                return this._wagon;
            }
            set
            {
                this._wagon = value;
            }
        }

        public eVehicleBrakes vehicleBrakes
        {
            get
            {
                return this._vehicleBrakes;
            }
            set
            {
                this._vehicleBrakes = value;
            }
        }

        public eLoadLimitMatrix loadLimitMatrix
        {
            get
            {
                return this._loadLimitMatrix;
            }
            set
            {
                this._loadLimitMatrix = value;
            }
        }

        public eCurvingLimitation curvingLimitation
        {
            get
            {
                return this._curvingLimitation;
            }
            set
            {
                this._curvingLimitation = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eVehicle));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether classification should be serialized
        /// </summary>
        public virtual bool ShouldSerializeclassification()
        {
            return (_classification != null);
        }

        /// <summary>
        /// Test whether engine should be serialized
        /// </summary>
        public virtual bool ShouldSerializeengine()
        {
            return (_engine != null);
        }

        /// <summary>
        /// Test whether wagon should be serialized
        /// </summary>
        public virtual bool ShouldSerializewagon()
        {
            return (_wagon != null);
        }

        /// <summary>
        /// Test whether vehicleBrakes should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleBrakes()
        {
            return (_vehicleBrakes != null);
        }

        /// <summary>
        /// Test whether loadLimitMatrix should be serialized
        /// </summary>
        public virtual bool ShouldSerializeloadLimitMatrix()
        {
            return (_loadLimitMatrix != null);
        }

        /// <summary>
        /// Test whether curvingLimitation should be serialized
        /// </summary>
        public virtual bool ShouldSerializecurvingLimitation()
        {
            return (_curvingLimitation != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eVehicle object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eVehicle object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eVehicle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eVehicle obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eVehicle);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eVehicle obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eVehicle Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eVehicle)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eVehicle Deserialize(System.IO.Stream s)
        {
            return ((eVehicle)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eVehicle object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eVehicle object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eVehicle object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eVehicle obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eVehicle);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eVehicle obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eVehicle LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eClassification : ParentContainer
    {

        private tManufacturer _manufacturer;

        private List<tOperator> _operator;

        private static XmlSerializer serializer;

        public eClassification()
        {
            this._operator = new List<tOperator>();
            this._manufacturer = new tManufacturer();
        }

        public tManufacturer manufacturer
        {
            get
            {
                return this._manufacturer;
            }
            set
            {
                this._manufacturer = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("operator")]
        public List<tOperator> @operator
        {
            get
            {
                return this._operator;
            }
            set
            {
                this._operator = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eClassification));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether operator should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperator()
        {
            return @operator != null && @operator.Count > 0;
        }

        /// <summary>
        /// Test whether manufacturer should be serialized
        /// </summary>
        public virtual bool ShouldSerializemanufacturer()
        {
            return (_manufacturer != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eClassification object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eClassification object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eClassification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eClassification obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eClassification);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eClassification obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eClassification Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eClassification)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eClassification Deserialize(System.IO.Stream s)
        {
            return ((eClassification)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eClassification object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eClassification object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eClassification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eClassification obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eClassification);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eClassification obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eClassification LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tManufacturer : ParentContainer
    {

        private string _manufacturerName;

        private string _vehicleManufacturerRef;

        private string _manufacturerType;

        private string _serialNumber;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string manufacturerName
        {
            get
            {
                return this._manufacturerName;
            }
            set
            {
                this._manufacturerName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string vehicleManufacturerRef
        {
            get
            {
                return this._vehicleManufacturerRef;
            }
            set
            {
                this._vehicleManufacturerRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string manufacturerType
        {
            get
            {
                return this._manufacturerType;
            }
            set
            {
                this._manufacturerType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string serialNumber
        {
            get
            {
                return this._serialNumber;
            }
            set
            {
                this._serialNumber = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tManufacturer));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether manufacturerName should be serialized
        /// </summary>
        public virtual bool ShouldSerializemanufacturerName()
        {
            return !string.IsNullOrEmpty(manufacturerName);
        }

        /// <summary>
        /// Test whether vehicleManufacturerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleManufacturerRef()
        {
            return !string.IsNullOrEmpty(vehicleManufacturerRef);
        }

        /// <summary>
        /// Test whether manufacturerType should be serialized
        /// </summary>
        public virtual bool ShouldSerializemanufacturerType()
        {
            return !string.IsNullOrEmpty(manufacturerType);
        }

        /// <summary>
        /// Test whether serialNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializeserialNumber()
        {
            return !string.IsNullOrEmpty(serialNumber);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tManufacturer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tManufacturer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tManufacturer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tManufacturer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tManufacturer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tManufacturer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tManufacturer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tManufacturer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tManufacturer Deserialize(System.IO.Stream s)
        {
            return ((tManufacturer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tManufacturer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tManufacturer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tManufacturer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tManufacturer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tManufacturer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tManufacturer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tManufacturer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperator : ParentContainer
    {

        private bool _shouldSerializeendDate;

        private bool _shouldSerializestartDate;

        private string _operatorName;

        private string _vehicleOperatorRef;

        private string _operatorClass;

        private System.Nullable<System.DateTime> _startDate;

        private System.Nullable<System.DateTime> _endDate;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string operatorName
        {
            get
            {
                return this._operatorName;
            }
            set
            {
                this._operatorName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string vehicleOperatorRef
        {
            get
            {
                return this._vehicleOperatorRef;
            }
            set
            {
                this._vehicleOperatorRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string operatorClass
        {
            get
            {
                return this._operatorClass;
            }
            set
            {
                this._operatorClass = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime startDate
        {
            get
            {
                if (this._startDate.HasValue)
                {
                    return this._startDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._startDate = value;
                _shouldSerializestartDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startDateSpecified
        {
            get
            {
                return this._startDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._startDate = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "date")]
        public System.DateTime endDate
        {
            get
            {
                if (this._endDate.HasValue)
                {
                    return this._endDate.Value;
                }
                else
                {
                    return default(System.DateTime);
                }
            }
            set
            {
                this._endDate = value;
                _shouldSerializeendDate = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool endDateSpecified
        {
            get
            {
                return this._endDate.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._endDate = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperator));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether startDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializestartDate()
        {
            if (_shouldSerializestartDate)
            {
                return true;
            }
            return (_startDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether endDate should be serialized
        /// </summary>
        public virtual bool ShouldSerializeendDate()
        {
            if (_shouldSerializeendDate)
            {
                return true;
            }
            return (_endDate != default(System.DateTime));
        }

        /// <summary>
        /// Test whether operatorName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatorName()
        {
            return !string.IsNullOrEmpty(operatorName);
        }

        /// <summary>
        /// Test whether vehicleOperatorRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleOperatorRef()
        {
            return !string.IsNullOrEmpty(vehicleOperatorRef);
        }

        /// <summary>
        /// Test whether operatorClass should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatorClass()
        {
            return !string.IsNullOrEmpty(operatorClass);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperator object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperator object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperator);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperator obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOperator Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperator)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperator Deserialize(System.IO.Stream s)
        {
            return ((tOperator)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperator object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperator object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperator);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperator obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOperator LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eEngine : tEngine
    {

        private List<ePropulsion> _propulsion;

        private List<ePantograph> _pantograph;

        private List<eStorage> _energyStorage;

        private eMonitoring _monitoring;

        private static XmlSerializer serializer;

        public eEngine()
        {
            this._monitoring = new eMonitoring();
            this._energyStorage = new List<eStorage>();
            this._pantograph = new List<ePantograph>();
            this._propulsion = new List<ePropulsion>();
        }

        [System.Xml.Serialization.XmlElementAttribute("propulsion")]
        public List<ePropulsion> propulsion
        {
            get
            {
                return this._propulsion;
            }
            set
            {
                this._propulsion = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("pantograph")]
        public List<ePantograph> pantograph
        {
            get
            {
                return this._pantograph;
            }
            set
            {
                this._pantograph = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("energyStorage")]
        public List<eStorage> energyStorage
        {
            get
            {
                return this._energyStorage;
            }
            set
            {
                this._energyStorage = value;
            }
        }

        public eMonitoring monitoring
        {
            get
            {
                return this._monitoring;
            }
            set
            {
                this._monitoring = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eEngine));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether propulsion should be serialized
        /// </summary>
        public virtual bool ShouldSerializepropulsion()
        {
            return propulsion != null && propulsion.Count > 0;
        }

        /// <summary>
        /// Test whether pantograph should be serialized
        /// </summary>
        public virtual bool ShouldSerializepantograph()
        {
            return pantograph != null && pantograph.Count > 0;
        }

        /// <summary>
        /// Test whether energyStorage should be serialized
        /// </summary>
        public virtual bool ShouldSerializeenergyStorage()
        {
            return energyStorage != null && energyStorage.Count > 0;
        }

        /// <summary>
        /// Test whether monitoring should be serialized
        /// </summary>
        public virtual bool ShouldSerializemonitoring()
        {
            return (_monitoring != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eEngine object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eEngine object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eEngine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eEngine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eEngine);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eEngine obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eEngine Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eEngine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eEngine Deserialize(System.IO.Stream s)
        {
            return ((eEngine)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eEngine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eEngine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eEngine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eEngine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eEngine);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eEngine obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eEngine LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class ePropulsion : tPropulsion
    {

        private eTransformer _transformer;

        private eFourQuadrantChopper _fourQuadrantChopper;

        private tLink _link;

        private eTractionInverter _tractionInverter;

        private eTractionMotor _tractionMotor;

        private tDieselEngine _diesel;

        private eGear _gear;

        private List<eAuxiliarySupply> _auxiliarySupply;

        private tEffortCurve _tractiveEffort;

        private tEffortCurve _brakeEffort;

        private tCurrentCurve _tractiveCurrent;

        private tCurrentCurve _brakeCurrent;

        private tCurrentLimitation _tractiveCurrentLimitation;

        private tCurrentLimitation _brakeCurrentLimitation;

        private tEfficiencyCurve _tractiveVehicleEfficiency;

        private tEfficiencyCurve _brakeVehicleEfficiency;

        private tRackTractionType _rackTraction1;

        private static XmlSerializer serializer;

        public ePropulsion()
        {
            this._rackTraction1 = new tRackTractionType();
            this._brakeVehicleEfficiency = new tEfficiencyCurve();
            this._tractiveVehicleEfficiency = new tEfficiencyCurve();
            this._brakeCurrentLimitation = new tCurrentLimitation();
            this._tractiveCurrentLimitation = new tCurrentLimitation();
            this._brakeCurrent = new tCurrentCurve();
            this._tractiveCurrent = new tCurrentCurve();
            this._brakeEffort = new tEffortCurve();
            this._tractiveEffort = new tEffortCurve();
            this._auxiliarySupply = new List<eAuxiliarySupply>();
            this._gear = new eGear();
            this._diesel = new tDieselEngine();
            this._tractionMotor = new eTractionMotor();
            this._tractionInverter = new eTractionInverter();
            this._link = new tLink();
            this._fourQuadrantChopper = new eFourQuadrantChopper();
            this._transformer = new eTransformer();
        }

        public eTransformer transformer
        {
            get
            {
                return this._transformer;
            }
            set
            {
                this._transformer = value;
            }
        }

        public eFourQuadrantChopper fourQuadrantChopper
        {
            get
            {
                return this._fourQuadrantChopper;
            }
            set
            {
                this._fourQuadrantChopper = value;
            }
        }

        public tLink link
        {
            get
            {
                return this._link;
            }
            set
            {
                this._link = value;
            }
        }

        public eTractionInverter tractionInverter
        {
            get
            {
                return this._tractionInverter;
            }
            set
            {
                this._tractionInverter = value;
            }
        }

        public eTractionMotor tractionMotor
        {
            get
            {
                return this._tractionMotor;
            }
            set
            {
                this._tractionMotor = value;
            }
        }

        public tDieselEngine diesel
        {
            get
            {
                return this._diesel;
            }
            set
            {
                this._diesel = value;
            }
        }

        public eGear gear
        {
            get
            {
                return this._gear;
            }
            set
            {
                this._gear = value;
            }
        }

        public List<eAuxiliarySupply> auxiliarySupply
        {
            get
            {
                return this._auxiliarySupply;
            }
            set
            {
                this._auxiliarySupply = value;
            }
        }

        public tEffortCurve tractiveEffort
        {
            get
            {
                return this._tractiveEffort;
            }
            set
            {
                this._tractiveEffort = value;
            }
        }

        public tEffortCurve brakeEffort
        {
            get
            {
                return this._brakeEffort;
            }
            set
            {
                this._brakeEffort = value;
            }
        }

        public tCurrentCurve tractiveCurrent
        {
            get
            {
                return this._tractiveCurrent;
            }
            set
            {
                this._tractiveCurrent = value;
            }
        }

        public tCurrentCurve brakeCurrent
        {
            get
            {
                return this._brakeCurrent;
            }
            set
            {
                this._brakeCurrent = value;
            }
        }

        public tCurrentLimitation tractiveCurrentLimitation
        {
            get
            {
                return this._tractiveCurrentLimitation;
            }
            set
            {
                this._tractiveCurrentLimitation = value;
            }
        }

        public tCurrentLimitation brakeCurrentLimitation
        {
            get
            {
                return this._brakeCurrentLimitation;
            }
            set
            {
                this._brakeCurrentLimitation = value;
            }
        }

        public tEfficiencyCurve tractiveVehicleEfficiency
        {
            get
            {
                return this._tractiveVehicleEfficiency;
            }
            set
            {
                this._tractiveVehicleEfficiency = value;
            }
        }

        public tEfficiencyCurve brakeVehicleEfficiency
        {
            get
            {
                return this._brakeVehicleEfficiency;
            }
            set
            {
                this._brakeVehicleEfficiency = value;
            }
        }

        public tRackTractionType rackTraction1
        {
            get
            {
                return this._rackTraction1;
            }
            set
            {
                this._rackTraction1 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ePropulsion));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether auxiliarySupply should be serialized
        /// </summary>
        public virtual bool ShouldSerializeauxiliarySupply()
        {
            return auxiliarySupply != null && auxiliarySupply.Count > 0;
        }

        /// <summary>
        /// Test whether transformer should be serialized
        /// </summary>
        public virtual bool ShouldSerializetransformer()
        {
            return (_transformer != null);
        }

        /// <summary>
        /// Test whether fourQuadrantChopper should be serialized
        /// </summary>
        public virtual bool ShouldSerializefourQuadrantChopper()
        {
            return (_fourQuadrantChopper != null);
        }

        /// <summary>
        /// Test whether link should be serialized
        /// </summary>
        public virtual bool ShouldSerializelink()
        {
            return (_link != null);
        }

        /// <summary>
        /// Test whether tractionInverter should be serialized
        /// </summary>
        public virtual bool ShouldSerializetractionInverter()
        {
            return (_tractionInverter != null);
        }

        /// <summary>
        /// Test whether tractionMotor should be serialized
        /// </summary>
        public virtual bool ShouldSerializetractionMotor()
        {
            return (_tractionMotor != null);
        }

        /// <summary>
        /// Test whether diesel should be serialized
        /// </summary>
        public virtual bool ShouldSerializediesel()
        {
            return (_diesel != null);
        }

        /// <summary>
        /// Test whether gear should be serialized
        /// </summary>
        public virtual bool ShouldSerializegear()
        {
            return (_gear != null);
        }

        /// <summary>
        /// Test whether tractiveEffort should be serialized
        /// </summary>
        public virtual bool ShouldSerializetractiveEffort()
        {
            return (_tractiveEffort != null);
        }

        /// <summary>
        /// Test whether brakeEffort should be serialized
        /// </summary>
        public virtual bool ShouldSerializebrakeEffort()
        {
            return (_brakeEffort != null);
        }

        /// <summary>
        /// Test whether tractiveCurrent should be serialized
        /// </summary>
        public virtual bool ShouldSerializetractiveCurrent()
        {
            return (_tractiveCurrent != null);
        }

        /// <summary>
        /// Test whether brakeCurrent should be serialized
        /// </summary>
        public virtual bool ShouldSerializebrakeCurrent()
        {
            return (_brakeCurrent != null);
        }

        /// <summary>
        /// Test whether tractiveCurrentLimitation should be serialized
        /// </summary>
        public virtual bool ShouldSerializetractiveCurrentLimitation()
        {
            return (_tractiveCurrentLimitation != null);
        }

        /// <summary>
        /// Test whether brakeCurrentLimitation should be serialized
        /// </summary>
        public virtual bool ShouldSerializebrakeCurrentLimitation()
        {
            return (_brakeCurrentLimitation != null);
        }

        /// <summary>
        /// Test whether tractiveVehicleEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializetractiveVehicleEfficiency()
        {
            return (_tractiveVehicleEfficiency != null);
        }

        /// <summary>
        /// Test whether brakeVehicleEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializebrakeVehicleEfficiency()
        {
            return (_brakeVehicleEfficiency != null);
        }

        /// <summary>
        /// Test whether rackTraction1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializerackTraction1()
        {
            return (_rackTraction1 != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ePropulsion object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ePropulsion object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ePropulsion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ePropulsion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePropulsion);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ePropulsion obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static ePropulsion Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ePropulsion)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ePropulsion Deserialize(System.IO.Stream s)
        {
            return ((ePropulsion)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ePropulsion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ePropulsion object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ePropulsion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ePropulsion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePropulsion);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ePropulsion obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static ePropulsion LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTransformer : tTransformer
    {

        private List<tWinding> _winding;

        private tEfficiencyCurve _efficiency;

        private static XmlSerializer serializer;

        public eTransformer()
        {
            this._efficiency = new tEfficiencyCurve();
            this._winding = new List<tWinding>();
        }

        [System.Xml.Serialization.XmlElementAttribute("winding")]
        public List<tWinding> winding
        {
            get
            {
                return this._winding;
            }
            set
            {
                this._winding = value;
            }
        }

        public tEfficiencyCurve efficiency
        {
            get
            {
                return this._efficiency;
            }
            set
            {
                this._efficiency = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTransformer));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether winding should be serialized
        /// </summary>
        public virtual bool ShouldSerializewinding()
        {
            return winding != null && winding.Count > 0;
        }

        /// <summary>
        /// Test whether efficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializeefficiency()
        {
            return (_efficiency != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTransformer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTransformer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTransformer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTransformer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTransformer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTransformer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTransformer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTransformer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTransformer Deserialize(System.IO.Stream s)
        {
            return ((eTransformer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTransformer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTransformer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTransformer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTransformer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTransformer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTransformer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTransformer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tWinding : ParentContainer
    {

        private bool _shouldSerializesecondaryLeakageInductance;

        private bool _shouldSerializeprimaryLeakageInductance;

        private bool _shouldSerializesecondaryResistance;

        private bool _shouldSerializeprimaryResistance;

        private bool _shouldSerializetransformationRatio;

        private bool _shouldSerializenominalCurrent;

        private bool _shouldSerializenominalVoltage;

        private string _assemblyName;

        private System.Nullable<decimal> _nominalVoltage;

        private System.Nullable<decimal> _nominalCurrent;

        private System.Nullable<decimal> _transformationRatio;

        private System.Nullable<decimal> _primaryResistance;

        private System.Nullable<decimal> _secondaryResistance;

        private System.Nullable<decimal> _primaryLeakageInductance;

        private System.Nullable<decimal> _secondaryLeakageInductance;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string assemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalVoltage
        {
            get
            {
                if (this._nominalVoltage.HasValue)
                {
                    return this._nominalVoltage.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalVoltage = value;
                _shouldSerializenominalVoltage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalVoltageSpecified
        {
            get
            {
                return this._nominalVoltage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalVoltage = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalCurrent
        {
            get
            {
                if (this._nominalCurrent.HasValue)
                {
                    return this._nominalCurrent.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalCurrent = value;
                _shouldSerializenominalCurrent = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalCurrentSpecified
        {
            get
            {
                return this._nominalCurrent.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalCurrent = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal transformationRatio
        {
            get
            {
                if (this._transformationRatio.HasValue)
                {
                    return this._transformationRatio.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._transformationRatio = value;
                _shouldSerializetransformationRatio = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool transformationRatioSpecified
        {
            get
            {
                return this._transformationRatio.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._transformationRatio = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal primaryResistance
        {
            get
            {
                if (this._primaryResistance.HasValue)
                {
                    return this._primaryResistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._primaryResistance = value;
                _shouldSerializeprimaryResistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool primaryResistanceSpecified
        {
            get
            {
                return this._primaryResistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._primaryResistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal secondaryResistance
        {
            get
            {
                if (this._secondaryResistance.HasValue)
                {
                    return this._secondaryResistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._secondaryResistance = value;
                _shouldSerializesecondaryResistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool secondaryResistanceSpecified
        {
            get
            {
                return this._secondaryResistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._secondaryResistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal primaryLeakageInductance
        {
            get
            {
                if (this._primaryLeakageInductance.HasValue)
                {
                    return this._primaryLeakageInductance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._primaryLeakageInductance = value;
                _shouldSerializeprimaryLeakageInductance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool primaryLeakageInductanceSpecified
        {
            get
            {
                return this._primaryLeakageInductance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._primaryLeakageInductance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal secondaryLeakageInductance
        {
            get
            {
                if (this._secondaryLeakageInductance.HasValue)
                {
                    return this._secondaryLeakageInductance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._secondaryLeakageInductance = value;
                _shouldSerializesecondaryLeakageInductance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool secondaryLeakageInductanceSpecified
        {
            get
            {
                return this._secondaryLeakageInductance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._secondaryLeakageInductance = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tWinding));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether nominalVoltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalVoltage()
        {
            if (_shouldSerializenominalVoltage)
            {
                return true;
            }
            return (_nominalVoltage != default(decimal));
        }

        /// <summary>
        /// Test whether nominalCurrent should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalCurrent()
        {
            if (_shouldSerializenominalCurrent)
            {
                return true;
            }
            return (_nominalCurrent != default(decimal));
        }

        /// <summary>
        /// Test whether transformationRatio should be serialized
        /// </summary>
        public virtual bool ShouldSerializetransformationRatio()
        {
            if (_shouldSerializetransformationRatio)
            {
                return true;
            }
            return (_transformationRatio != default(decimal));
        }

        /// <summary>
        /// Test whether primaryResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprimaryResistance()
        {
            if (_shouldSerializeprimaryResistance)
            {
                return true;
            }
            return (_primaryResistance != default(decimal));
        }

        /// <summary>
        /// Test whether secondaryResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializesecondaryResistance()
        {
            if (_shouldSerializesecondaryResistance)
            {
                return true;
            }
            return (_secondaryResistance != default(decimal));
        }

        /// <summary>
        /// Test whether primaryLeakageInductance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprimaryLeakageInductance()
        {
            if (_shouldSerializeprimaryLeakageInductance)
            {
                return true;
            }
            return (_primaryLeakageInductance != default(decimal));
        }

        /// <summary>
        /// Test whether secondaryLeakageInductance should be serialized
        /// </summary>
        public virtual bool ShouldSerializesecondaryLeakageInductance()
        {
            if (_shouldSerializesecondaryLeakageInductance)
            {
                return true;
            }
            return (_secondaryLeakageInductance != default(decimal));
        }

        /// <summary>
        /// Test whether assemblyName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeassemblyName()
        {
            return !string.IsNullOrEmpty(assemblyName);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tWinding object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tWinding object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tWinding object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tWinding obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tWinding);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tWinding obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tWinding Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tWinding)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tWinding Deserialize(System.IO.Stream s)
        {
            return ((tWinding)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tWinding object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tWinding object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tWinding object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tWinding obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tWinding);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tWinding obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tWinding LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTransformer))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTransformer : ParentContainer
    {

        private bool _shouldSerializemeanEfficiency;

        private bool _shouldSerializemainInductance;

        private bool _shouldSerializeadditionalResistance;

        private bool _shouldSerializeferrumResistance;

        private string _count;

        private string _assemblyName;

        private System.Nullable<decimal> _ferrumResistance;

        private System.Nullable<decimal> _additionalResistance;

        private System.Nullable<decimal> _mainInductance;

        private System.Nullable<decimal> _meanEfficiency;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string assemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ferrumResistance
        {
            get
            {
                if (this._ferrumResistance.HasValue)
                {
                    return this._ferrumResistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._ferrumResistance = value;
                _shouldSerializeferrumResistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ferrumResistanceSpecified
        {
            get
            {
                return this._ferrumResistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._ferrumResistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal additionalResistance
        {
            get
            {
                if (this._additionalResistance.HasValue)
                {
                    return this._additionalResistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._additionalResistance = value;
                _shouldSerializeadditionalResistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool additionalResistanceSpecified
        {
            get
            {
                return this._additionalResistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._additionalResistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal mainInductance
        {
            get
            {
                if (this._mainInductance.HasValue)
                {
                    return this._mainInductance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._mainInductance = value;
                _shouldSerializemainInductance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mainInductanceSpecified
        {
            get
            {
                return this._mainInductance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._mainInductance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanEfficiency
        {
            get
            {
                if (this._meanEfficiency.HasValue)
                {
                    return this._meanEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanEfficiency = value;
                _shouldSerializemeanEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanEfficiencySpecified
        {
            get
            {
                return this._meanEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanEfficiency = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTransformer));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ferrumResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeferrumResistance()
        {
            if (_shouldSerializeferrumResistance)
            {
                return true;
            }
            return (_ferrumResistance != default(decimal));
        }

        /// <summary>
        /// Test whether additionalResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalResistance()
        {
            if (_shouldSerializeadditionalResistance)
            {
                return true;
            }
            return (_additionalResistance != default(decimal));
        }

        /// <summary>
        /// Test whether mainInductance should be serialized
        /// </summary>
        public virtual bool ShouldSerializemainInductance()
        {
            if (_shouldSerializemainInductance)
            {
                return true;
            }
            return (_mainInductance != default(decimal));
        }

        /// <summary>
        /// Test whether meanEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanEfficiency()
        {
            if (_shouldSerializemeanEfficiency)
            {
                return true;
            }
            return (_meanEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether assemblyName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeassemblyName()
        {
            return !string.IsNullOrEmpty(assemblyName);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTransformer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTransformer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTransformer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTransformer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTransformer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTransformer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTransformer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTransformer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTransformer Deserialize(System.IO.Stream s)
        {
            return ((tTransformer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTransformer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTransformer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTransformer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTransformer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTransformer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTransformer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTransformer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eFourQuadrantChopper : tFourQuadrantChopper
    {

        private tEfficiencyCurve _efficiency;

        private tCurve _phi;

        private static XmlSerializer serializer;

        public eFourQuadrantChopper()
        {
            this._phi = new tCurve();
            this._efficiency = new tEfficiencyCurve();
        }

        public tEfficiencyCurve efficiency
        {
            get
            {
                return this._efficiency;
            }
            set
            {
                this._efficiency = value;
            }
        }

        public tCurve phi
        {
            get
            {
                return this._phi;
            }
            set
            {
                this._phi = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eFourQuadrantChopper));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether efficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializeefficiency()
        {
            return (_efficiency != null);
        }

        /// <summary>
        /// Test whether phi should be serialized
        /// </summary>
        public virtual bool ShouldSerializephi()
        {
            return (_phi != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eFourQuadrantChopper object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eFourQuadrantChopper object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eFourQuadrantChopper object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eFourQuadrantChopper obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eFourQuadrantChopper);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eFourQuadrantChopper obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eFourQuadrantChopper Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eFourQuadrantChopper)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eFourQuadrantChopper Deserialize(System.IO.Stream s)
        {
            return ((eFourQuadrantChopper)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eFourQuadrantChopper object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eFourQuadrantChopper object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eFourQuadrantChopper object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eFourQuadrantChopper obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eFourQuadrantChopper);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eFourQuadrantChopper obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eFourQuadrantChopper LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eFourQuadrantChopper))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tFourQuadrantChopper : ParentContainer
    {

        private bool _shouldSerializemeanEfficiency;

        private bool _shouldSerializemeanPhiRegeneration;

        private bool _shouldSerializemeanPhi;

        private string _count;

        private string _assemblyName;

        private System.Nullable<decimal> _meanPhi;

        private System.Nullable<decimal> _meanPhiRegeneration;

        private System.Nullable<decimal> _meanEfficiency;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string assemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanPhi
        {
            get
            {
                if (this._meanPhi.HasValue)
                {
                    return this._meanPhi.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanPhi = value;
                _shouldSerializemeanPhi = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanPhiSpecified
        {
            get
            {
                return this._meanPhi.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanPhi = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanPhiRegeneration
        {
            get
            {
                if (this._meanPhiRegeneration.HasValue)
                {
                    return this._meanPhiRegeneration.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanPhiRegeneration = value;
                _shouldSerializemeanPhiRegeneration = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanPhiRegenerationSpecified
        {
            get
            {
                return this._meanPhiRegeneration.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanPhiRegeneration = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanEfficiency
        {
            get
            {
                if (this._meanEfficiency.HasValue)
                {
                    return this._meanEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanEfficiency = value;
                _shouldSerializemeanEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanEfficiencySpecified
        {
            get
            {
                return this._meanEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanEfficiency = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tFourQuadrantChopper));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether meanPhi should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanPhi()
        {
            if (_shouldSerializemeanPhi)
            {
                return true;
            }
            return (_meanPhi != default(decimal));
        }

        /// <summary>
        /// Test whether meanPhiRegeneration should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanPhiRegeneration()
        {
            if (_shouldSerializemeanPhiRegeneration)
            {
                return true;
            }
            return (_meanPhiRegeneration != default(decimal));
        }

        /// <summary>
        /// Test whether meanEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanEfficiency()
        {
            if (_shouldSerializemeanEfficiency)
            {
                return true;
            }
            return (_meanEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether assemblyName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeassemblyName()
        {
            return !string.IsNullOrEmpty(assemblyName);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tFourQuadrantChopper object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tFourQuadrantChopper object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tFourQuadrantChopper object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tFourQuadrantChopper obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tFourQuadrantChopper);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tFourQuadrantChopper obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tFourQuadrantChopper Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tFourQuadrantChopper)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tFourQuadrantChopper Deserialize(System.IO.Stream s)
        {
            return ((tFourQuadrantChopper)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tFourQuadrantChopper object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tFourQuadrantChopper object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tFourQuadrantChopper object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tFourQuadrantChopper obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tFourQuadrantChopper);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tFourQuadrantChopper obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tFourQuadrantChopper LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLink : ParentContainer
    {

        private bool _shouldSerializenominalCurrent;

        private bool _shouldSerializenominalVoltage;

        private decimal _nominalVoltage;

        private decimal _nominalCurrent;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalVoltage
        {
            get
            {
                return this._nominalVoltage;
            }
            set
            {
                this._nominalVoltage = value;
                _shouldSerializenominalVoltage = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalCurrent
        {
            get
            {
                return this._nominalCurrent;
            }
            set
            {
                this._nominalCurrent = value;
                _shouldSerializenominalCurrent = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLink));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether nominalVoltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalVoltage()
        {
            if (_shouldSerializenominalVoltage)
            {
                return true;
            }
            return (_nominalVoltage != default(decimal));
        }

        /// <summary>
        /// Test whether nominalCurrent should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalCurrent()
        {
            if (_shouldSerializenominalCurrent)
            {
                return true;
            }
            return (_nominalCurrent != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLink object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLink object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLink object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLink obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLink);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLink obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tLink Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLink)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLink Deserialize(System.IO.Stream s)
        {
            return ((tLink)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLink object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLink object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLink object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLink obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLink);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLink obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tLink LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTractionInverter : tTractionInverter
    {

        private tEfficiencyCurve _efficiency;

        private ePulsePattern _pulsePattern;

        private static XmlSerializer serializer;

        public eTractionInverter()
        {
            this._pulsePattern = new ePulsePattern();
            this._efficiency = new tEfficiencyCurve();
        }

        public tEfficiencyCurve efficiency
        {
            get
            {
                return this._efficiency;
            }
            set
            {
                this._efficiency = value;
            }
        }

        public ePulsePattern pulsePattern
        {
            get
            {
                return this._pulsePattern;
            }
            set
            {
                this._pulsePattern = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTractionInverter));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether efficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializeefficiency()
        {
            return (_efficiency != null);
        }

        /// <summary>
        /// Test whether pulsePattern should be serialized
        /// </summary>
        public virtual bool ShouldSerializepulsePattern()
        {
            return (_pulsePattern != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTractionInverter object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTractionInverter object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTractionInverter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTractionInverter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTractionInverter);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTractionInverter obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTractionInverter Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTractionInverter)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTractionInverter Deserialize(System.IO.Stream s)
        {
            return ((eTractionInverter)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTractionInverter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTractionInverter object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTractionInverter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTractionInverter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTractionInverter);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTractionInverter obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTractionInverter LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class ePulsePattern : ParentContainer
    {

        private ePulsePatternValueTable _valueTable;

        private static XmlSerializer serializer;

        public ePulsePattern()
        {
            this._valueTable = new ePulsePatternValueTable();
        }

        public ePulsePatternValueTable valueTable
        {
            get
            {
                return this._valueTable;
            }
            set
            {
                this._valueTable = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ePulsePattern));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether valueTable should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalueTable()
        {
            return (_valueTable != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ePulsePattern object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ePulsePattern object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ePulsePattern object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ePulsePattern obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePulsePattern);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ePulsePattern obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ePulsePattern Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ePulsePattern)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ePulsePattern Deserialize(System.IO.Stream s)
        {
            return ((ePulsePattern)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ePulsePattern object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ePulsePattern object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ePulsePattern object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ePulsePattern obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePulsePattern);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ePulsePattern obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ePulsePattern LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    public partial class ePulsePatternValueTable : tValueTable
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ePulsePatternValueTable));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ePulsePatternValueTable object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ePulsePatternValueTable object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ePulsePatternValueTable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ePulsePatternValueTable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePulsePatternValueTable);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ePulsePatternValueTable obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static ePulsePatternValueTable Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ePulsePatternValueTable)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ePulsePatternValueTable Deserialize(System.IO.Stream s)
        {
            return ((ePulsePatternValueTable)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ePulsePatternValueTable object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ePulsePatternValueTable object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ePulsePatternValueTable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ePulsePatternValueTable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePulsePatternValueTable);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ePulsePatternValueTable obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static ePulsePatternValueTable LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTractionInverter))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTractionInverter : ParentContainer
    {

        private bool _shouldSerializemeanEfficiency;

        private string _count;

        private string _assemblyName;

        private System.Nullable<decimal> _meanEfficiency;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string assemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanEfficiency
        {
            get
            {
                if (this._meanEfficiency.HasValue)
                {
                    return this._meanEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanEfficiency = value;
                _shouldSerializemeanEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanEfficiencySpecified
        {
            get
            {
                return this._meanEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanEfficiency = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTractionInverter));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether meanEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanEfficiency()
        {
            if (_shouldSerializemeanEfficiency)
            {
                return true;
            }
            return (_meanEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether assemblyName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeassemblyName()
        {
            return !string.IsNullOrEmpty(assemblyName);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTractionInverter object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTractionInverter object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTractionInverter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTractionInverter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTractionInverter);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTractionInverter obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTractionInverter Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTractionInverter)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTractionInverter Deserialize(System.IO.Stream s)
        {
            return ((tTractionInverter)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTractionInverter object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTractionInverter object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTractionInverter object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTractionInverter obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTractionInverter);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTractionInverter obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTractionInverter LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTractionMotor : tTractionMotor
    {

        private tEfficiencyCurve _efficiency;

        private tLosses _mechanicalLosses;

        private static XmlSerializer serializer;

        public eTractionMotor()
        {
            this._mechanicalLosses = new tLosses();
            this._efficiency = new tEfficiencyCurve();
        }

        public tEfficiencyCurve efficiency
        {
            get
            {
                return this._efficiency;
            }
            set
            {
                this._efficiency = value;
            }
        }

        public tLosses mechanicalLosses
        {
            get
            {
                return this._mechanicalLosses;
            }
            set
            {
                this._mechanicalLosses = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTractionMotor));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether efficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializeefficiency()
        {
            return (_efficiency != null);
        }

        /// <summary>
        /// Test whether mechanicalLosses should be serialized
        /// </summary>
        public virtual bool ShouldSerializemechanicalLosses()
        {
            return (_mechanicalLosses != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTractionMotor object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTractionMotor object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTractionMotor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTractionMotor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTractionMotor);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTractionMotor obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTractionMotor Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTractionMotor)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTractionMotor Deserialize(System.IO.Stream s)
        {
            return ((eTractionMotor)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTractionMotor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTractionMotor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTractionMotor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTractionMotor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTractionMotor);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTractionMotor obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTractionMotor LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTractionMotor))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTractionMotor : ParentContainer
    {

        private bool _shouldSerializemeanEfficiency;

        private bool _shouldSerializerotorLeakageInductance;

        private bool _shouldSerializestatorLeakageInductance;

        private bool _shouldSerializemainInductance;

        private bool _shouldSerializeadditionalResistance;

        private bool _shouldSerializeferrumResistance;

        private bool _shouldSerializerotorResistance;

        private bool _shouldSerializestatorResistance;

        private bool _shouldSerializenominalPhi;

        private bool _shouldSerializenominalFlux;

        private bool _shouldSerializenominalFrequency;

        private bool _shouldSerializenominalCurrent;

        private bool _shouldSerializenominalVoltage;

        private bool _shouldSerializenominalPower;

        private string _count;

        private string _assemblyName;

        private System.Nullable<decimal> _nominalPower;

        private System.Nullable<decimal> _nominalVoltage;

        private System.Nullable<decimal> _nominalCurrent;

        private System.Nullable<decimal> _nominalFrequency;

        private System.Nullable<decimal> _nominalFlux;

        private System.Nullable<decimal> _nominalPhi;

        private string _numberPolePairs;

        private System.Nullable<decimal> _statorResistance;

        private System.Nullable<decimal> _rotorResistance;

        private System.Nullable<decimal> _ferrumResistance;

        private System.Nullable<decimal> _additionalResistance;

        private System.Nullable<decimal> _mainInductance;

        private System.Nullable<decimal> _statorLeakageInductance;

        private System.Nullable<decimal> _rotorLeakageInductance;

        private string _nominalRevolutions;

        private System.Nullable<decimal> _meanEfficiency;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string assemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalPower
        {
            get
            {
                if (this._nominalPower.HasValue)
                {
                    return this._nominalPower.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalPower = value;
                _shouldSerializenominalPower = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalPowerSpecified
        {
            get
            {
                return this._nominalPower.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalPower = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalVoltage
        {
            get
            {
                if (this._nominalVoltage.HasValue)
                {
                    return this._nominalVoltage.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalVoltage = value;
                _shouldSerializenominalVoltage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalVoltageSpecified
        {
            get
            {
                return this._nominalVoltage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalVoltage = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalCurrent
        {
            get
            {
                if (this._nominalCurrent.HasValue)
                {
                    return this._nominalCurrent.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalCurrent = value;
                _shouldSerializenominalCurrent = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalCurrentSpecified
        {
            get
            {
                return this._nominalCurrent.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalCurrent = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalFrequency
        {
            get
            {
                if (this._nominalFrequency.HasValue)
                {
                    return this._nominalFrequency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalFrequency = value;
                _shouldSerializenominalFrequency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalFrequencySpecified
        {
            get
            {
                return this._nominalFrequency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalFrequency = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalFlux
        {
            get
            {
                if (this._nominalFlux.HasValue)
                {
                    return this._nominalFlux.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalFlux = value;
                _shouldSerializenominalFlux = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalFluxSpecified
        {
            get
            {
                return this._nominalFlux.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalFlux = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalPhi
        {
            get
            {
                if (this._nominalPhi.HasValue)
                {
                    return this._nominalPhi.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalPhi = value;
                _shouldSerializenominalPhi = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalPhiSpecified
        {
            get
            {
                return this._nominalPhi.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalPhi = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string numberPolePairs
        {
            get
            {
                return this._numberPolePairs;
            }
            set
            {
                this._numberPolePairs = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal statorResistance
        {
            get
            {
                if (this._statorResistance.HasValue)
                {
                    return this._statorResistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._statorResistance = value;
                _shouldSerializestatorResistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statorResistanceSpecified
        {
            get
            {
                return this._statorResistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._statorResistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal rotorResistance
        {
            get
            {
                if (this._rotorResistance.HasValue)
                {
                    return this._rotorResistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._rotorResistance = value;
                _shouldSerializerotorResistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rotorResistanceSpecified
        {
            get
            {
                return this._rotorResistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._rotorResistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal ferrumResistance
        {
            get
            {
                if (this._ferrumResistance.HasValue)
                {
                    return this._ferrumResistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._ferrumResistance = value;
                _shouldSerializeferrumResistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ferrumResistanceSpecified
        {
            get
            {
                return this._ferrumResistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._ferrumResistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal additionalResistance
        {
            get
            {
                if (this._additionalResistance.HasValue)
                {
                    return this._additionalResistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._additionalResistance = value;
                _shouldSerializeadditionalResistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool additionalResistanceSpecified
        {
            get
            {
                return this._additionalResistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._additionalResistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal mainInductance
        {
            get
            {
                if (this._mainInductance.HasValue)
                {
                    return this._mainInductance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._mainInductance = value;
                _shouldSerializemainInductance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mainInductanceSpecified
        {
            get
            {
                return this._mainInductance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._mainInductance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal statorLeakageInductance
        {
            get
            {
                if (this._statorLeakageInductance.HasValue)
                {
                    return this._statorLeakageInductance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._statorLeakageInductance = value;
                _shouldSerializestatorLeakageInductance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool statorLeakageInductanceSpecified
        {
            get
            {
                return this._statorLeakageInductance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._statorLeakageInductance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal rotorLeakageInductance
        {
            get
            {
                if (this._rotorLeakageInductance.HasValue)
                {
                    return this._rotorLeakageInductance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._rotorLeakageInductance = value;
                _shouldSerializerotorLeakageInductance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rotorLeakageInductanceSpecified
        {
            get
            {
                return this._rotorLeakageInductance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._rotorLeakageInductance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string nominalRevolutions
        {
            get
            {
                return this._nominalRevolutions;
            }
            set
            {
                this._nominalRevolutions = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanEfficiency
        {
            get
            {
                if (this._meanEfficiency.HasValue)
                {
                    return this._meanEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanEfficiency = value;
                _shouldSerializemeanEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanEfficiencySpecified
        {
            get
            {
                return this._meanEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanEfficiency = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTractionMotor));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether nominalPower should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalPower()
        {
            if (_shouldSerializenominalPower)
            {
                return true;
            }
            return (_nominalPower != default(decimal));
        }

        /// <summary>
        /// Test whether nominalVoltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalVoltage()
        {
            if (_shouldSerializenominalVoltage)
            {
                return true;
            }
            return (_nominalVoltage != default(decimal));
        }

        /// <summary>
        /// Test whether nominalCurrent should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalCurrent()
        {
            if (_shouldSerializenominalCurrent)
            {
                return true;
            }
            return (_nominalCurrent != default(decimal));
        }

        /// <summary>
        /// Test whether nominalFrequency should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalFrequency()
        {
            if (_shouldSerializenominalFrequency)
            {
                return true;
            }
            return (_nominalFrequency != default(decimal));
        }

        /// <summary>
        /// Test whether nominalFlux should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalFlux()
        {
            if (_shouldSerializenominalFlux)
            {
                return true;
            }
            return (_nominalFlux != default(decimal));
        }

        /// <summary>
        /// Test whether nominalPhi should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalPhi()
        {
            if (_shouldSerializenominalPhi)
            {
                return true;
            }
            return (_nominalPhi != default(decimal));
        }

        /// <summary>
        /// Test whether statorResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializestatorResistance()
        {
            if (_shouldSerializestatorResistance)
            {
                return true;
            }
            return (_statorResistance != default(decimal));
        }

        /// <summary>
        /// Test whether rotorResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializerotorResistance()
        {
            if (_shouldSerializerotorResistance)
            {
                return true;
            }
            return (_rotorResistance != default(decimal));
        }

        /// <summary>
        /// Test whether ferrumResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeferrumResistance()
        {
            if (_shouldSerializeferrumResistance)
            {
                return true;
            }
            return (_ferrumResistance != default(decimal));
        }

        /// <summary>
        /// Test whether additionalResistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalResistance()
        {
            if (_shouldSerializeadditionalResistance)
            {
                return true;
            }
            return (_additionalResistance != default(decimal));
        }

        /// <summary>
        /// Test whether mainInductance should be serialized
        /// </summary>
        public virtual bool ShouldSerializemainInductance()
        {
            if (_shouldSerializemainInductance)
            {
                return true;
            }
            return (_mainInductance != default(decimal));
        }

        /// <summary>
        /// Test whether statorLeakageInductance should be serialized
        /// </summary>
        public virtual bool ShouldSerializestatorLeakageInductance()
        {
            if (_shouldSerializestatorLeakageInductance)
            {
                return true;
            }
            return (_statorLeakageInductance != default(decimal));
        }

        /// <summary>
        /// Test whether rotorLeakageInductance should be serialized
        /// </summary>
        public virtual bool ShouldSerializerotorLeakageInductance()
        {
            if (_shouldSerializerotorLeakageInductance)
            {
                return true;
            }
            return (_rotorLeakageInductance != default(decimal));
        }

        /// <summary>
        /// Test whether meanEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanEfficiency()
        {
            if (_shouldSerializemeanEfficiency)
            {
                return true;
            }
            return (_meanEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether assemblyName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeassemblyName()
        {
            return !string.IsNullOrEmpty(assemblyName);
        }

        /// <summary>
        /// Test whether numberPolePairs should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumberPolePairs()
        {
            return !string.IsNullOrEmpty(numberPolePairs);
        }

        /// <summary>
        /// Test whether nominalRevolutions should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalRevolutions()
        {
            return !string.IsNullOrEmpty(nominalRevolutions);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTractionMotor object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTractionMotor object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTractionMotor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTractionMotor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTractionMotor);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTractionMotor obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTractionMotor Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTractionMotor)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTractionMotor Deserialize(System.IO.Stream s)
        {
            return ((tTractionMotor)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTractionMotor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTractionMotor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTractionMotor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTractionMotor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTractionMotor);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTractionMotor obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTractionMotor LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tDieselEngine : ParentContainer
    {

        private bool _shouldSerializemeanEfficiency;

        private bool _shouldSerializefuelCapacity;

        private bool _shouldSerializeavailableAuxiliaryPower;

        private bool _shouldSerializenominalPower;

        private string _count;

        private string _assemblyName;

        private System.Nullable<decimal> _nominalPower;

        private System.Nullable<decimal> _availableAuxiliaryPower;

        private System.Nullable<decimal> _fuelCapacity;

        private System.Nullable<decimal> _meanEfficiency;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string assemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalPower
        {
            get
            {
                if (this._nominalPower.HasValue)
                {
                    return this._nominalPower.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalPower = value;
                _shouldSerializenominalPower = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalPowerSpecified
        {
            get
            {
                return this._nominalPower.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalPower = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal availableAuxiliaryPower
        {
            get
            {
                if (this._availableAuxiliaryPower.HasValue)
                {
                    return this._availableAuxiliaryPower.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._availableAuxiliaryPower = value;
                _shouldSerializeavailableAuxiliaryPower = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool availableAuxiliaryPowerSpecified
        {
            get
            {
                return this._availableAuxiliaryPower.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._availableAuxiliaryPower = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal fuelCapacity
        {
            get
            {
                if (this._fuelCapacity.HasValue)
                {
                    return this._fuelCapacity.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._fuelCapacity = value;
                _shouldSerializefuelCapacity = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fuelCapacitySpecified
        {
            get
            {
                return this._fuelCapacity.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._fuelCapacity = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanEfficiency
        {
            get
            {
                if (this._meanEfficiency.HasValue)
                {
                    return this._meanEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanEfficiency = value;
                _shouldSerializemeanEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanEfficiencySpecified
        {
            get
            {
                return this._meanEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanEfficiency = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tDieselEngine));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether nominalPower should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalPower()
        {
            if (_shouldSerializenominalPower)
            {
                return true;
            }
            return (_nominalPower != default(decimal));
        }

        /// <summary>
        /// Test whether availableAuxiliaryPower should be serialized
        /// </summary>
        public virtual bool ShouldSerializeavailableAuxiliaryPower()
        {
            if (_shouldSerializeavailableAuxiliaryPower)
            {
                return true;
            }
            return (_availableAuxiliaryPower != default(decimal));
        }

        /// <summary>
        /// Test whether fuelCapacity should be serialized
        /// </summary>
        public virtual bool ShouldSerializefuelCapacity()
        {
            if (_shouldSerializefuelCapacity)
            {
                return true;
            }
            return (_fuelCapacity != default(decimal));
        }

        /// <summary>
        /// Test whether meanEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanEfficiency()
        {
            if (_shouldSerializemeanEfficiency)
            {
                return true;
            }
            return (_meanEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether assemblyName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeassemblyName()
        {
            return !string.IsNullOrEmpty(assemblyName);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tDieselEngine object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tDieselEngine object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tDieselEngine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tDieselEngine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDieselEngine);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tDieselEngine obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tDieselEngine Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tDieselEngine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tDieselEngine Deserialize(System.IO.Stream s)
        {
            return ((tDieselEngine)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tDieselEngine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tDieselEngine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tDieselEngine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tDieselEngine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDieselEngine);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tDieselEngine obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tDieselEngine LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eGear : tGear
    {

        private tEfficiencyCurve _efficiency;

        private static XmlSerializer serializer;

        public eGear()
        {
            this._efficiency = new tEfficiencyCurve();
        }

        public tEfficiencyCurve efficiency
        {
            get
            {
                return this._efficiency;
            }
            set
            {
                this._efficiency = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eGear));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether efficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializeefficiency()
        {
            return (_efficiency != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eGear object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eGear object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eGear object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eGear obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eGear);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eGear obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eGear Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eGear)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eGear Deserialize(System.IO.Stream s)
        {
            return ((eGear)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eGear object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eGear object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eGear object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eGear obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eGear);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eGear obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eGear LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eGear))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tGear : ParentContainer
    {

        private bool _shouldSerializenominalPower;

        private bool _shouldSerializemeanEfficiency;

        private bool _shouldSerializegearRatio;

        private string _count;

        private string _assemblyName;

        private System.Nullable<decimal> _gearRatio;

        private System.Nullable<decimal> _meanEfficiency;

        private string _designType;

        private string _manufacturerName;

        private System.Nullable<decimal> _nominalPower;

        private string _torqueConversion;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string assemblyName
        {
            get
            {
                return this._assemblyName;
            }
            set
            {
                this._assemblyName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal gearRatio
        {
            get
            {
                if (this._gearRatio.HasValue)
                {
                    return this._gearRatio.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._gearRatio = value;
                _shouldSerializegearRatio = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool gearRatioSpecified
        {
            get
            {
                return this._gearRatio.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._gearRatio = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanEfficiency
        {
            get
            {
                if (this._meanEfficiency.HasValue)
                {
                    return this._meanEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanEfficiency = value;
                _shouldSerializemeanEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanEfficiencySpecified
        {
            get
            {
                return this._meanEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanEfficiency = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string designType
        {
            get
            {
                return this._designType;
            }
            set
            {
                this._designType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string manufacturerName
        {
            get
            {
                return this._manufacturerName;
            }
            set
            {
                this._manufacturerName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal nominalPower
        {
            get
            {
                if (this._nominalPower.HasValue)
                {
                    return this._nominalPower.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._nominalPower = value;
                _shouldSerializenominalPower = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nominalPowerSpecified
        {
            get
            {
                return this._nominalPower.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._nominalPower = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string torqueConversion
        {
            get
            {
                return this._torqueConversion;
            }
            set
            {
                this._torqueConversion = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tGear));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether gearRatio should be serialized
        /// </summary>
        public virtual bool ShouldSerializegearRatio()
        {
            if (_shouldSerializegearRatio)
            {
                return true;
            }
            return (_gearRatio != default(decimal));
        }

        /// <summary>
        /// Test whether meanEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanEfficiency()
        {
            if (_shouldSerializemeanEfficiency)
            {
                return true;
            }
            return (_meanEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether nominalPower should be serialized
        /// </summary>
        public virtual bool ShouldSerializenominalPower()
        {
            if (_shouldSerializenominalPower)
            {
                return true;
            }
            return (_nominalPower != default(decimal));
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether assemblyName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeassemblyName()
        {
            return !string.IsNullOrEmpty(assemblyName);
        }

        /// <summary>
        /// Test whether designType should be serialized
        /// </summary>
        public virtual bool ShouldSerializedesignType()
        {
            return !string.IsNullOrEmpty(designType);
        }

        /// <summary>
        /// Test whether manufacturerName should be serialized
        /// </summary>
        public virtual bool ShouldSerializemanufacturerName()
        {
            return !string.IsNullOrEmpty(manufacturerName);
        }

        /// <summary>
        /// Test whether torqueConversion should be serialized
        /// </summary>
        public virtual bool ShouldSerializetorqueConversion()
        {
            return !string.IsNullOrEmpty(torqueConversion);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tGear object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tGear object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tGear object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tGear obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGear);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tGear obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tGear Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tGear)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tGear Deserialize(System.IO.Stream s)
        {
            return ((tGear)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tGear object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tGear object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tGear object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tGear obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGear);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tGear obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tGear LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eAuxiliarySupply : tAuxiliarySupply
    {

        private List<tAuxiliarySupplySystem> _dedicatedSupplySystem;

        private static XmlSerializer serializer;

        public eAuxiliarySupply()
        {
            this._dedicatedSupplySystem = new List<tAuxiliarySupplySystem>();
        }

        [System.Xml.Serialization.XmlElementAttribute("dedicatedSupplySystem")]
        public List<tAuxiliarySupplySystem> dedicatedSupplySystem
        {
            get
            {
                return this._dedicatedSupplySystem;
            }
            set
            {
                this._dedicatedSupplySystem = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eAuxiliarySupply));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dedicatedSupplySystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializededicatedSupplySystem()
        {
            return dedicatedSupplySystem != null && dedicatedSupplySystem.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eAuxiliarySupply object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eAuxiliarySupply object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eAuxiliarySupply object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eAuxiliarySupply obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eAuxiliarySupply);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eAuxiliarySupply obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eAuxiliarySupply Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eAuxiliarySupply)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eAuxiliarySupply Deserialize(System.IO.Stream s)
        {
            return ((eAuxiliarySupply)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eAuxiliarySupply object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eAuxiliarySupply object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eAuxiliarySupply object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eAuxiliarySupply obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eAuxiliarySupply);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eAuxiliarySupply obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eAuxiliarySupply LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAuxiliarySupplySystem : ParentContainer
    {

        private bool _shouldSerializemaxPower;

        private bool _shouldSerializefrequency;

        private bool _shouldSerializevoltage;

        private System.Nullable<decimal> _voltage;

        private System.Nullable<decimal> _frequency;

        private decimal _maxPower;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal voltage
        {
            get
            {
                if (this._voltage.HasValue)
                {
                    return this._voltage.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._voltage = value;
                _shouldSerializevoltage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool voltageSpecified
        {
            get
            {
                return this._voltage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._voltage = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal frequency
        {
            get
            {
                if (this._frequency.HasValue)
                {
                    return this._frequency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._frequency = value;
                _shouldSerializefrequency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool frequencySpecified
        {
            get
            {
                return this._frequency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._frequency = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxPower
        {
            get
            {
                return this._maxPower;
            }
            set
            {
                this._maxPower = value;
                _shouldSerializemaxPower = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAuxiliarySupplySystem));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether voltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializevoltage()
        {
            if (_shouldSerializevoltage)
            {
                return true;
            }
            return (_voltage != default(decimal));
        }

        /// <summary>
        /// Test whether frequency should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrequency()
        {
            if (_shouldSerializefrequency)
            {
                return true;
            }
            return (_frequency != default(decimal));
        }

        /// <summary>
        /// Test whether maxPower should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxPower()
        {
            if (_shouldSerializemaxPower)
            {
                return true;
            }
            return (_maxPower != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAuxiliarySupplySystem object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAuxiliarySupplySystem object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAuxiliarySupplySystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAuxiliarySupplySystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAuxiliarySupplySystem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAuxiliarySupplySystem obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tAuxiliarySupplySystem Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAuxiliarySupplySystem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAuxiliarySupplySystem Deserialize(System.IO.Stream s)
        {
            return ((tAuxiliarySupplySystem)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAuxiliarySupplySystem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAuxiliarySupplySystem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAuxiliarySupplySystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAuxiliarySupplySystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAuxiliarySupplySystem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAuxiliarySupplySystem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tAuxiliarySupplySystem LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eAuxiliarySupply))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAuxiliarySupply : ParentContainer
    {

        private bool _shouldSerializeresistanceBraking;

        private bool _shouldSerializepowerPhiBraking;

        private bool _shouldSerializepowerBraking;

        private bool _shouldSerializeresistance;

        private bool _shouldSerializepowerPhi;

        private bool _shouldSerializepower;

        private decimal _power;

        private System.Nullable<decimal> _powerPhi;

        private System.Nullable<decimal> _resistance;

        private System.Nullable<decimal> _powerBraking;

        private System.Nullable<decimal> _powerPhiBraking;

        private System.Nullable<decimal> _resistanceBraking;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal power
        {
            get
            {
                return this._power;
            }
            set
            {
                this._power = value;
                _shouldSerializepower = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal powerPhi
        {
            get
            {
                if (this._powerPhi.HasValue)
                {
                    return this._powerPhi.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._powerPhi = value;
                _shouldSerializepowerPhi = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool powerPhiSpecified
        {
            get
            {
                return this._powerPhi.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._powerPhi = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal resistance
        {
            get
            {
                if (this._resistance.HasValue)
                {
                    return this._resistance.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._resistance = value;
                _shouldSerializeresistance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resistanceSpecified
        {
            get
            {
                return this._resistance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._resistance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal powerBraking
        {
            get
            {
                if (this._powerBraking.HasValue)
                {
                    return this._powerBraking.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._powerBraking = value;
                _shouldSerializepowerBraking = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool powerBrakingSpecified
        {
            get
            {
                return this._powerBraking.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._powerBraking = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal powerPhiBraking
        {
            get
            {
                if (this._powerPhiBraking.HasValue)
                {
                    return this._powerPhiBraking.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._powerPhiBraking = value;
                _shouldSerializepowerPhiBraking = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool powerPhiBrakingSpecified
        {
            get
            {
                return this._powerPhiBraking.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._powerPhiBraking = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal resistanceBraking
        {
            get
            {
                if (this._resistanceBraking.HasValue)
                {
                    return this._resistanceBraking.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._resistanceBraking = value;
                _shouldSerializeresistanceBraking = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resistanceBrakingSpecified
        {
            get
            {
                return this._resistanceBraking.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._resistanceBraking = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAuxiliarySupply));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether power should be serialized
        /// </summary>
        public virtual bool ShouldSerializepower()
        {
            if (_shouldSerializepower)
            {
                return true;
            }
            return (_power != default(decimal));
        }

        /// <summary>
        /// Test whether powerPhi should be serialized
        /// </summary>
        public virtual bool ShouldSerializepowerPhi()
        {
            if (_shouldSerializepowerPhi)
            {
                return true;
            }
            return (_powerPhi != default(decimal));
        }

        /// <summary>
        /// Test whether resistance should be serialized
        /// </summary>
        public virtual bool ShouldSerializeresistance()
        {
            if (_shouldSerializeresistance)
            {
                return true;
            }
            return (_resistance != default(decimal));
        }

        /// <summary>
        /// Test whether powerBraking should be serialized
        /// </summary>
        public virtual bool ShouldSerializepowerBraking()
        {
            if (_shouldSerializepowerBraking)
            {
                return true;
            }
            return (_powerBraking != default(decimal));
        }

        /// <summary>
        /// Test whether powerPhiBraking should be serialized
        /// </summary>
        public virtual bool ShouldSerializepowerPhiBraking()
        {
            if (_shouldSerializepowerPhiBraking)
            {
                return true;
            }
            return (_powerPhiBraking != default(decimal));
        }

        /// <summary>
        /// Test whether resistanceBraking should be serialized
        /// </summary>
        public virtual bool ShouldSerializeresistanceBraking()
        {
            if (_shouldSerializeresistanceBraking)
            {
                return true;
            }
            return (_resistanceBraking != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAuxiliarySupply object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAuxiliarySupply object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAuxiliarySupply object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAuxiliarySupply obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAuxiliarySupply);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAuxiliarySupply obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tAuxiliarySupply Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAuxiliarySupply)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAuxiliarySupply Deserialize(System.IO.Stream s)
        {
            return ((tAuxiliarySupply)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAuxiliarySupply object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAuxiliarySupply object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAuxiliarySupply object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAuxiliarySupply obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAuxiliarySupply);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAuxiliarySupply obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tAuxiliarySupply LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tRackTractionType : ParentContainer
    {

        private bool _shouldSerializeresilentCogWheel;

        private string _number;

        private string _rackSystem;

        private bool _resilentCogWheel;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string number
        {
            get
            {
                return this._number;
            }
            set
            {
                this._number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string rackSystem
        {
            get
            {
                return this._rackSystem;
            }
            set
            {
                this._rackSystem = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool resilentCogWheel
        {
            get
            {
                return this._resilentCogWheel;
            }
            set
            {
                this._resilentCogWheel = value;
                _shouldSerializeresilentCogWheel = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tRackTractionType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether resilentCogWheel should be serialized
        /// </summary>
        public virtual bool ShouldSerializeresilentCogWheel()
        {
            if (_shouldSerializeresilentCogWheel)
            {
                return true;
            }
            return (_resilentCogWheel != default(bool));
        }

        /// <summary>
        /// Test whether number should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumber()
        {
            return !string.IsNullOrEmpty(number);
        }

        /// <summary>
        /// Test whether rackSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializerackSystem()
        {
            return !string.IsNullOrEmpty(rackSystem);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tRackTractionType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tRackTractionType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tRackTractionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tRackTractionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRackTractionType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tRackTractionType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tRackTractionType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tRackTractionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tRackTractionType Deserialize(System.IO.Stream s)
        {
            return ((tRackTractionType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tRackTractionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tRackTractionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tRackTractionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tRackTractionType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRackTractionType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tRackTractionType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tRackTractionType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ePropulsion))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPropulsion : tElementWithIDAndName
    {

        private bool _shouldSerializeactivationStandstill;

        private bool _shouldSerializereverseSpeed;

        private bool _shouldSerializeforwardSpeed;

        private bool _shouldSerializespeedRange;

        private bool _shouldSerializemaxRegenerativeVoltage;

        private bool _shouldSerializezeroSpeedCurrentLimitation;

        private bool _shouldSerializetractionOffUndervoltageThreshold;

        private bool _shouldSerializetotalBrakeEfficiency;

        private bool _shouldSerializetotalTractEfficiency;

        private bool _shouldSerializemaxBrakePower;

        private bool _shouldSerializemaxBrakeEffort;

        private bool _shouldSerializewheelDiameter;

        private bool _shouldSerializeremoteControl;

        private bool _shouldSerializerackTraction;

        private bool _shouldSerializeadditionalRotationMass;

        private bool _shouldSerializerotationMassFactor;

        private bool _shouldSerializemaxTractEffort;

        private bool _shouldSerializepower;

        private bool _shouldSerializefrequency;

        private bool _shouldSerializevoltage;

        private System.Nullable<decimal> _voltage;

        private System.Nullable<decimal> _frequency;

        private decimal _power;

        private string _powerType;

        private string _transmission;

        private string _controlType;

        private System.Nullable<decimal> _maxTractEffort;

        private System.Nullable<decimal> _rotationMassFactor;

        private System.Nullable<decimal> _additionalRotationMass;

        private System.Nullable<bool> _rackTraction;

        private System.Nullable<bool> _remoteControl;

        private string _numberNotches;

        private System.Nullable<decimal> _wheelDiameter;

        private System.Nullable<decimal> _maxBrakeEffort;

        private System.Nullable<decimal> _maxBrakePower;

        private System.Nullable<decimal> _totalTractEfficiency;

        private System.Nullable<decimal> _totalBrakeEfficiency;

        private System.Nullable<decimal> _tractionOffUndervoltageThreshold;

        private System.Nullable<decimal> _zeroSpeedCurrentLimitation;

        private System.Nullable<decimal> _maxRegenerativeVoltage;

        private System.Nullable<tSpeedRangeType> _speedRange;

        private System.Nullable<decimal> _forwardSpeed;

        private System.Nullable<decimal> _reverseSpeed;

        private System.Nullable<bool> _activationStandstill;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal voltage
        {
            get
            {
                if (this._voltage.HasValue)
                {
                    return this._voltage.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._voltage = value;
                _shouldSerializevoltage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool voltageSpecified
        {
            get
            {
                return this._voltage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._voltage = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal frequency
        {
            get
            {
                if (this._frequency.HasValue)
                {
                    return this._frequency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._frequency = value;
                _shouldSerializefrequency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool frequencySpecified
        {
            get
            {
                return this._frequency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._frequency = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal power
        {
            get
            {
                return this._power;
            }
            set
            {
                this._power = value;
                _shouldSerializepower = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string powerType
        {
            get
            {
                return this._powerType;
            }
            set
            {
                this._powerType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string transmission
        {
            get
            {
                return this._transmission;
            }
            set
            {
                this._transmission = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string controlType
        {
            get
            {
                return this._controlType;
            }
            set
            {
                this._controlType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxTractEffort
        {
            get
            {
                if (this._maxTractEffort.HasValue)
                {
                    return this._maxTractEffort.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxTractEffort = value;
                _shouldSerializemaxTractEffort = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxTractEffortSpecified
        {
            get
            {
                return this._maxTractEffort.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxTractEffort = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal rotationMassFactor
        {
            get
            {
                if (this._rotationMassFactor.HasValue)
                {
                    return this._rotationMassFactor.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._rotationMassFactor = value;
                _shouldSerializerotationMassFactor = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rotationMassFactorSpecified
        {
            get
            {
                return this._rotationMassFactor.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._rotationMassFactor = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal additionalRotationMass
        {
            get
            {
                if (this._additionalRotationMass.HasValue)
                {
                    return this._additionalRotationMass.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._additionalRotationMass = value;
                _shouldSerializeadditionalRotationMass = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool additionalRotationMassSpecified
        {
            get
            {
                return this._additionalRotationMass.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._additionalRotationMass = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool rackTraction
        {
            get
            {
                if (this._rackTraction.HasValue)
                {
                    return this._rackTraction.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._rackTraction = value;
                _shouldSerializerackTraction = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rackTractionSpecified
        {
            get
            {
                return this._rackTraction.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._rackTraction = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool remoteControl
        {
            get
            {
                if (this._remoteControl.HasValue)
                {
                    return this._remoteControl.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._remoteControl = value;
                _shouldSerializeremoteControl = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool remoteControlSpecified
        {
            get
            {
                return this._remoteControl.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._remoteControl = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string numberNotches
        {
            get
            {
                return this._numberNotches;
            }
            set
            {
                this._numberNotches = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal wheelDiameter
        {
            get
            {
                if (this._wheelDiameter.HasValue)
                {
                    return this._wheelDiameter.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._wheelDiameter = value;
                _shouldSerializewheelDiameter = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool wheelDiameterSpecified
        {
            get
            {
                return this._wheelDiameter.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._wheelDiameter = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxBrakeEffort
        {
            get
            {
                if (this._maxBrakeEffort.HasValue)
                {
                    return this._maxBrakeEffort.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxBrakeEffort = value;
                _shouldSerializemaxBrakeEffort = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxBrakeEffortSpecified
        {
            get
            {
                return this._maxBrakeEffort.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxBrakeEffort = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxBrakePower
        {
            get
            {
                if (this._maxBrakePower.HasValue)
                {
                    return this._maxBrakePower.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxBrakePower = value;
                _shouldSerializemaxBrakePower = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxBrakePowerSpecified
        {
            get
            {
                return this._maxBrakePower.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxBrakePower = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal totalTractEfficiency
        {
            get
            {
                if (this._totalTractEfficiency.HasValue)
                {
                    return this._totalTractEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._totalTractEfficiency = value;
                _shouldSerializetotalTractEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totalTractEfficiencySpecified
        {
            get
            {
                return this._totalTractEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._totalTractEfficiency = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal totalBrakeEfficiency
        {
            get
            {
                if (this._totalBrakeEfficiency.HasValue)
                {
                    return this._totalBrakeEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._totalBrakeEfficiency = value;
                _shouldSerializetotalBrakeEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totalBrakeEfficiencySpecified
        {
            get
            {
                return this._totalBrakeEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._totalBrakeEfficiency = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal tractionOffUndervoltageThreshold
        {
            get
            {
                if (this._tractionOffUndervoltageThreshold.HasValue)
                {
                    return this._tractionOffUndervoltageThreshold.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._tractionOffUndervoltageThreshold = value;
                _shouldSerializetractionOffUndervoltageThreshold = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tractionOffUndervoltageThresholdSpecified
        {
            get
            {
                return this._tractionOffUndervoltageThreshold.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._tractionOffUndervoltageThreshold = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal zeroSpeedCurrentLimitation
        {
            get
            {
                if (this._zeroSpeedCurrentLimitation.HasValue)
                {
                    return this._zeroSpeedCurrentLimitation.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._zeroSpeedCurrentLimitation = value;
                _shouldSerializezeroSpeedCurrentLimitation = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool zeroSpeedCurrentLimitationSpecified
        {
            get
            {
                return this._zeroSpeedCurrentLimitation.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._zeroSpeedCurrentLimitation = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxRegenerativeVoltage
        {
            get
            {
                if (this._maxRegenerativeVoltage.HasValue)
                {
                    return this._maxRegenerativeVoltage.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxRegenerativeVoltage = value;
                _shouldSerializemaxRegenerativeVoltage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxRegenerativeVoltageSpecified
        {
            get
            {
                return this._maxRegenerativeVoltage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxRegenerativeVoltage = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tSpeedRangeType speedRange
        {
            get
            {
                if (this._speedRange.HasValue)
                {
                    return this._speedRange.Value;
                }
                else
                {
                    return default(tSpeedRangeType);
                }
            }
            set
            {
                this._speedRange = value;
                _shouldSerializespeedRange = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool speedRangeSpecified
        {
            get
            {
                return this._speedRange.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._speedRange = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal forwardSpeed
        {
            get
            {
                if (this._forwardSpeed.HasValue)
                {
                    return this._forwardSpeed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._forwardSpeed = value;
                _shouldSerializeforwardSpeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool forwardSpeedSpecified
        {
            get
            {
                return this._forwardSpeed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._forwardSpeed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal reverseSpeed
        {
            get
            {
                if (this._reverseSpeed.HasValue)
                {
                    return this._reverseSpeed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._reverseSpeed = value;
                _shouldSerializereverseSpeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool reverseSpeedSpecified
        {
            get
            {
                return this._reverseSpeed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._reverseSpeed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool activationStandstill
        {
            get
            {
                if (this._activationStandstill.HasValue)
                {
                    return this._activationStandstill.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._activationStandstill = value;
                _shouldSerializeactivationStandstill = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activationStandstillSpecified
        {
            get
            {
                return this._activationStandstill.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._activationStandstill = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPropulsion));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether voltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializevoltage()
        {
            if (_shouldSerializevoltage)
            {
                return true;
            }
            return (_voltage != default(decimal));
        }

        /// <summary>
        /// Test whether frequency should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrequency()
        {
            if (_shouldSerializefrequency)
            {
                return true;
            }
            return (_frequency != default(decimal));
        }

        /// <summary>
        /// Test whether power should be serialized
        /// </summary>
        public virtual bool ShouldSerializepower()
        {
            if (_shouldSerializepower)
            {
                return true;
            }
            return (_power != default(decimal));
        }

        /// <summary>
        /// Test whether maxTractEffort should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxTractEffort()
        {
            if (_shouldSerializemaxTractEffort)
            {
                return true;
            }
            return (_maxTractEffort != default(decimal));
        }

        /// <summary>
        /// Test whether rotationMassFactor should be serialized
        /// </summary>
        public virtual bool ShouldSerializerotationMassFactor()
        {
            if (_shouldSerializerotationMassFactor)
            {
                return true;
            }
            return (_rotationMassFactor != default(decimal));
        }

        /// <summary>
        /// Test whether additionalRotationMass should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalRotationMass()
        {
            if (_shouldSerializeadditionalRotationMass)
            {
                return true;
            }
            return (_additionalRotationMass != default(decimal));
        }

        /// <summary>
        /// Test whether rackTraction should be serialized
        /// </summary>
        public virtual bool ShouldSerializerackTraction()
        {
            if (_shouldSerializerackTraction)
            {
                return true;
            }
            return (_rackTraction != default(bool));
        }

        /// <summary>
        /// Test whether remoteControl should be serialized
        /// </summary>
        public virtual bool ShouldSerializeremoteControl()
        {
            if (_shouldSerializeremoteControl)
            {
                return true;
            }
            return (_remoteControl != default(bool));
        }

        /// <summary>
        /// Test whether wheelDiameter should be serialized
        /// </summary>
        public virtual bool ShouldSerializewheelDiameter()
        {
            if (_shouldSerializewheelDiameter)
            {
                return true;
            }
            return (_wheelDiameter != default(decimal));
        }

        /// <summary>
        /// Test whether maxBrakeEffort should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxBrakeEffort()
        {
            if (_shouldSerializemaxBrakeEffort)
            {
                return true;
            }
            return (_maxBrakeEffort != default(decimal));
        }

        /// <summary>
        /// Test whether maxBrakePower should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxBrakePower()
        {
            if (_shouldSerializemaxBrakePower)
            {
                return true;
            }
            return (_maxBrakePower != default(decimal));
        }

        /// <summary>
        /// Test whether totalTractEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializetotalTractEfficiency()
        {
            if (_shouldSerializetotalTractEfficiency)
            {
                return true;
            }
            return (_totalTractEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether totalBrakeEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializetotalBrakeEfficiency()
        {
            if (_shouldSerializetotalBrakeEfficiency)
            {
                return true;
            }
            return (_totalBrakeEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether tractionOffUndervoltageThreshold should be serialized
        /// </summary>
        public virtual bool ShouldSerializetractionOffUndervoltageThreshold()
        {
            if (_shouldSerializetractionOffUndervoltageThreshold)
            {
                return true;
            }
            return (_tractionOffUndervoltageThreshold != default(decimal));
        }

        /// <summary>
        /// Test whether zeroSpeedCurrentLimitation should be serialized
        /// </summary>
        public virtual bool ShouldSerializezeroSpeedCurrentLimitation()
        {
            if (_shouldSerializezeroSpeedCurrentLimitation)
            {
                return true;
            }
            return (_zeroSpeedCurrentLimitation != default(decimal));
        }

        /// <summary>
        /// Test whether maxRegenerativeVoltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxRegenerativeVoltage()
        {
            if (_shouldSerializemaxRegenerativeVoltage)
            {
                return true;
            }
            return (_maxRegenerativeVoltage != default(decimal));
        }

        /// <summary>
        /// Test whether speedRange should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeedRange()
        {
            if (_shouldSerializespeedRange)
            {
                return true;
            }
            return (_speedRange != default(tSpeedRangeType));
        }

        /// <summary>
        /// Test whether forwardSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializeforwardSpeed()
        {
            if (_shouldSerializeforwardSpeed)
            {
                return true;
            }
            return (_forwardSpeed != default(decimal));
        }

        /// <summary>
        /// Test whether reverseSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializereverseSpeed()
        {
            if (_shouldSerializereverseSpeed)
            {
                return true;
            }
            return (_reverseSpeed != default(decimal));
        }

        /// <summary>
        /// Test whether activationStandstill should be serialized
        /// </summary>
        public virtual bool ShouldSerializeactivationStandstill()
        {
            if (_shouldSerializeactivationStandstill)
            {
                return true;
            }
            return (_activationStandstill != default(bool));
        }

        /// <summary>
        /// Test whether powerType should be serialized
        /// </summary>
        public virtual bool ShouldSerializepowerType()
        {
            return !string.IsNullOrEmpty(powerType);
        }

        /// <summary>
        /// Test whether transmission should be serialized
        /// </summary>
        public virtual bool ShouldSerializetransmission()
        {
            return !string.IsNullOrEmpty(transmission);
        }

        /// <summary>
        /// Test whether controlType should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrolType()
        {
            return !string.IsNullOrEmpty(controlType);
        }

        /// <summary>
        /// Test whether numberNotches should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumberNotches()
        {
            return !string.IsNullOrEmpty(numberNotches);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPropulsion object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPropulsion object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPropulsion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPropulsion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPropulsion);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPropulsion obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tPropulsion Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPropulsion)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPropulsion Deserialize(System.IO.Stream s)
        {
            return ((tPropulsion)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPropulsion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPropulsion object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPropulsion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPropulsion obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPropulsion);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPropulsion obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tPropulsion LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tSpeedRangeType
    {

        /// <remarks/>
        dontcare,

        /// <remarks/>
        slow,

        /// <remarks/>
        fast,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class ePantograph : tPantograph
    {

        private List<tElectrificationSystem> _dedicatedSupplySystem;

        private static XmlSerializer serializer;

        public ePantograph()
        {
            this._dedicatedSupplySystem = new List<tElectrificationSystem>();
        }

        [System.Xml.Serialization.XmlElementAttribute("dedicatedSupplySystem")]
        public List<tElectrificationSystem> dedicatedSupplySystem
        {
            get
            {
                return this._dedicatedSupplySystem;
            }
            set
            {
                this._dedicatedSupplySystem = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ePantograph));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dedicatedSupplySystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializededicatedSupplySystem()
        {
            return dedicatedSupplySystem != null && dedicatedSupplySystem.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ePantograph object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ePantograph object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ePantograph object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ePantograph obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePantograph);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ePantograph obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static ePantograph Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ePantograph)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ePantograph Deserialize(System.IO.Stream s)
        {
            return ((ePantograph)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ePantograph object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ePantograph object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ePantograph object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ePantograph obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePantograph);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ePantograph obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static ePantograph LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tElectrificationSystem : ParentContainer
    {

        private bool _shouldSerializefrequency;

        private bool _shouldSerializevoltage;

        private System.Nullable<decimal> _voltage;

        private System.Nullable<decimal> _frequency;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal voltage
        {
            get
            {
                if (this._voltage.HasValue)
                {
                    return this._voltage.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._voltage = value;
                _shouldSerializevoltage = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool voltageSpecified
        {
            get
            {
                return this._voltage.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._voltage = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal frequency
        {
            get
            {
                if (this._frequency.HasValue)
                {
                    return this._frequency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._frequency = value;
                _shouldSerializefrequency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool frequencySpecified
        {
            get
            {
                return this._frequency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._frequency = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tElectrificationSystem));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether voltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializevoltage()
        {
            if (_shouldSerializevoltage)
            {
                return true;
            }
            return (_voltage != default(decimal));
        }

        /// <summary>
        /// Test whether frequency should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrequency()
        {
            if (_shouldSerializefrequency)
            {
                return true;
            }
            return (_frequency != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tElectrificationSystem object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tElectrificationSystem object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tElectrificationSystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tElectrificationSystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElectrificationSystem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tElectrificationSystem obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tElectrificationSystem Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tElectrificationSystem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tElectrificationSystem Deserialize(System.IO.Stream s)
        {
            return ((tElectrificationSystem)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tElectrificationSystem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tElectrificationSystem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tElectrificationSystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tElectrificationSystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElectrificationSystem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tElectrificationSystem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tElectrificationSystem LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ePantograph))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPantograph : ParentContainer
    {

        private bool _shouldSerializemaxCurrentStandstill;

        private bool _shouldSerializemaxCurrentDriving;

        private bool _shouldSerializeheadWidth;

        private string _orderNumber;

        private string _designType;

        private string _positionOnSection;

        private string _fittedSection;

        private string _controlType;

        private System.Nullable<decimal> _headWidth;

        private System.Nullable<decimal> _maxCurrentDriving;

        private System.Nullable<decimal> _maxCurrentStandstill;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string orderNumber
        {
            get
            {
                return this._orderNumber;
            }
            set
            {
                this._orderNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string designType
        {
            get
            {
                return this._designType;
            }
            set
            {
                this._designType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string positionOnSection
        {
            get
            {
                return this._positionOnSection;
            }
            set
            {
                this._positionOnSection = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string fittedSection
        {
            get
            {
                return this._fittedSection;
            }
            set
            {
                this._fittedSection = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string controlType
        {
            get
            {
                return this._controlType;
            }
            set
            {
                this._controlType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal headWidth
        {
            get
            {
                if (this._headWidth.HasValue)
                {
                    return this._headWidth.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._headWidth = value;
                _shouldSerializeheadWidth = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool headWidthSpecified
        {
            get
            {
                return this._headWidth.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._headWidth = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxCurrentDriving
        {
            get
            {
                if (this._maxCurrentDriving.HasValue)
                {
                    return this._maxCurrentDriving.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxCurrentDriving = value;
                _shouldSerializemaxCurrentDriving = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxCurrentDrivingSpecified
        {
            get
            {
                return this._maxCurrentDriving.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxCurrentDriving = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxCurrentStandstill
        {
            get
            {
                if (this._maxCurrentStandstill.HasValue)
                {
                    return this._maxCurrentStandstill.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxCurrentStandstill = value;
                _shouldSerializemaxCurrentStandstill = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxCurrentStandstillSpecified
        {
            get
            {
                return this._maxCurrentStandstill.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxCurrentStandstill = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPantograph));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether headWidth should be serialized
        /// </summary>
        public virtual bool ShouldSerializeheadWidth()
        {
            if (_shouldSerializeheadWidth)
            {
                return true;
            }
            return (_headWidth != default(decimal));
        }

        /// <summary>
        /// Test whether maxCurrentDriving should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxCurrentDriving()
        {
            if (_shouldSerializemaxCurrentDriving)
            {
                return true;
            }
            return (_maxCurrentDriving != default(decimal));
        }

        /// <summary>
        /// Test whether maxCurrentStandstill should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxCurrentStandstill()
        {
            if (_shouldSerializemaxCurrentStandstill)
            {
                return true;
            }
            return (_maxCurrentStandstill != default(decimal));
        }

        /// <summary>
        /// Test whether orderNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorderNumber()
        {
            return !string.IsNullOrEmpty(orderNumber);
        }

        /// <summary>
        /// Test whether designType should be serialized
        /// </summary>
        public virtual bool ShouldSerializedesignType()
        {
            return !string.IsNullOrEmpty(designType);
        }

        /// <summary>
        /// Test whether positionOnSection should be serialized
        /// </summary>
        public virtual bool ShouldSerializepositionOnSection()
        {
            return !string.IsNullOrEmpty(positionOnSection);
        }

        /// <summary>
        /// Test whether fittedSection should be serialized
        /// </summary>
        public virtual bool ShouldSerializefittedSection()
        {
            return !string.IsNullOrEmpty(fittedSection);
        }

        /// <summary>
        /// Test whether controlType should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrolType()
        {
            return !string.IsNullOrEmpty(controlType);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPantograph object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPantograph object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPantograph object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPantograph obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPantograph);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPantograph obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tPantograph Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPantograph)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPantograph Deserialize(System.IO.Stream s)
        {
            return ((tPantograph)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPantograph object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPantograph object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPantograph object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPantograph obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPantograph);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPantograph obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tPantograph LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eStorage : tStorage
    {

        private tEfficiencyCurve _efficiency;

        private static XmlSerializer serializer;

        public eStorage()
        {
            this._efficiency = new tEfficiencyCurve();
        }

        public tEfficiencyCurve efficiency
        {
            get
            {
                return this._efficiency;
            }
            set
            {
                this._efficiency = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eStorage));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether efficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializeefficiency()
        {
            return (_efficiency != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eStorage object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eStorage object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eStorage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eStorage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eStorage);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eStorage obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eStorage Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eStorage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eStorage Deserialize(System.IO.Stream s)
        {
            return ((eStorage)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eStorage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eStorage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eStorage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eStorage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eStorage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eStorage obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eStorage LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eStorage))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStorage : tElementWithIDAndName
    {

        private bool _shouldSerializemeanStorageEfficiency;

        private bool _shouldSerializedischargingEfficiency;

        private bool _shouldSerializechargingEfficiency;

        private bool _shouldSerializemaximumChargingEnergy;

        private bool _shouldSerializemaximumPowerDischarging;

        private bool _shouldSerializemaximumPowerCharging;

        private bool _shouldSerializemaximumCurrentDischarging;

        private bool _shouldSerializemaximumCurrentCharging;

        private decimal _maximumCurrentCharging;

        private decimal _maximumCurrentDischarging;

        private decimal _maximumPowerCharging;

        private decimal _maximumPowerDischarging;

        private decimal _maximumChargingEnergy;

        private System.Nullable<decimal> _chargingEfficiency;

        private System.Nullable<decimal> _dischargingEfficiency;

        private System.Nullable<decimal> _meanStorageEfficiency;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maximumCurrentCharging
        {
            get
            {
                return this._maximumCurrentCharging;
            }
            set
            {
                this._maximumCurrentCharging = value;
                _shouldSerializemaximumCurrentCharging = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maximumCurrentDischarging
        {
            get
            {
                return this._maximumCurrentDischarging;
            }
            set
            {
                this._maximumCurrentDischarging = value;
                _shouldSerializemaximumCurrentDischarging = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maximumPowerCharging
        {
            get
            {
                return this._maximumPowerCharging;
            }
            set
            {
                this._maximumPowerCharging = value;
                _shouldSerializemaximumPowerCharging = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maximumPowerDischarging
        {
            get
            {
                return this._maximumPowerDischarging;
            }
            set
            {
                this._maximumPowerDischarging = value;
                _shouldSerializemaximumPowerDischarging = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maximumChargingEnergy
        {
            get
            {
                return this._maximumChargingEnergy;
            }
            set
            {
                this._maximumChargingEnergy = value;
                _shouldSerializemaximumChargingEnergy = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal chargingEfficiency
        {
            get
            {
                if (this._chargingEfficiency.HasValue)
                {
                    return this._chargingEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._chargingEfficiency = value;
                _shouldSerializechargingEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool chargingEfficiencySpecified
        {
            get
            {
                return this._chargingEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._chargingEfficiency = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal dischargingEfficiency
        {
            get
            {
                if (this._dischargingEfficiency.HasValue)
                {
                    return this._dischargingEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._dischargingEfficiency = value;
                _shouldSerializedischargingEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dischargingEfficiencySpecified
        {
            get
            {
                return this._dischargingEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dischargingEfficiency = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meanStorageEfficiency
        {
            get
            {
                if (this._meanStorageEfficiency.HasValue)
                {
                    return this._meanStorageEfficiency.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meanStorageEfficiency = value;
                _shouldSerializemeanStorageEfficiency = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meanStorageEfficiencySpecified
        {
            get
            {
                return this._meanStorageEfficiency.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meanStorageEfficiency = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStorage));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether maximumCurrentCharging should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaximumCurrentCharging()
        {
            if (_shouldSerializemaximumCurrentCharging)
            {
                return true;
            }
            return (_maximumCurrentCharging != default(decimal));
        }

        /// <summary>
        /// Test whether maximumCurrentDischarging should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaximumCurrentDischarging()
        {
            if (_shouldSerializemaximumCurrentDischarging)
            {
                return true;
            }
            return (_maximumCurrentDischarging != default(decimal));
        }

        /// <summary>
        /// Test whether maximumPowerCharging should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaximumPowerCharging()
        {
            if (_shouldSerializemaximumPowerCharging)
            {
                return true;
            }
            return (_maximumPowerCharging != default(decimal));
        }

        /// <summary>
        /// Test whether maximumPowerDischarging should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaximumPowerDischarging()
        {
            if (_shouldSerializemaximumPowerDischarging)
            {
                return true;
            }
            return (_maximumPowerDischarging != default(decimal));
        }

        /// <summary>
        /// Test whether maximumChargingEnergy should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaximumChargingEnergy()
        {
            if (_shouldSerializemaximumChargingEnergy)
            {
                return true;
            }
            return (_maximumChargingEnergy != default(decimal));
        }

        /// <summary>
        /// Test whether chargingEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializechargingEfficiency()
        {
            if (_shouldSerializechargingEfficiency)
            {
                return true;
            }
            return (_chargingEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether dischargingEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializedischargingEfficiency()
        {
            if (_shouldSerializedischargingEfficiency)
            {
                return true;
            }
            return (_dischargingEfficiency != default(decimal));
        }

        /// <summary>
        /// Test whether meanStorageEfficiency should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeanStorageEfficiency()
        {
            if (_shouldSerializemeanStorageEfficiency)
            {
                return true;
            }
            return (_meanStorageEfficiency != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStorage object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStorage object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStorage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStorage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStorage);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStorage obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tStorage Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStorage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStorage Deserialize(System.IO.Stream s)
        {
            return ((tStorage)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStorage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStorage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStorage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStorage obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStorage);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStorage obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tStorage LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eMonitoring : tMonitoring
    {

        private eETCS _etcs;

        private List<tNationalSystem> _nationalSystem;

        private List<eTrainRadio> _trainRadio;

        private List<tOtherEquipment> _otherEquipment;

        private static XmlSerializer serializer;

        public eMonitoring()
        {
            this._otherEquipment = new List<tOtherEquipment>();
            this._trainRadio = new List<eTrainRadio>();
            this._nationalSystem = new List<tNationalSystem>();
            this._etcs = new eETCS();
        }

        public eETCS etcs
        {
            get
            {
                return this._etcs;
            }
            set
            {
                this._etcs = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("nationalSystem")]
        public List<tNationalSystem> nationalSystem
        {
            get
            {
                return this._nationalSystem;
            }
            set
            {
                this._nationalSystem = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("trainRadio")]
        public List<eTrainRadio> trainRadio
        {
            get
            {
                return this._trainRadio;
            }
            set
            {
                this._trainRadio = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("otherEquipment")]
        public List<tOtherEquipment> otherEquipment
        {
            get
            {
                return this._otherEquipment;
            }
            set
            {
                this._otherEquipment = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eMonitoring));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether nationalSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializenationalSystem()
        {
            return nationalSystem != null && nationalSystem.Count > 0;
        }

        /// <summary>
        /// Test whether trainRadio should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainRadio()
        {
            return trainRadio != null && trainRadio.Count > 0;
        }

        /// <summary>
        /// Test whether otherEquipment should be serialized
        /// </summary>
        public virtual bool ShouldSerializeotherEquipment()
        {
            return otherEquipment != null && otherEquipment.Count > 0;
        }

        /// <summary>
        /// Test whether etcs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeetcs()
        {
            return (_etcs != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eMonitoring object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eMonitoring object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eMonitoring object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eMonitoring obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eMonitoring);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eMonitoring obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eMonitoring Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eMonitoring)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eMonitoring Deserialize(System.IO.Stream s)
        {
            return ((eMonitoring)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eMonitoring object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eMonitoring object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eMonitoring object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eMonitoring obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eMonitoring);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eMonitoring obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eMonitoring LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eETCS : tETCS
    {

        private tSpecificTransmissionModule _specificTransmissionModule;

        private static XmlSerializer serializer;

        public eETCS()
        {
            this._specificTransmissionModule = new tSpecificTransmissionModule();
        }

        public tSpecificTransmissionModule specificTransmissionModule
        {
            get
            {
                return this._specificTransmissionModule;
            }
            set
            {
                this._specificTransmissionModule = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eETCS));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether specificTransmissionModule should be serialized
        /// </summary>
        public virtual bool ShouldSerializespecificTransmissionModule()
        {
            return (_specificTransmissionModule != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eETCS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eETCS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eETCS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eETCS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eETCS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eETCS obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eETCS Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eETCS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eETCS Deserialize(System.IO.Stream s)
        {
            return ((eETCS)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eETCS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eETCS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eETCS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eETCS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eETCS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eETCS obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eETCS LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSpecificTransmissionModule : tElementWithIDAndName
    {

        private string _onBoardUnitID;

        private string _softwareVersion;

        private string _nationalSystemRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string onBoardUnitID
        {
            get
            {
                return this._onBoardUnitID;
            }
            set
            {
                this._onBoardUnitID = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string softwareVersion
        {
            get
            {
                return this._softwareVersion;
            }
            set
            {
                this._softwareVersion = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string nationalSystemRef
        {
            get
            {
                return this._nationalSystemRef;
            }
            set
            {
                this._nationalSystemRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSpecificTransmissionModule));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether onBoardUnitID should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonBoardUnitID()
        {
            return !string.IsNullOrEmpty(onBoardUnitID);
        }

        /// <summary>
        /// Test whether softwareVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializesoftwareVersion()
        {
            return !string.IsNullOrEmpty(softwareVersion);
        }

        /// <summary>
        /// Test whether nationalSystemRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializenationalSystemRef()
        {
            return !string.IsNullOrEmpty(nationalSystemRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSpecificTransmissionModule object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSpecificTransmissionModule object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSpecificTransmissionModule object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSpecificTransmissionModule obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpecificTransmissionModule);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSpecificTransmissionModule obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSpecificTransmissionModule Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSpecificTransmissionModule)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSpecificTransmissionModule Deserialize(System.IO.Stream s)
        {
            return ((tSpecificTransmissionModule)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSpecificTransmissionModule object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSpecificTransmissionModule object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSpecificTransmissionModule object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSpecificTransmissionModule obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpecificTransmissionModule);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSpecificTransmissionModule obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSpecificTransmissionModule LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eETCS))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tETCS : tElementWithIDAndName
    {

        private bool _shouldSerializelevel_3;

        private bool _shouldSerializelevel_2;

        private bool _shouldSerializelevel_1;

        private bool _shouldSerializelevel_0;

        private string _onBoardUnitID;

        private string _softwareVersion;

        private string _srsVersion;

        private System.Nullable<bool> _level_0;

        private System.Nullable<bool> _level_1;

        private System.Nullable<bool> _level_2;

        private System.Nullable<bool> _level_3;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string onBoardUnitID
        {
            get
            {
                return this._onBoardUnitID;
            }
            set
            {
                this._onBoardUnitID = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string softwareVersion
        {
            get
            {
                return this._softwareVersion;
            }
            set
            {
                this._softwareVersion = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string srsVersion
        {
            get
            {
                return this._srsVersion;
            }
            set
            {
                this._srsVersion = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_0
        {
            get
            {
                if (this._level_0.HasValue)
                {
                    return this._level_0.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_0 = value;
                _shouldSerializelevel_0 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_0Specified
        {
            get
            {
                return this._level_0.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_0 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_1
        {
            get
            {
                if (this._level_1.HasValue)
                {
                    return this._level_1.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_1 = value;
                _shouldSerializelevel_1 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_1Specified
        {
            get
            {
                return this._level_1.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_1 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_2
        {
            get
            {
                if (this._level_2.HasValue)
                {
                    return this._level_2.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_2 = value;
                _shouldSerializelevel_2 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_2Specified
        {
            get
            {
                return this._level_2.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_2 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_3
        {
            get
            {
                if (this._level_3.HasValue)
                {
                    return this._level_3.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_3 = value;
                _shouldSerializelevel_3 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_3Specified
        {
            get
            {
                return this._level_3.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_3 = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tETCS));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether level_0 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_0()
        {
            if (_shouldSerializelevel_0)
            {
                return true;
            }
            return (_level_0 != default(bool));
        }

        /// <summary>
        /// Test whether level_1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_1()
        {
            if (_shouldSerializelevel_1)
            {
                return true;
            }
            return (_level_1 != default(bool));
        }

        /// <summary>
        /// Test whether level_2 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_2()
        {
            if (_shouldSerializelevel_2)
            {
                return true;
            }
            return (_level_2 != default(bool));
        }

        /// <summary>
        /// Test whether level_3 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_3()
        {
            if (_shouldSerializelevel_3)
            {
                return true;
            }
            return (_level_3 != default(bool));
        }

        /// <summary>
        /// Test whether onBoardUnitID should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonBoardUnitID()
        {
            return !string.IsNullOrEmpty(onBoardUnitID);
        }

        /// <summary>
        /// Test whether softwareVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializesoftwareVersion()
        {
            return !string.IsNullOrEmpty(softwareVersion);
        }

        /// <summary>
        /// Test whether srsVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializesrsVersion()
        {
            return !string.IsNullOrEmpty(srsVersion);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tETCS object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tETCS object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tETCS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tETCS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tETCS);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tETCS obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tETCS Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tETCS)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tETCS Deserialize(System.IO.Stream s)
        {
            return ((tETCS)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tETCS object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tETCS object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tETCS object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tETCS obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tETCS);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tETCS obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tETCS LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tNationalSystem : tElementWithIDAndName
    {

        private bool _shouldSerializetrainProtectionMonitoring;

        private bool _shouldSerializetrainProtectionMedium;

        private string _onBoardUnitID;

        private string _softwareVersion;

        private string _type;

        private tTrainProtectionMedium _trainProtectionMedium;

        private tTrainProtectionMonitoring _trainProtectionMonitoring;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string onBoardUnitID
        {
            get
            {
                return this._onBoardUnitID;
            }
            set
            {
                this._onBoardUnitID = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string softwareVersion
        {
            get
            {
                return this._softwareVersion;
            }
            set
            {
                this._softwareVersion = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTrainProtectionMedium trainProtectionMedium
        {
            get
            {
                return this._trainProtectionMedium;
            }
            set
            {
                this._trainProtectionMedium = value;
                _shouldSerializetrainProtectionMedium = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTrainProtectionMonitoring trainProtectionMonitoring
        {
            get
            {
                return this._trainProtectionMonitoring;
            }
            set
            {
                this._trainProtectionMonitoring = value;
                _shouldSerializetrainProtectionMonitoring = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tNationalSystem));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainProtectionMedium should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionMedium()
        {
            if (_shouldSerializetrainProtectionMedium)
            {
                return true;
            }
            return (_trainProtectionMedium != default(tTrainProtectionMedium));
        }

        /// <summary>
        /// Test whether trainProtectionMonitoring should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionMonitoring()
        {
            if (_shouldSerializetrainProtectionMonitoring)
            {
                return true;
            }
            return (_trainProtectionMonitoring != default(tTrainProtectionMonitoring));
        }

        /// <summary>
        /// Test whether onBoardUnitID should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonBoardUnitID()
        {
            return !string.IsNullOrEmpty(onBoardUnitID);
        }

        /// <summary>
        /// Test whether softwareVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializesoftwareVersion()
        {
            return !string.IsNullOrEmpty(softwareVersion);
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tNationalSystem object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tNationalSystem object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tNationalSystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tNationalSystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tNationalSystem);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tNationalSystem obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tNationalSystem Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tNationalSystem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tNationalSystem Deserialize(System.IO.Stream s)
        {
            return ((tNationalSystem)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tNationalSystem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tNationalSystem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tNationalSystem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tNationalSystem obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tNationalSystem);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tNationalSystem obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tNationalSystem LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tTrainProtectionMedium
    {

        /// <remarks/>
        none,

        /// <remarks/>
        mechanical,

        /// <remarks/>
        electric,

        /// <remarks/>
        inductive,

        /// <remarks/>
        magnetic,

        /// <remarks/>
        optical,

        /// <remarks/>
        radio,

        /// <remarks/>
        rail,

        /// <remarks/>
        cable,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tTrainProtectionMonitoring
    {

        /// <remarks/>
        none,

        /// <remarks/>
        intermittent,

        /// <remarks/>
        continuous,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrainRadio : tTrainRadio
    {

        private string _radioSystem;

        private static XmlSerializer serializer;

        public string radioSystem
        {
            get
            {
                return this._radioSystem;
            }
            set
            {
                this._radioSystem = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrainRadio));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether radioSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializeradioSystem()
        {
            return !string.IsNullOrEmpty(radioSystem);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrainRadio object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrainRadio object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrainRadio object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrainRadio obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainRadio);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrainRadio obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrainRadio Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrainRadio)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrainRadio Deserialize(System.IO.Stream s)
        {
            return ((eTrainRadio)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrainRadio object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrainRadio object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrainRadio object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrainRadio obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainRadio);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrainRadio obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrainRadio LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrainRadio))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainRadio : tElementWithIDAndName
    {

        private string _onBoardUnitID;

        private string _softwareVersion;

        private string _modulation;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string onBoardUnitID
        {
            get
            {
                return this._onBoardUnitID;
            }
            set
            {
                this._onBoardUnitID = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string softwareVersion
        {
            get
            {
                return this._softwareVersion;
            }
            set
            {
                this._softwareVersion = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string modulation
        {
            get
            {
                return this._modulation;
            }
            set
            {
                this._modulation = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainRadio));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether onBoardUnitID should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonBoardUnitID()
        {
            return !string.IsNullOrEmpty(onBoardUnitID);
        }

        /// <summary>
        /// Test whether softwareVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializesoftwareVersion()
        {
            return !string.IsNullOrEmpty(softwareVersion);
        }

        /// <summary>
        /// Test whether modulation should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodulation()
        {
            return !string.IsNullOrEmpty(modulation);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainRadio object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainRadio object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainRadio object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainRadio obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainRadio);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainRadio obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainRadio Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainRadio)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainRadio Deserialize(System.IO.Stream s)
        {
            return ((tTrainRadio)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainRadio object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainRadio object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainRadio object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainRadio obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainRadio);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainRadio obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainRadio LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOtherEquipment : tElementWithIDAndName
    {

        private string _onBoardUnitID;

        private string _softwareVersion;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string onBoardUnitID
        {
            get
            {
                return this._onBoardUnitID;
            }
            set
            {
                this._onBoardUnitID = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string softwareVersion
        {
            get
            {
                return this._softwareVersion;
            }
            set
            {
                this._softwareVersion = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOtherEquipment));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether onBoardUnitID should be serialized
        /// </summary>
        public virtual bool ShouldSerializeonBoardUnitID()
        {
            return !string.IsNullOrEmpty(onBoardUnitID);
        }

        /// <summary>
        /// Test whether softwareVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializesoftwareVersion()
        {
            return !string.IsNullOrEmpty(softwareVersion);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOtherEquipment object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOtherEquipment object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOtherEquipment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOtherEquipment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOtherEquipment);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOtherEquipment obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOtherEquipment Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOtherEquipment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOtherEquipment Deserialize(System.IO.Stream s)
        {
            return ((tOtherEquipment)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOtherEquipment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOtherEquipment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOtherEquipment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOtherEquipment obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOtherEquipment);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOtherEquipment obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOtherEquipment LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eMonitoring))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tMonitoring : ParentContainer
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tMonitoring));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tMonitoring object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tMonitoring object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tMonitoring object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tMonitoring obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMonitoring);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tMonitoring obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tMonitoring Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tMonitoring)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tMonitoring Deserialize(System.IO.Stream s)
        {
            return ((tMonitoring)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tMonitoring object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tMonitoring object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tMonitoring object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tMonitoring obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMonitoring);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tMonitoring obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tMonitoring LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eEngine))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tEngine : ParentContainer
    {

        private bool _shouldSerializehaulageLoad;

        private string _axleDriveType;

        private System.Nullable<decimal> _haulageLoad;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string axleDriveType
        {
            get
            {
                return this._axleDriveType;
            }
            set
            {
                this._axleDriveType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal haulageLoad
        {
            get
            {
                if (this._haulageLoad.HasValue)
                {
                    return this._haulageLoad.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._haulageLoad = value;
                _shouldSerializehaulageLoad = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool haulageLoadSpecified
        {
            get
            {
                return this._haulageLoad.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._haulageLoad = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tEngine));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether haulageLoad should be serialized
        /// </summary>
        public virtual bool ShouldSerializehaulageLoad()
        {
            if (_shouldSerializehaulageLoad)
            {
                return true;
            }
            return (_haulageLoad != default(decimal));
        }

        /// <summary>
        /// Test whether axleDriveType should be serialized
        /// </summary>
        public virtual bool ShouldSerializeaxleDriveType()
        {
            return !string.IsNullOrEmpty(axleDriveType);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tEngine object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tEngine object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tEngine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tEngine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEngine);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tEngine obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tEngine Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tEngine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tEngine Deserialize(System.IO.Stream s)
        {
            return ((tEngine)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tEngine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tEngine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tEngine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tEngine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEngine);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tEngine obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tEngine LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eWagon : tWagon
    {

        private ePassenger _passenger;

        private eGoods _goods;

        private List<tElectrificationSystem> _auxiliarySupplySystem;

        private List<tDriversCabType> _driversCab;

        private tRackTractionType _rackTraction;

        private eCouplers _couplers;

        private static XmlSerializer serializer;

        public eWagon()
        {
            this._couplers = new eCouplers();
            this._rackTraction = new tRackTractionType();
            this._driversCab = new List<tDriversCabType>();
            this._auxiliarySupplySystem = new List<tElectrificationSystem>();
            this._goods = new eGoods();
            this._passenger = new ePassenger();
        }

        public ePassenger passenger
        {
            get
            {
                return this._passenger;
            }
            set
            {
                this._passenger = value;
            }
        }

        public eGoods goods
        {
            get
            {
                return this._goods;
            }
            set
            {
                this._goods = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("auxiliarySupplySystem")]
        public List<tElectrificationSystem> auxiliarySupplySystem
        {
            get
            {
                return this._auxiliarySupplySystem;
            }
            set
            {
                this._auxiliarySupplySystem = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("driversCab")]
        public List<tDriversCabType> driversCab
        {
            get
            {
                return this._driversCab;
            }
            set
            {
                this._driversCab = value;
            }
        }

        public tRackTractionType rackTraction
        {
            get
            {
                return this._rackTraction;
            }
            set
            {
                this._rackTraction = value;
            }
        }

        public eCouplers couplers
        {
            get
            {
                return this._couplers;
            }
            set
            {
                this._couplers = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eWagon));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether auxiliarySupplySystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializeauxiliarySupplySystem()
        {
            return auxiliarySupplySystem != null && auxiliarySupplySystem.Count > 0;
        }

        /// <summary>
        /// Test whether driversCab should be serialized
        /// </summary>
        public virtual bool ShouldSerializedriversCab()
        {
            return driversCab != null && driversCab.Count > 0;
        }

        /// <summary>
        /// Test whether passenger should be serialized
        /// </summary>
        public virtual bool ShouldSerializepassenger()
        {
            return (_passenger != null);
        }

        /// <summary>
        /// Test whether goods should be serialized
        /// </summary>
        public virtual bool ShouldSerializegoods()
        {
            return (_goods != null);
        }

        /// <summary>
        /// Test whether rackTraction should be serialized
        /// </summary>
        public virtual bool ShouldSerializerackTraction()
        {
            return (_rackTraction != null);
        }

        /// <summary>
        /// Test whether couplers should be serialized
        /// </summary>
        public virtual bool ShouldSerializecouplers()
        {
            return (_couplers != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eWagon object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eWagon object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eWagon object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eWagon obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eWagon);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eWagon obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eWagon Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eWagon)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eWagon Deserialize(System.IO.Stream s)
        {
            return ((eWagon)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eWagon object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eWagon object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eWagon object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eWagon obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eWagon);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eWagon obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eWagon LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class ePassenger : tPassenger
    {

        private List<tGangway> _gangway;

        private tDoors _doors;

        private tTilting _tilting1;

        private static XmlSerializer serializer;

        public ePassenger()
        {
            this._tilting1 = new tTilting();
            this._doors = new tDoors();
            this._gangway = new List<tGangway>();
        }

        [System.Xml.Serialization.XmlElementAttribute("gangway")]
        public List<tGangway> gangway
        {
            get
            {
                return this._gangway;
            }
            set
            {
                this._gangway = value;
            }
        }

        public tDoors doors
        {
            get
            {
                return this._doors;
            }
            set
            {
                this._doors = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("tilting")]
        public tTilting tilting1
        {
            get
            {
                return this._tilting1;
            }
            set
            {
                this._tilting1 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ePassenger));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether gangway should be serialized
        /// </summary>
        public virtual bool ShouldSerializegangway()
        {
            return gangway != null && gangway.Count > 0;
        }

        /// <summary>
        /// Test whether doors should be serialized
        /// </summary>
        public virtual bool ShouldSerializedoors()
        {
            return (_doors != null);
        }

        /// <summary>
        /// Test whether tilting1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializetilting1()
        {
            return (_tilting1 != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ePassenger object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ePassenger object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ePassenger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ePassenger obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePassenger);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ePassenger obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static ePassenger Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ePassenger)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ePassenger Deserialize(System.IO.Stream s)
        {
            return ((ePassenger)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ePassenger object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ePassenger object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ePassenger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ePassenger obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePassenger);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ePassenger obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static ePassenger LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tGangway : ParentContainer
    {

        private bool _shouldSerializegangwayWidth;

        private bool _shouldSerializegangwayHeight;

        private bool _shouldSerializefloorLevel;

        private bool _shouldSerializerearEnd;

        private bool _shouldSerializefrontEnd;

        private bool _frontEnd;

        private bool _rearEnd;

        private string _position;

        private string _designType;

        private System.Nullable<decimal> _floorLevel;

        private System.Nullable<decimal> _gangwayHeight;

        private System.Nullable<decimal> _gangwayWidth;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool frontEnd
        {
            get
            {
                return this._frontEnd;
            }
            set
            {
                this._frontEnd = value;
                _shouldSerializefrontEnd = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool rearEnd
        {
            get
            {
                return this._rearEnd;
            }
            set
            {
                this._rearEnd = value;
                _shouldSerializerearEnd = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string position
        {
            get
            {
                return this._position;
            }
            set
            {
                this._position = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string designType
        {
            get
            {
                return this._designType;
            }
            set
            {
                this._designType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal floorLevel
        {
            get
            {
                if (this._floorLevel.HasValue)
                {
                    return this._floorLevel.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._floorLevel = value;
                _shouldSerializefloorLevel = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool floorLevelSpecified
        {
            get
            {
                return this._floorLevel.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._floorLevel = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal gangwayHeight
        {
            get
            {
                if (this._gangwayHeight.HasValue)
                {
                    return this._gangwayHeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._gangwayHeight = value;
                _shouldSerializegangwayHeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool gangwayHeightSpecified
        {
            get
            {
                return this._gangwayHeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._gangwayHeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal gangwayWidth
        {
            get
            {
                if (this._gangwayWidth.HasValue)
                {
                    return this._gangwayWidth.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._gangwayWidth = value;
                _shouldSerializegangwayWidth = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool gangwayWidthSpecified
        {
            get
            {
                return this._gangwayWidth.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._gangwayWidth = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tGangway));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether frontEnd should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrontEnd()
        {
            if (_shouldSerializefrontEnd)
            {
                return true;
            }
            return (_frontEnd != default(bool));
        }

        /// <summary>
        /// Test whether rearEnd should be serialized
        /// </summary>
        public virtual bool ShouldSerializerearEnd()
        {
            if (_shouldSerializerearEnd)
            {
                return true;
            }
            return (_rearEnd != default(bool));
        }

        /// <summary>
        /// Test whether floorLevel should be serialized
        /// </summary>
        public virtual bool ShouldSerializefloorLevel()
        {
            if (_shouldSerializefloorLevel)
            {
                return true;
            }
            return (_floorLevel != default(decimal));
        }

        /// <summary>
        /// Test whether gangwayHeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializegangwayHeight()
        {
            if (_shouldSerializegangwayHeight)
            {
                return true;
            }
            return (_gangwayHeight != default(decimal));
        }

        /// <summary>
        /// Test whether gangwayWidth should be serialized
        /// </summary>
        public virtual bool ShouldSerializegangwayWidth()
        {
            if (_shouldSerializegangwayWidth)
            {
                return true;
            }
            return (_gangwayWidth != default(decimal));
        }

        /// <summary>
        /// Test whether position should be serialized
        /// </summary>
        public virtual bool ShouldSerializeposition()
        {
            return !string.IsNullOrEmpty(position);
        }

        /// <summary>
        /// Test whether designType should be serialized
        /// </summary>
        public virtual bool ShouldSerializedesignType()
        {
            return !string.IsNullOrEmpty(designType);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tGangway object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tGangway object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tGangway object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tGangway obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGangway);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tGangway obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tGangway Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tGangway)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tGangway Deserialize(System.IO.Stream s)
        {
            return ((tGangway)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tGangway object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tGangway object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tGangway object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tGangway obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGangway);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tGangway obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tGangway LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tDoors : ParentContainer
    {

        private bool _shouldSerializelockingSpeed;

        private bool _shouldSerializefootStepHeight;

        private bool _shouldSerializeentranceWidth;

        private bool _shouldSerializeentranceLength;

        private bool _shouldSerializeentranceHeight;

        private string _number;

        private System.Nullable<decimal> _entranceHeight;

        private System.Nullable<decimal> _entranceLength;

        private System.Nullable<decimal> _entranceWidth;

        private System.Nullable<decimal> _footStepHeight;

        private System.Nullable<decimal> _lockingSpeed;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string number
        {
            get
            {
                return this._number;
            }
            set
            {
                this._number = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal entranceHeight
        {
            get
            {
                if (this._entranceHeight.HasValue)
                {
                    return this._entranceHeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._entranceHeight = value;
                _shouldSerializeentranceHeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool entranceHeightSpecified
        {
            get
            {
                return this._entranceHeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._entranceHeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal entranceLength
        {
            get
            {
                if (this._entranceLength.HasValue)
                {
                    return this._entranceLength.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._entranceLength = value;
                _shouldSerializeentranceLength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool entranceLengthSpecified
        {
            get
            {
                return this._entranceLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._entranceLength = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal entranceWidth
        {
            get
            {
                if (this._entranceWidth.HasValue)
                {
                    return this._entranceWidth.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._entranceWidth = value;
                _shouldSerializeentranceWidth = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool entranceWidthSpecified
        {
            get
            {
                return this._entranceWidth.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._entranceWidth = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal footStepHeight
        {
            get
            {
                if (this._footStepHeight.HasValue)
                {
                    return this._footStepHeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._footStepHeight = value;
                _shouldSerializefootStepHeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool footStepHeightSpecified
        {
            get
            {
                return this._footStepHeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._footStepHeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal lockingSpeed
        {
            get
            {
                if (this._lockingSpeed.HasValue)
                {
                    return this._lockingSpeed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._lockingSpeed = value;
                _shouldSerializelockingSpeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lockingSpeedSpecified
        {
            get
            {
                return this._lockingSpeed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._lockingSpeed = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tDoors));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether entranceHeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializeentranceHeight()
        {
            if (_shouldSerializeentranceHeight)
            {
                return true;
            }
            return (_entranceHeight != default(decimal));
        }

        /// <summary>
        /// Test whether entranceLength should be serialized
        /// </summary>
        public virtual bool ShouldSerializeentranceLength()
        {
            if (_shouldSerializeentranceLength)
            {
                return true;
            }
            return (_entranceLength != default(decimal));
        }

        /// <summary>
        /// Test whether entranceWidth should be serialized
        /// </summary>
        public virtual bool ShouldSerializeentranceWidth()
        {
            if (_shouldSerializeentranceWidth)
            {
                return true;
            }
            return (_entranceWidth != default(decimal));
        }

        /// <summary>
        /// Test whether footStepHeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializefootStepHeight()
        {
            if (_shouldSerializefootStepHeight)
            {
                return true;
            }
            return (_footStepHeight != default(decimal));
        }

        /// <summary>
        /// Test whether lockingSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializelockingSpeed()
        {
            if (_shouldSerializelockingSpeed)
            {
                return true;
            }
            return (_lockingSpeed != default(decimal));
        }

        /// <summary>
        /// Test whether number should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumber()
        {
            return !string.IsNullOrEmpty(number);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tDoors object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tDoors object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tDoors object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tDoors obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDoors);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tDoors obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tDoors Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tDoors)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tDoors Deserialize(System.IO.Stream s)
        {
            return ((tDoors)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tDoors object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tDoors object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tDoors object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tDoors obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDoors);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tDoors obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tDoors LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTilting : ParentContainer
    {

        private bool _shouldSerializetiltingSpeed;

        private bool _shouldSerializeactuation;

        private bool _shouldSerializemaxTiltingAngle;

        private System.Nullable<decimal> _maxTiltingAngle;

        private System.Nullable<tTiltingActuationType> _actuation;

        private System.Nullable<decimal> _tiltingSpeed;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxTiltingAngle
        {
            get
            {
                if (this._maxTiltingAngle.HasValue)
                {
                    return this._maxTiltingAngle.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxTiltingAngle = value;
                _shouldSerializemaxTiltingAngle = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxTiltingAngleSpecified
        {
            get
            {
                return this._maxTiltingAngle.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxTiltingAngle = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTiltingActuationType actuation
        {
            get
            {
                if (this._actuation.HasValue)
                {
                    return this._actuation.Value;
                }
                else
                {
                    return default(tTiltingActuationType);
                }
            }
            set
            {
                this._actuation = value;
                _shouldSerializeactuation = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool actuationSpecified
        {
            get
            {
                return this._actuation.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._actuation = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal tiltingSpeed
        {
            get
            {
                if (this._tiltingSpeed.HasValue)
                {
                    return this._tiltingSpeed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._tiltingSpeed = value;
                _shouldSerializetiltingSpeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tiltingSpeedSpecified
        {
            get
            {
                return this._tiltingSpeed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._tiltingSpeed = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTilting));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether maxTiltingAngle should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxTiltingAngle()
        {
            if (_shouldSerializemaxTiltingAngle)
            {
                return true;
            }
            return (_maxTiltingAngle != default(decimal));
        }

        /// <summary>
        /// Test whether actuation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeactuation()
        {
            if (_shouldSerializeactuation)
            {
                return true;
            }
            return (_actuation != default(tTiltingActuationType));
        }

        /// <summary>
        /// Test whether tiltingSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializetiltingSpeed()
        {
            if (_shouldSerializetiltingSpeed)
            {
                return true;
            }
            return (_tiltingSpeed != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTilting object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTilting object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTilting object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTilting obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTilting);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTilting obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTilting Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTilting)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTilting Deserialize(System.IO.Stream s)
        {
            return ((tTilting)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTilting object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTilting object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTilting object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTilting obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTilting);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTilting obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTilting LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tTiltingActuationType
    {

        /// <remarks/>
        none,

        /// <remarks/>
        active,

        /// <remarks/>
        passive,

        /// <remarks/>
        rollCompensation,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ePassenger))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPassenger : ePassengerFacility
    {

        private bool _shouldSerializeemergencyBrakeDeactivation;

        private bool _shouldSerializeairTightness;

        private bool _shouldSerializetilting;

        private bool _shouldSerializedrivingCab;

        private bool _shouldSerializedeck;

        private System.Nullable<tVerbalCounter> _deck;

        private System.Nullable<bool> _drivingCab;

        private System.Nullable<bool> _tilting;

        private System.Nullable<bool> _airTightness;

        private System.Nullable<bool> _emergencyBrakeDeactivation;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tVerbalCounter deck
        {
            get
            {
                if (this._deck.HasValue)
                {
                    return this._deck.Value;
                }
                else
                {
                    return default(tVerbalCounter);
                }
            }
            set
            {
                this._deck = value;
                _shouldSerializedeck = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deckSpecified
        {
            get
            {
                return this._deck.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._deck = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool drivingCab
        {
            get
            {
                if (this._drivingCab.HasValue)
                {
                    return this._drivingCab.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._drivingCab = value;
                _shouldSerializedrivingCab = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool drivingCabSpecified
        {
            get
            {
                return this._drivingCab.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._drivingCab = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool tilting
        {
            get
            {
                if (this._tilting.HasValue)
                {
                    return this._tilting.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._tilting = value;
                _shouldSerializetilting = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool tiltingSpecified
        {
            get
            {
                return this._tilting.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._tilting = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool airTightness
        {
            get
            {
                if (this._airTightness.HasValue)
                {
                    return this._airTightness.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._airTightness = value;
                _shouldSerializeairTightness = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool airTightnessSpecified
        {
            get
            {
                return this._airTightness.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._airTightness = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool emergencyBrakeDeactivation
        {
            get
            {
                if (this._emergencyBrakeDeactivation.HasValue)
                {
                    return this._emergencyBrakeDeactivation.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._emergencyBrakeDeactivation = value;
                _shouldSerializeemergencyBrakeDeactivation = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool emergencyBrakeDeactivationSpecified
        {
            get
            {
                return this._emergencyBrakeDeactivation.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._emergencyBrakeDeactivation = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPassenger));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether deck should be serialized
        /// </summary>
        public virtual bool ShouldSerializedeck()
        {
            if (_shouldSerializedeck)
            {
                return true;
            }
            return (_deck != default(tVerbalCounter));
        }

        /// <summary>
        /// Test whether drivingCab should be serialized
        /// </summary>
        public virtual bool ShouldSerializedrivingCab()
        {
            if (_shouldSerializedrivingCab)
            {
                return true;
            }
            return (_drivingCab != default(bool));
        }

        /// <summary>
        /// Test whether tilting should be serialized
        /// </summary>
        public virtual bool ShouldSerializetilting()
        {
            if (_shouldSerializetilting)
            {
                return true;
            }
            return (_tilting != default(bool));
        }

        /// <summary>
        /// Test whether airTightness should be serialized
        /// </summary>
        public virtual bool ShouldSerializeairTightness()
        {
            if (_shouldSerializeairTightness)
            {
                return true;
            }
            return (_airTightness != default(bool));
        }

        /// <summary>
        /// Test whether emergencyBrakeDeactivation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeemergencyBrakeDeactivation()
        {
            if (_shouldSerializeemergencyBrakeDeactivation)
            {
                return true;
            }
            return (_emergencyBrakeDeactivation != default(bool));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPassenger object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPassenger object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPassenger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPassenger obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPassenger);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPassenger obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tPassenger Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPassenger)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPassenger Deserialize(System.IO.Stream s)
        {
            return ((tPassenger)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPassenger object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPassenger object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPassenger object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPassenger obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPassenger);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPassenger obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tPassenger LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tVerbalCounter
    {

        /// <remarks/>
        single,

        /// <remarks/>
        @double,

        /// <remarks/>
        triple,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPassenger))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ePassenger))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class ePassengerFacility : ParentContainer
    {

        private List<tPlaces> _places;

        private List<tService> _service;

        private static XmlSerializer serializer;

        public ePassengerFacility()
        {
            this._service = new List<tService>();
            this._places = new List<tPlaces>();
        }

        [System.Xml.Serialization.XmlElementAttribute("places")]
        public List<tPlaces> places
        {
            get
            {
                return this._places;
            }
            set
            {
                this._places = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("service")]
        public List<tService> service
        {
            get
            {
                return this._service;
            }
            set
            {
                this._service = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ePassengerFacility));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether places should be serialized
        /// </summary>
        public virtual bool ShouldSerializeplaces()
        {
            return places != null && places.Count > 0;
        }

        /// <summary>
        /// Test whether service should be serialized
        /// </summary>
        public virtual bool ShouldSerializeservice()
        {
            return service != null && service.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ePassengerFacility object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ePassengerFacility object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ePassengerFacility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ePassengerFacility obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePassengerFacility);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ePassengerFacility obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static ePassengerFacility Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ePassengerFacility)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ePassengerFacility Deserialize(System.IO.Stream s)
        {
            return ((ePassengerFacility)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ePassengerFacility object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ePassengerFacility object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ePassengerFacility object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ePassengerFacility obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePassengerFacility);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ePassengerFacility obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static ePassengerFacility LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPlaces : ParentContainer
    {

        private string _category;

        private string _count;

        private string _description;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string category
        {
            get
            {
                return this._category;
            }
            set
            {
                this._category = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string count
        {
            get
            {
                return this._count;
            }
            set
            {
                this._count = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPlaces));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether category should be serialized
        /// </summary>
        public virtual bool ShouldSerializecategory()
        {
            return !string.IsNullOrEmpty(category);
        }

        /// <summary>
        /// Test whether count should be serialized
        /// </summary>
        public virtual bool ShouldSerializecount()
        {
            return !string.IsNullOrEmpty(count);
        }

        /// <summary>
        /// Test whether description should be serialized
        /// </summary>
        public virtual bool ShouldSerializedescription()
        {
            return !string.IsNullOrEmpty(description);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPlaces object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPlaces object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPlaces object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPlaces obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlaces);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPlaces obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tPlaces Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPlaces)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPlaces Deserialize(System.IO.Stream s)
        {
            return ((tPlaces)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPlaces object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPlaces object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPlaces object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPlaces obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlaces);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPlaces obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tPlaces LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eGoods : tGoods
    {

        private List<tService> _service;

        private static XmlSerializer serializer;

        public eGoods()
        {
            this._service = new List<tService>();
        }

        [System.Xml.Serialization.XmlElementAttribute("service")]
        public List<tService> service
        {
            get
            {
                return this._service;
            }
            set
            {
                this._service = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eGoods));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether service should be serialized
        /// </summary>
        public virtual bool ShouldSerializeservice()
        {
            return service != null && service.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eGoods object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eGoods object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eGoods object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eGoods obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eGoods);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eGoods obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eGoods Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eGoods)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eGoods Deserialize(System.IO.Stream s)
        {
            return ((eGoods)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eGoods object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eGoods object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eGoods object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eGoods obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eGoods);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eGoods obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eGoods LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eGoods))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tGoods : ParentContainer
    {

        private bool _shouldSerializevolume;

        private bool _shouldSerializeloadArea;

        private bool _shouldSerializeload;

        private System.Nullable<decimal> _load;

        private System.Nullable<decimal> _loadArea;

        private System.Nullable<decimal> _volume;

        private string _freightCarType;

        private string _freightCarUICType;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal load
        {
            get
            {
                if (this._load.HasValue)
                {
                    return this._load.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._load = value;
                _shouldSerializeload = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadSpecified
        {
            get
            {
                return this._load.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._load = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal loadArea
        {
            get
            {
                if (this._loadArea.HasValue)
                {
                    return this._loadArea.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._loadArea = value;
                _shouldSerializeloadArea = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadAreaSpecified
        {
            get
            {
                return this._loadArea.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._loadArea = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal volume
        {
            get
            {
                if (this._volume.HasValue)
                {
                    return this._volume.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._volume = value;
                _shouldSerializevolume = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool volumeSpecified
        {
            get
            {
                return this._volume.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._volume = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string freightCarType
        {
            get
            {
                return this._freightCarType;
            }
            set
            {
                this._freightCarType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string freightCarUICType
        {
            get
            {
                return this._freightCarUICType;
            }
            set
            {
                this._freightCarUICType = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tGoods));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether load should be serialized
        /// </summary>
        public virtual bool ShouldSerializeload()
        {
            if (_shouldSerializeload)
            {
                return true;
            }
            return (_load != default(decimal));
        }

        /// <summary>
        /// Test whether loadArea should be serialized
        /// </summary>
        public virtual bool ShouldSerializeloadArea()
        {
            if (_shouldSerializeloadArea)
            {
                return true;
            }
            return (_loadArea != default(decimal));
        }

        /// <summary>
        /// Test whether volume should be serialized
        /// </summary>
        public virtual bool ShouldSerializevolume()
        {
            if (_shouldSerializevolume)
            {
                return true;
            }
            return (_volume != default(decimal));
        }

        /// <summary>
        /// Test whether freightCarType should be serialized
        /// </summary>
        public virtual bool ShouldSerializefreightCarType()
        {
            return !string.IsNullOrEmpty(freightCarType);
        }

        /// <summary>
        /// Test whether freightCarUICType should be serialized
        /// </summary>
        public virtual bool ShouldSerializefreightCarUICType()
        {
            return !string.IsNullOrEmpty(freightCarUICType);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tGoods object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tGoods object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tGoods object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tGoods obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGoods);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tGoods obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tGoods Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tGoods)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tGoods Deserialize(System.IO.Stream s)
        {
            return ((tGoods)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tGoods object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tGoods object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tGoods object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tGoods obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGoods);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tGoods obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tGoods LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tDriversCabType : ParentContainer
    {

        private bool _shouldSerializeposition;

        private string _orderNumber;

        private tCabPositionType _position;

        private string _acousticSignaller;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string orderNumber
        {
            get
            {
                return this._orderNumber;
            }
            set
            {
                this._orderNumber = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tCabPositionType position
        {
            get
            {
                return this._position;
            }
            set
            {
                this._position = value;
                _shouldSerializeposition = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string acousticSignaller
        {
            get
            {
                return this._acousticSignaller;
            }
            set
            {
                this._acousticSignaller = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tDriversCabType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether position should be serialized
        /// </summary>
        public virtual bool ShouldSerializeposition()
        {
            if (_shouldSerializeposition)
            {
                return true;
            }
            return (_position != default(tCabPositionType));
        }

        /// <summary>
        /// Test whether orderNumber should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorderNumber()
        {
            return !string.IsNullOrEmpty(orderNumber);
        }

        /// <summary>
        /// Test whether acousticSignaller should be serialized
        /// </summary>
        public virtual bool ShouldSerializeacousticSignaller()
        {
            return !string.IsNullOrEmpty(acousticSignaller);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tDriversCabType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tDriversCabType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tDriversCabType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tDriversCabType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDriversCabType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tDriversCabType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tDriversCabType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tDriversCabType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tDriversCabType Deserialize(System.IO.Stream s)
        {
            return ((tDriversCabType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tDriversCabType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tDriversCabType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tDriversCabType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tDriversCabType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDriversCabType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tDriversCabType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tDriversCabType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tCabPositionType
    {

        /// <remarks/>
        none,

        /// <remarks/>
        front,

        /// <remarks/>
        middle,

        /// <remarks/>
        rear,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eCouplers : ParentContainer
    {

        private List<eMechanicalCoupler> _mechanicalCoupler;

        private List<ePneumaticCoupler> _pneumaticCoupler;

        private List<eElectricalCoupler> _electricalCoupler;

        private static XmlSerializer serializer;

        public eCouplers()
        {
            this._electricalCoupler = new List<eElectricalCoupler>();
            this._pneumaticCoupler = new List<ePneumaticCoupler>();
            this._mechanicalCoupler = new List<eMechanicalCoupler>();
        }

        [System.Xml.Serialization.XmlElementAttribute("mechanicalCoupler")]
        public List<eMechanicalCoupler> mechanicalCoupler
        {
            get
            {
                return this._mechanicalCoupler;
            }
            set
            {
                this._mechanicalCoupler = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("pneumaticCoupler")]
        public List<ePneumaticCoupler> pneumaticCoupler
        {
            get
            {
                return this._pneumaticCoupler;
            }
            set
            {
                this._pneumaticCoupler = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("electricalCoupler")]
        public List<eElectricalCoupler> electricalCoupler
        {
            get
            {
                return this._electricalCoupler;
            }
            set
            {
                this._electricalCoupler = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eCouplers));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether mechanicalCoupler should be serialized
        /// </summary>
        public virtual bool ShouldSerializemechanicalCoupler()
        {
            return mechanicalCoupler != null && mechanicalCoupler.Count > 0;
        }

        /// <summary>
        /// Test whether pneumaticCoupler should be serialized
        /// </summary>
        public virtual bool ShouldSerializepneumaticCoupler()
        {
            return pneumaticCoupler != null && pneumaticCoupler.Count > 0;
        }

        /// <summary>
        /// Test whether electricalCoupler should be serialized
        /// </summary>
        public virtual bool ShouldSerializeelectricalCoupler()
        {
            return electricalCoupler != null && electricalCoupler.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eCouplers object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eCouplers object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eCouplers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eCouplers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eCouplers);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eCouplers obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eCouplers Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eCouplers)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eCouplers Deserialize(System.IO.Stream s)
        {
            return ((eCouplers)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eCouplers object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eCouplers object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eCouplers object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eCouplers obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eCouplers);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eCouplers obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eCouplers LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eMechanicalCoupler : tMechanicalWagonCouplerType
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eMechanicalCoupler));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eMechanicalCoupler object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eMechanicalCoupler object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eMechanicalCoupler object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eMechanicalCoupler obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eMechanicalCoupler);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eMechanicalCoupler obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eMechanicalCoupler Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eMechanicalCoupler)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eMechanicalCoupler Deserialize(System.IO.Stream s)
        {
            return ((eMechanicalCoupler)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eMechanicalCoupler object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eMechanicalCoupler object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eMechanicalCoupler object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eMechanicalCoupler obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eMechanicalCoupler);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eMechanicalCoupler obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eMechanicalCoupler LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eMechanicalCoupler))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tMechanicalWagonCouplerType
    {

        private bool _shouldSerializepushingForce;

        private bool _shouldSerializepullingForce;

        private bool _shouldSerializecouplingHeight;

        private bool _shouldSerializepositionOnCarEnd;

        private string _designType;

        private tEndPositionType _positionOnCarEnd;

        private System.Nullable<decimal> _couplingHeight;

        private System.Nullable<decimal> _pullingForce;

        private System.Nullable<decimal> _pushingForce;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string designType
        {
            get
            {
                return this._designType;
            }
            set
            {
                this._designType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tEndPositionType positionOnCarEnd
        {
            get
            {
                return this._positionOnCarEnd;
            }
            set
            {
                this._positionOnCarEnd = value;
                _shouldSerializepositionOnCarEnd = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal couplingHeight
        {
            get
            {
                if (this._couplingHeight.HasValue)
                {
                    return this._couplingHeight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._couplingHeight = value;
                _shouldSerializecouplingHeight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool couplingHeightSpecified
        {
            get
            {
                return this._couplingHeight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._couplingHeight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal pullingForce
        {
            get
            {
                if (this._pullingForce.HasValue)
                {
                    return this._pullingForce.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._pullingForce = value;
                _shouldSerializepullingForce = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pullingForceSpecified
        {
            get
            {
                return this._pullingForce.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._pullingForce = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal pushingForce
        {
            get
            {
                if (this._pushingForce.HasValue)
                {
                    return this._pushingForce.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._pushingForce = value;
                _shouldSerializepushingForce = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pushingForceSpecified
        {
            get
            {
                return this._pushingForce.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._pushingForce = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tMechanicalWagonCouplerType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether positionOnCarEnd should be serialized
        /// </summary>
        public virtual bool ShouldSerializepositionOnCarEnd()
        {
            if (_shouldSerializepositionOnCarEnd)
            {
                return true;
            }
            return (_positionOnCarEnd != default(tEndPositionType));
        }

        /// <summary>
        /// Test whether couplingHeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializecouplingHeight()
        {
            if (_shouldSerializecouplingHeight)
            {
                return true;
            }
            return (_couplingHeight != default(decimal));
        }

        /// <summary>
        /// Test whether pullingForce should be serialized
        /// </summary>
        public virtual bool ShouldSerializepullingForce()
        {
            if (_shouldSerializepullingForce)
            {
                return true;
            }
            return (_pullingForce != default(decimal));
        }

        /// <summary>
        /// Test whether pushingForce should be serialized
        /// </summary>
        public virtual bool ShouldSerializepushingForce()
        {
            if (_shouldSerializepushingForce)
            {
                return true;
            }
            return (_pushingForce != default(decimal));
        }

        /// <summary>
        /// Test whether designType should be serialized
        /// </summary>
        public virtual bool ShouldSerializedesignType()
        {
            return !string.IsNullOrEmpty(designType);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tMechanicalWagonCouplerType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tMechanicalWagonCouplerType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tMechanicalWagonCouplerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tMechanicalWagonCouplerType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMechanicalWagonCouplerType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tMechanicalWagonCouplerType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tMechanicalWagonCouplerType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tMechanicalWagonCouplerType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tMechanicalWagonCouplerType Deserialize(System.IO.Stream s)
        {
            return ((tMechanicalWagonCouplerType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tMechanicalWagonCouplerType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tMechanicalWagonCouplerType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tMechanicalWagonCouplerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tMechanicalWagonCouplerType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMechanicalWagonCouplerType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tMechanicalWagonCouplerType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tMechanicalWagonCouplerType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tEndPositionType
    {

        /// <remarks/>
        both,

        /// <remarks/>
        front,

        /// <remarks/>
        rear,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class ePneumaticCoupler : tPneumaticWagonCouplerType
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(ePneumaticCoupler));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ePneumaticCoupler object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an ePneumaticCoupler object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output ePneumaticCoupler object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out ePneumaticCoupler obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePneumaticCoupler);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out ePneumaticCoupler obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static ePneumaticCoupler Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((ePneumaticCoupler)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static ePneumaticCoupler Deserialize(System.IO.Stream s)
        {
            return ((ePneumaticCoupler)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current ePneumaticCoupler object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an ePneumaticCoupler object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ePneumaticCoupler object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out ePneumaticCoupler obj, out System.Exception exception)
        {
            exception = null;
            obj = default(ePneumaticCoupler);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out ePneumaticCoupler obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static ePneumaticCoupler LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ePneumaticCoupler))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPneumaticWagonCouplerType : ParentContainer
    {

        private bool _shouldSerializeintegratedOnMechanicalCoupler;

        private bool _shouldSerializepositionOnCarEnd;

        private tEndPositionType _positionOnCarEnd;

        private string _couplerFunction;

        private System.Nullable<bool> _integratedOnMechanicalCoupler;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tEndPositionType positionOnCarEnd
        {
            get
            {
                return this._positionOnCarEnd;
            }
            set
            {
                this._positionOnCarEnd = value;
                _shouldSerializepositionOnCarEnd = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string couplerFunction
        {
            get
            {
                return this._couplerFunction;
            }
            set
            {
                this._couplerFunction = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool integratedOnMechanicalCoupler
        {
            get
            {
                if (this._integratedOnMechanicalCoupler.HasValue)
                {
                    return this._integratedOnMechanicalCoupler.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._integratedOnMechanicalCoupler = value;
                _shouldSerializeintegratedOnMechanicalCoupler = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool integratedOnMechanicalCouplerSpecified
        {
            get
            {
                return this._integratedOnMechanicalCoupler.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._integratedOnMechanicalCoupler = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPneumaticWagonCouplerType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether positionOnCarEnd should be serialized
        /// </summary>
        public virtual bool ShouldSerializepositionOnCarEnd()
        {
            if (_shouldSerializepositionOnCarEnd)
            {
                return true;
            }
            return (_positionOnCarEnd != default(tEndPositionType));
        }

        /// <summary>
        /// Test whether integratedOnMechanicalCoupler should be serialized
        /// </summary>
        public virtual bool ShouldSerializeintegratedOnMechanicalCoupler()
        {
            if (_shouldSerializeintegratedOnMechanicalCoupler)
            {
                return true;
            }
            return (_integratedOnMechanicalCoupler != default(bool));
        }

        /// <summary>
        /// Test whether couplerFunction should be serialized
        /// </summary>
        public virtual bool ShouldSerializecouplerFunction()
        {
            return !string.IsNullOrEmpty(couplerFunction);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPneumaticWagonCouplerType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPneumaticWagonCouplerType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPneumaticWagonCouplerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPneumaticWagonCouplerType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPneumaticWagonCouplerType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPneumaticWagonCouplerType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tPneumaticWagonCouplerType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPneumaticWagonCouplerType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPneumaticWagonCouplerType Deserialize(System.IO.Stream s)
        {
            return ((tPneumaticWagonCouplerType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPneumaticWagonCouplerType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPneumaticWagonCouplerType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPneumaticWagonCouplerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPneumaticWagonCouplerType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPneumaticWagonCouplerType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPneumaticWagonCouplerType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tPneumaticWagonCouplerType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eElectricalCoupler : tElectricalWagonCouplerType
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eElectricalCoupler));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eElectricalCoupler object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eElectricalCoupler object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eElectricalCoupler object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eElectricalCoupler obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eElectricalCoupler);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eElectricalCoupler obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eElectricalCoupler Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eElectricalCoupler)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eElectricalCoupler Deserialize(System.IO.Stream s)
        {
            return ((eElectricalCoupler)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eElectricalCoupler object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eElectricalCoupler object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eElectricalCoupler object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eElectricalCoupler obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eElectricalCoupler);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eElectricalCoupler obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eElectricalCoupler LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eElectricalCoupler))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tElectricalWagonCouplerType : ParentContainer
    {

        private bool _shouldSerializepositionOnMechanicalCoupler;

        private bool _shouldSerializepositionOnCarEnd;

        private tEndPositionType _positionOnCarEnd;

        private string _designType;

        private System.Nullable<tRelatedPositionType> _positionOnMechanicalCoupler;

        private string _numberContacts;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tEndPositionType positionOnCarEnd
        {
            get
            {
                return this._positionOnCarEnd;
            }
            set
            {
                this._positionOnCarEnd = value;
                _shouldSerializepositionOnCarEnd = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string designType
        {
            get
            {
                return this._designType;
            }
            set
            {
                this._designType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tRelatedPositionType positionOnMechanicalCoupler
        {
            get
            {
                if (this._positionOnMechanicalCoupler.HasValue)
                {
                    return this._positionOnMechanicalCoupler.Value;
                }
                else
                {
                    return default(tRelatedPositionType);
                }
            }
            set
            {
                this._positionOnMechanicalCoupler = value;
                _shouldSerializepositionOnMechanicalCoupler = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool positionOnMechanicalCouplerSpecified
        {
            get
            {
                return this._positionOnMechanicalCoupler.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._positionOnMechanicalCoupler = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string numberContacts
        {
            get
            {
                return this._numberContacts;
            }
            set
            {
                this._numberContacts = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tElectricalWagonCouplerType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether positionOnCarEnd should be serialized
        /// </summary>
        public virtual bool ShouldSerializepositionOnCarEnd()
        {
            if (_shouldSerializepositionOnCarEnd)
            {
                return true;
            }
            return (_positionOnCarEnd != default(tEndPositionType));
        }

        /// <summary>
        /// Test whether positionOnMechanicalCoupler should be serialized
        /// </summary>
        public virtual bool ShouldSerializepositionOnMechanicalCoupler()
        {
            if (_shouldSerializepositionOnMechanicalCoupler)
            {
                return true;
            }
            return (_positionOnMechanicalCoupler != default(tRelatedPositionType));
        }

        /// <summary>
        /// Test whether designType should be serialized
        /// </summary>
        public virtual bool ShouldSerializedesignType()
        {
            return !string.IsNullOrEmpty(designType);
        }

        /// <summary>
        /// Test whether numberContacts should be serialized
        /// </summary>
        public virtual bool ShouldSerializenumberContacts()
        {
            return !string.IsNullOrEmpty(numberContacts);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tElectricalWagonCouplerType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tElectricalWagonCouplerType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tElectricalWagonCouplerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tElectricalWagonCouplerType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElectricalWagonCouplerType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tElectricalWagonCouplerType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tElectricalWagonCouplerType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tElectricalWagonCouplerType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tElectricalWagonCouplerType Deserialize(System.IO.Stream s)
        {
            return ((tElectricalWagonCouplerType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tElectricalWagonCouplerType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tElectricalWagonCouplerType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tElectricalWagonCouplerType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tElectricalWagonCouplerType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElectricalWagonCouplerType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tElectricalWagonCouplerType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tElectricalWagonCouplerType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tRelatedPositionType
    {

        /// <remarks/>
        none,

        /// <remarks/>
        aside,

        /// <remarks/>
        ontop,

        /// <remarks/>
        below,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eWagon))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tWagon : ParentContainer
    {

        private bool _shouldSerializeheadSurface;

        private bool _shouldSerializeauxiliaryPowerConsumption;

        private bool _shouldSerializeadditionalRotationMass;

        private bool _shouldSerializerotationMassFactor;

        private System.Nullable<decimal> _rotationMassFactor;

        private System.Nullable<decimal> _additionalRotationMass;

        private string _kinematicEnvelope;

        private System.Nullable<decimal> _auxiliaryPowerConsumption;

        private string _headShape;

        private System.Nullable<decimal> _headSurface;

        private string _bearingType;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal rotationMassFactor
        {
            get
            {
                if (this._rotationMassFactor.HasValue)
                {
                    return this._rotationMassFactor.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._rotationMassFactor = value;
                _shouldSerializerotationMassFactor = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rotationMassFactorSpecified
        {
            get
            {
                return this._rotationMassFactor.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._rotationMassFactor = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal additionalRotationMass
        {
            get
            {
                if (this._additionalRotationMass.HasValue)
                {
                    return this._additionalRotationMass.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._additionalRotationMass = value;
                _shouldSerializeadditionalRotationMass = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool additionalRotationMassSpecified
        {
            get
            {
                return this._additionalRotationMass.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._additionalRotationMass = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string kinematicEnvelope
        {
            get
            {
                return this._kinematicEnvelope;
            }
            set
            {
                this._kinematicEnvelope = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal auxiliaryPowerConsumption
        {
            get
            {
                if (this._auxiliaryPowerConsumption.HasValue)
                {
                    return this._auxiliaryPowerConsumption.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._auxiliaryPowerConsumption = value;
                _shouldSerializeauxiliaryPowerConsumption = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool auxiliaryPowerConsumptionSpecified
        {
            get
            {
                return this._auxiliaryPowerConsumption.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._auxiliaryPowerConsumption = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string headShape
        {
            get
            {
                return this._headShape;
            }
            set
            {
                this._headShape = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal headSurface
        {
            get
            {
                if (this._headSurface.HasValue)
                {
                    return this._headSurface.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._headSurface = value;
                _shouldSerializeheadSurface = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool headSurfaceSpecified
        {
            get
            {
                return this._headSurface.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._headSurface = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string bearingType
        {
            get
            {
                return this._bearingType;
            }
            set
            {
                this._bearingType = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tWagon));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether rotationMassFactor should be serialized
        /// </summary>
        public virtual bool ShouldSerializerotationMassFactor()
        {
            if (_shouldSerializerotationMassFactor)
            {
                return true;
            }
            return (_rotationMassFactor != default(decimal));
        }

        /// <summary>
        /// Test whether additionalRotationMass should be serialized
        /// </summary>
        public virtual bool ShouldSerializeadditionalRotationMass()
        {
            if (_shouldSerializeadditionalRotationMass)
            {
                return true;
            }
            return (_additionalRotationMass != default(decimal));
        }

        /// <summary>
        /// Test whether auxiliaryPowerConsumption should be serialized
        /// </summary>
        public virtual bool ShouldSerializeauxiliaryPowerConsumption()
        {
            if (_shouldSerializeauxiliaryPowerConsumption)
            {
                return true;
            }
            return (_auxiliaryPowerConsumption != default(decimal));
        }

        /// <summary>
        /// Test whether headSurface should be serialized
        /// </summary>
        public virtual bool ShouldSerializeheadSurface()
        {
            if (_shouldSerializeheadSurface)
            {
                return true;
            }
            return (_headSurface != default(decimal));
        }

        /// <summary>
        /// Test whether kinematicEnvelope should be serialized
        /// </summary>
        public virtual bool ShouldSerializekinematicEnvelope()
        {
            return !string.IsNullOrEmpty(kinematicEnvelope);
        }

        /// <summary>
        /// Test whether headShape should be serialized
        /// </summary>
        public virtual bool ShouldSerializeheadShape()
        {
            return !string.IsNullOrEmpty(headShape);
        }

        /// <summary>
        /// Test whether bearingType should be serialized
        /// </summary>
        public virtual bool ShouldSerializebearingType()
        {
            return !string.IsNullOrEmpty(bearingType);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tWagon object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tWagon object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tWagon object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tWagon obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tWagon);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tWagon obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tWagon Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tWagon)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tWagon Deserialize(System.IO.Stream s)
        {
            return ((tWagon)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tWagon object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tWagon object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tWagon object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tWagon obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tWagon);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tWagon obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tWagon LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eVehicleBrakes : ParentContainer
    {

        private List<eVehicleBrake> _vehicleBrake;

        private tEffortCurve _mechanicalBrakeEffort;

        private tEddyCurrentBrake _eddyCurrentBrake;

        private static XmlSerializer serializer;

        public eVehicleBrakes()
        {
            this._eddyCurrentBrake = new tEddyCurrentBrake();
            this._mechanicalBrakeEffort = new tEffortCurve();
            this._vehicleBrake = new List<eVehicleBrake>();
        }

        [System.Xml.Serialization.XmlElementAttribute("vehicleBrake")]
        public List<eVehicleBrake> vehicleBrake
        {
            get
            {
                return this._vehicleBrake;
            }
            set
            {
                this._vehicleBrake = value;
            }
        }

        public tEffortCurve mechanicalBrakeEffort
        {
            get
            {
                return this._mechanicalBrakeEffort;
            }
            set
            {
                this._mechanicalBrakeEffort = value;
            }
        }

        public tEddyCurrentBrake eddyCurrentBrake
        {
            get
            {
                return this._eddyCurrentBrake;
            }
            set
            {
                this._eddyCurrentBrake = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eVehicleBrakes));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether vehicleBrake should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleBrake()
        {
            return vehicleBrake != null && vehicleBrake.Count > 0;
        }

        /// <summary>
        /// Test whether mechanicalBrakeEffort should be serialized
        /// </summary>
        public virtual bool ShouldSerializemechanicalBrakeEffort()
        {
            return (_mechanicalBrakeEffort != null);
        }

        /// <summary>
        /// Test whether eddyCurrentBrake should be serialized
        /// </summary>
        public virtual bool ShouldSerializeeddyCurrentBrake()
        {
            return (_eddyCurrentBrake != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eVehicleBrakes object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eVehicleBrakes object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eVehicleBrakes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eVehicleBrakes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eVehicleBrakes);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eVehicleBrakes obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eVehicleBrakes Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eVehicleBrakes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eVehicleBrakes Deserialize(System.IO.Stream s)
        {
            return ((eVehicleBrakes)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eVehicleBrakes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eVehicleBrakes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eVehicleBrakes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eVehicleBrakes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eVehicleBrakes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eVehicleBrakes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eVehicleBrakes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tEddyCurrentBrake : ParentContainer
    {

        private bool _shouldSerializeminSpeed;

        private bool _shouldSerializemaxEffort;

        private bool _shouldSerializemaxPower;

        private decimal _maxPower;

        private decimal _maxEffort;

        private decimal _minSpeed;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxPower
        {
            get
            {
                return this._maxPower;
            }
            set
            {
                this._maxPower = value;
                _shouldSerializemaxPower = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxEffort
        {
            get
            {
                return this._maxEffort;
            }
            set
            {
                this._maxEffort = value;
                _shouldSerializemaxEffort = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal minSpeed
        {
            get
            {
                return this._minSpeed;
            }
            set
            {
                this._minSpeed = value;
                _shouldSerializeminSpeed = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tEddyCurrentBrake));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether maxPower should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxPower()
        {
            if (_shouldSerializemaxPower)
            {
                return true;
            }
            return (_maxPower != default(decimal));
        }

        /// <summary>
        /// Test whether maxEffort should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxEffort()
        {
            if (_shouldSerializemaxEffort)
            {
                return true;
            }
            return (_maxEffort != default(decimal));
        }

        /// <summary>
        /// Test whether minSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializeminSpeed()
        {
            if (_shouldSerializeminSpeed)
            {
                return true;
            }
            return (_minSpeed != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tEddyCurrentBrake object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tEddyCurrentBrake object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tEddyCurrentBrake object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tEddyCurrentBrake obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEddyCurrentBrake);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tEddyCurrentBrake obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tEddyCurrentBrake Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tEddyCurrentBrake)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tEddyCurrentBrake Deserialize(System.IO.Stream s)
        {
            return ((tEddyCurrentBrake)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tEddyCurrentBrake object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tEddyCurrentBrake object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tEddyCurrentBrake object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tEddyCurrentBrake obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEddyCurrentBrake);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tEddyCurrentBrake obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tEddyCurrentBrake LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eLoadLimitMatrix : tLoadLimitMatrixType
    {

        private List<eLoadLimit> _loadLimit;

        private static XmlSerializer serializer;

        public eLoadLimitMatrix()
        {
            this._loadLimit = new List<eLoadLimit>();
        }

        [System.Xml.Serialization.XmlElementAttribute("loadLimit")]
        public List<eLoadLimit> loadLimit
        {
            get
            {
                return this._loadLimit;
            }
            set
            {
                this._loadLimit = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eLoadLimitMatrix));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether loadLimit should be serialized
        /// </summary>
        public virtual bool ShouldSerializeloadLimit()
        {
            return loadLimit != null && loadLimit.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eLoadLimitMatrix object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eLoadLimitMatrix object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eLoadLimitMatrix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eLoadLimitMatrix obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLoadLimitMatrix);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eLoadLimitMatrix obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eLoadLimitMatrix Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eLoadLimitMatrix)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eLoadLimitMatrix Deserialize(System.IO.Stream s)
        {
            return ((eLoadLimitMatrix)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eLoadLimitMatrix object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eLoadLimitMatrix object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eLoadLimitMatrix object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eLoadLimitMatrix obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLoadLimitMatrix);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eLoadLimitMatrix obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eLoadLimitMatrix LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eLoadLimit : tLoadLimitType
    {

        private List<tRailNetwork> _railNetwork;

        private List<tLineClassification> _lineClassification;

        private static XmlSerializer serializer;

        public eLoadLimit()
        {
            this._lineClassification = new List<tLineClassification>();
            this._railNetwork = new List<tRailNetwork>();
        }

        [System.Xml.Serialization.XmlElementAttribute("railNetwork")]
        public List<tRailNetwork> railNetwork
        {
            get
            {
                return this._railNetwork;
            }
            set
            {
                this._railNetwork = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("lineClassification")]
        public List<tLineClassification> lineClassification
        {
            get
            {
                return this._lineClassification;
            }
            set
            {
                this._lineClassification = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eLoadLimit));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether railNetwork should be serialized
        /// </summary>
        public virtual bool ShouldSerializerailNetwork()
        {
            return railNetwork != null && railNetwork.Count > 0;
        }

        /// <summary>
        /// Test whether lineClassification should be serialized
        /// </summary>
        public virtual bool ShouldSerializelineClassification()
        {
            return lineClassification != null && lineClassification.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eLoadLimit object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eLoadLimit object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eLoadLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eLoadLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLoadLimit);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eLoadLimit obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eLoadLimit Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eLoadLimit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eLoadLimit Deserialize(System.IO.Stream s)
        {
            return ((eLoadLimit)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eLoadLimit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eLoadLimit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eLoadLimit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eLoadLimit obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLoadLimit);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eLoadLimit obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eLoadLimit LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tRailNetwork : ParentContainer
    {

        private string _name;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tRailNetwork));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tRailNetwork object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tRailNetwork object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tRailNetwork object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tRailNetwork obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRailNetwork);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tRailNetwork obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tRailNetwork Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tRailNetwork)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tRailNetwork Deserialize(System.IO.Stream s)
        {
            return ((tRailNetwork)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tRailNetwork object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tRailNetwork object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tRailNetwork object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tRailNetwork obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRailNetwork);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tRailNetwork obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tRailNetwork LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLineClassification : ParentContainer
    {

        private bool _shouldSerializepayLoad;

        private string _name;

        private decimal _payLoad;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal payLoad
        {
            get
            {
                return this._payLoad;
            }
            set
            {
                this._payLoad = value;
                _shouldSerializepayLoad = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLineClassification));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether payLoad should be serialized
        /// </summary>
        public virtual bool ShouldSerializepayLoad()
        {
            if (_shouldSerializepayLoad)
            {
                return true;
            }
            return (_payLoad != default(decimal));
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLineClassification object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLineClassification object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLineClassification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLineClassification obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLineClassification);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLineClassification obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tLineClassification Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLineClassification)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLineClassification Deserialize(System.IO.Stream s)
        {
            return ((tLineClassification)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLineClassification object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLineClassification object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLineClassification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLineClassification obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLineClassification);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLineClassification obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tLineClassification LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eLoadLimit))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLoadLimitType : ParentContainer
    {

        private bool _shouldSerializemaxSpeed;

        private decimal _maxSpeed;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxSpeed
        {
            get
            {
                return this._maxSpeed;
            }
            set
            {
                this._maxSpeed = value;
                _shouldSerializemaxSpeed = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLoadLimitType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether maxSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxSpeed()
        {
            if (_shouldSerializemaxSpeed)
            {
                return true;
            }
            return (_maxSpeed != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLoadLimitType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLoadLimitType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLoadLimitType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLoadLimitType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLoadLimitType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLoadLimitType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tLoadLimitType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLoadLimitType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLoadLimitType Deserialize(System.IO.Stream s)
        {
            return ((tLoadLimitType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLoadLimitType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLoadLimitType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLoadLimitType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLoadLimitType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLoadLimitType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLoadLimitType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tLoadLimitType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eLoadLimitMatrix))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLoadLimitMatrixType : ParentContainer
    {

        private bool _shouldSerializechassisSpeed;

        private System.Nullable<decimal> _chassisSpeed;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal chassisSpeed
        {
            get
            {
                if (this._chassisSpeed.HasValue)
                {
                    return this._chassisSpeed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._chassisSpeed = value;
                _shouldSerializechassisSpeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool chassisSpeedSpecified
        {
            get
            {
                return this._chassisSpeed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._chassisSpeed = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLoadLimitMatrixType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether chassisSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializechassisSpeed()
        {
            if (_shouldSerializechassisSpeed)
            {
                return true;
            }
            return (_chassisSpeed != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLoadLimitMatrixType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLoadLimitMatrixType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLoadLimitMatrixType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLoadLimitMatrixType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLoadLimitMatrixType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLoadLimitMatrixType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tLoadLimitMatrixType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLoadLimitMatrixType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLoadLimitMatrixType Deserialize(System.IO.Stream s)
        {
            return ((tLoadLimitMatrixType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLoadLimitMatrixType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLoadLimitMatrixType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLoadLimitMatrixType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLoadLimitMatrixType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLoadLimitMatrixType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLoadLimitMatrixType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tLoadLimitMatrixType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eCurvingLimitation : tCurvingLimitationType
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eCurvingLimitation));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eCurvingLimitation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eCurvingLimitation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eCurvingLimitation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eCurvingLimitation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eCurvingLimitation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eCurvingLimitation obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eCurvingLimitation Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eCurvingLimitation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eCurvingLimitation Deserialize(System.IO.Stream s)
        {
            return ((eCurvingLimitation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eCurvingLimitation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eCurvingLimitation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eCurvingLimitation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eCurvingLimitation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eCurvingLimitation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eCurvingLimitation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eCurvingLimitation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eCurvingLimitation))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCurvingLimitationType : ParentContainer
    {

        private bool _shouldSerializeverticalSagRadius;

        private bool _shouldSerializeverticalCrestRadius;

        private bool _shouldSerializehorizontalCurveRadius;

        private System.Nullable<decimal> _horizontalCurveRadius;

        private System.Nullable<decimal> _verticalCrestRadius;

        private System.Nullable<decimal> _verticalSagRadius;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal horizontalCurveRadius
        {
            get
            {
                if (this._horizontalCurveRadius.HasValue)
                {
                    return this._horizontalCurveRadius.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._horizontalCurveRadius = value;
                _shouldSerializehorizontalCurveRadius = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool horizontalCurveRadiusSpecified
        {
            get
            {
                return this._horizontalCurveRadius.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._horizontalCurveRadius = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal verticalCrestRadius
        {
            get
            {
                if (this._verticalCrestRadius.HasValue)
                {
                    return this._verticalCrestRadius.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._verticalCrestRadius = value;
                _shouldSerializeverticalCrestRadius = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool verticalCrestRadiusSpecified
        {
            get
            {
                return this._verticalCrestRadius.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._verticalCrestRadius = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal verticalSagRadius
        {
            get
            {
                if (this._verticalSagRadius.HasValue)
                {
                    return this._verticalSagRadius.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._verticalSagRadius = value;
                _shouldSerializeverticalSagRadius = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool verticalSagRadiusSpecified
        {
            get
            {
                return this._verticalSagRadius.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._verticalSagRadius = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCurvingLimitationType));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether horizontalCurveRadius should be serialized
        /// </summary>
        public virtual bool ShouldSerializehorizontalCurveRadius()
        {
            if (_shouldSerializehorizontalCurveRadius)
            {
                return true;
            }
            return (_horizontalCurveRadius != default(decimal));
        }

        /// <summary>
        /// Test whether verticalCrestRadius should be serialized
        /// </summary>
        public virtual bool ShouldSerializeverticalCrestRadius()
        {
            if (_shouldSerializeverticalCrestRadius)
            {
                return true;
            }
            return (_verticalCrestRadius != default(decimal));
        }

        /// <summary>
        /// Test whether verticalSagRadius should be serialized
        /// </summary>
        public virtual bool ShouldSerializeverticalSagRadius()
        {
            if (_shouldSerializeverticalSagRadius)
            {
                return true;
            }
            return (_verticalSagRadius != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCurvingLimitationType object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCurvingLimitationType object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCurvingLimitationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCurvingLimitationType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurvingLimitationType);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCurvingLimitationType obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tCurvingLimitationType Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCurvingLimitationType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCurvingLimitationType Deserialize(System.IO.Stream s)
        {
            return ((tCurvingLimitationType)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCurvingLimitationType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCurvingLimitationType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCurvingLimitationType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCurvingLimitationType obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCurvingLimitationType);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCurvingLimitationType obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tCurvingLimitationType LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainProtectionElementGroup : tElementWithIDAndName
    {

        private List<tElementWithReference> _trainProtectionElementRef;

        private static XmlSerializer serializer;

        public tTrainProtectionElementGroup()
        {
            this._trainProtectionElementRef = new List<tElementWithReference>();
        }

        [System.Xml.Serialization.XmlElementAttribute("trainProtectionElementRef")]
        public List<tElementWithReference> trainProtectionElementRef
        {
            get
            {
                return this._trainProtectionElementRef;
            }
            set
            {
                this._trainProtectionElementRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainProtectionElementGroup));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainProtectionElementRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionElementRef()
        {
            return trainProtectionElementRef != null && trainProtectionElementRef.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainProtectionElementGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainProtectionElementGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainProtectionElementGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainProtectionElementGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainProtectionElementGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainProtectionElementGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainProtectionElementGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainProtectionElementGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainProtectionElementGroup Deserialize(System.IO.Stream s)
        {
            return ((tTrainProtectionElementGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainProtectionElementGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainProtectionElementGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainProtectionElementGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainProtectionElementGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainProtectionElementGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainProtectionElementGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainProtectionElementGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBaliseGroup : tElementWithIDAndName
    {

        private List<tBaliseRefInGroup> _baliseRef;

        private string _type;

        private static XmlSerializer serializer;

        public tBaliseGroup()
        {
            this._baliseRef = new List<tBaliseRefInGroup>();
        }

        [System.Xml.Serialization.XmlElementAttribute("baliseRef")]
        public List<tBaliseRefInGroup> baliseRef
        {
            get
            {
                return this._baliseRef;
            }
            set
            {
                this._baliseRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBaliseGroup));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether baliseRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializebaliseRef()
        {
            return baliseRef != null && baliseRef.Count > 0;
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBaliseGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBaliseGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBaliseGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBaliseGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBaliseGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBaliseGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBaliseGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBaliseGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBaliseGroup Deserialize(System.IO.Stream s)
        {
            return ((tBaliseGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBaliseGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBaliseGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBaliseGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBaliseGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBaliseGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBaliseGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBaliseGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eSignalGroup))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalGroup : tElementWithIDAndName
    {

        private string _type;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalGroup));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalGroup Deserialize(System.IO.Stream s)
        {
            return ((tSignalGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eSignalGroup : tSignalGroup
    {

        private List<tSignalRefInGroup> _signalRef;

        private static XmlSerializer serializer;

        public eSignalGroup()
        {
            this._signalRef = new List<tSignalRefInGroup>();
        }

        [System.Xml.Serialization.XmlElementAttribute("signalRef")]
        public List<tSignalRefInGroup> signalRef
        {
            get
            {
                return this._signalRef;
            }
            set
            {
                this._signalRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eSignalGroup));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether signalRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializesignalRef()
        {
            return signalRef != null && signalRef.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eSignalGroup object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eSignalGroup object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eSignalGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eSignalGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eSignalGroup);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eSignalGroup obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eSignalGroup Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eSignalGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eSignalGroup Deserialize(System.IO.Stream s)
        {
            return ((eSignalGroup)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eSignalGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eSignalGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eSignalGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eSignalGroup obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eSignalGroup);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eSignalGroup obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eSignalGroup LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlacedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStrictOrientedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBaseServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlatformEdge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDelimitedOrientedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBridge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTunnel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOrientedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlacedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCrossSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCommonSwitchAndCrossingData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSwitch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eSwitch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStrictOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRadiusChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGradientChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSpeedChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tAxleWeightChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPowerTransmissionChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGaugeChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tElectrificationChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperationModeChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOwnerChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDelimitedOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackCircuitBorder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainDetector))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackCondition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tLevelCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBorder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBalise))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRuleCodeElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDerailer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStopPost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBasePlacedElement : tElementWithIDAndName
    {

        private bool _shouldSerializeabsPosOffset;

        private bool _shouldSerializeabsPos;

        private bool _shouldSerializepos;

        private bool _shouldSerializegeoCoord;

        private tGeoCoord _geoCoord;

        private decimal _pos;

        private System.Nullable<decimal> _absPos;

        private System.Nullable<decimal> _absPosOffset;

        private static XmlSerializer serializer;

        public tBasePlacedElement()
        {
            this._geoCoord = new tGeoCoord();
        }

        [System.Xml.Serialization.XmlElementAttribute()]
        public tGeoCoord geoCoord
        {
            get
            {
                return this._geoCoord;
            }
            set
            {
                this._geoCoord = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal pos
        {
            get
            {
                return this._pos;
            }
            set
            {
                this._pos = value;
                _shouldSerializepos = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPos
        {
            get
            {
                if (this._absPos.HasValue)
                {
                    return this._absPos.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._absPos = value;
                _shouldSerializeabsPos = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absPosSpecified
        {
            get
            {
                return this._absPos.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absPos = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPosOffset
        {
            get
            {
                if (this._absPosOffset.HasValue)
                {
                    return this._absPosOffset.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._absPosOffset = value;
                _shouldSerializeabsPosOffset = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absPosOffsetSpecified
        {
            get
            {
                return this._absPosOffset.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absPosOffset = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBasePlacedElement));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether pos should be serialized
        /// </summary>
        public virtual bool ShouldSerializepos()
        {
            if (_shouldSerializepos)
            {
                return true;
            }
            return (_pos != default(decimal));
        }

        /// <summary>
        /// Test whether absPos should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPos()
        {
            if (_shouldSerializeabsPos)
            {
                return true;
            }
            return (_absPos != default(decimal));
        }

        /// <summary>
        /// Test whether absPosOffset should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPosOffset()
        {
            if (_shouldSerializeabsPosOffset)
            {
                return true;
            }
            return (_absPosOffset != default(decimal));
        }

        /// <summary>
        /// Test whether geoCoord should be serialized
        /// </summary>
        public virtual bool ShouldSerializegeoCoord()
        {
            return (_geoCoord != null && _geoCoord.coord.Count == 2);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBasePlacedElement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBasePlacedElement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBasePlacedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBasePlacedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBasePlacedElement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBasePlacedElement obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBasePlacedElement Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBasePlacedElement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBasePlacedElement Deserialize(System.IO.Stream s)
        {
            return ((tBasePlacedElement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBasePlacedElement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBasePlacedElement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBasePlacedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBasePlacedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBasePlacedElement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBasePlacedElement obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBasePlacedElement LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStrictOrientedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBaseServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlatformEdge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDelimitedOrientedElementWithLength))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBridge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTunnel))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOrientedElementWithLength))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPlacedElementWithLength : tBasePlacedElement
    {

        private bool _shouldSerializelength;

        private List<tStateWithLength> _states;

        private System.Nullable<decimal> _length;

        private static XmlSerializer serializer;

        public tPlacedElementWithLength()
        {
            this._states = new List<tStateWithLength>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("state", IsNullable = false)]
        public List<tStateWithLength> states
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal length
        {
            get
            {
                if (this._length.HasValue)
                {
                    return this._length.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._length = value;
                _shouldSerializelength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthSpecified
        {
            get
            {
                return this._length.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._length = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPlacedElementWithLength));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether states should be serialized
        /// </summary>
        public virtual bool ShouldSerializestates()
        {
            return states != null && states.Count > 0;
        }

        /// <summary>
        /// Test whether length should be serialized
        /// </summary>
        public virtual bool ShouldSerializelength()
        {
            if (_shouldSerializelength)
            {
                return true;
            }
            return (_length != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPlacedElementWithLength object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPlacedElementWithLength object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPlacedElementWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPlacedElementWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlacedElementWithLength);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPlacedElementWithLength obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tPlacedElementWithLength Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPlacedElementWithLength)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPlacedElementWithLength Deserialize(System.IO.Stream s)
        {
            return ((tPlacedElementWithLength)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPlacedElementWithLength object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPlacedElementWithLength object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPlacedElementWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPlacedElementWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlacedElementWithLength);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPlacedElementWithLength obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tPlacedElementWithLength LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStateWithLength : tState
    {

        private tLocation _from;

        private tLocation _to;

        private static XmlSerializer serializer;

        public tStateWithLength()
        {
            this._to = new tLocation();
            this._from = new tLocation();
        }

        public tLocation from
        {
            get
            {
                return this._from;
            }
            set
            {
                this._from = value;
            }
        }

        public tLocation to
        {
            get
            {
                return this._to;
            }
            set
            {
                this._to = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStateWithLength));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether from should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrom()
        {
            return (_from != null);
        }

        /// <summary>
        /// Test whether to should be serialized
        /// </summary>
        public virtual bool ShouldSerializeto()
        {
            return (_to != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStateWithLength object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStateWithLength object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStateWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStateWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStateWithLength);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStateWithLength obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tStateWithLength Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStateWithLength)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStateWithLength Deserialize(System.IO.Stream s)
        {
            return ((tStateWithLength)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStateWithLength object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStateWithLength object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStateWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStateWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStateWithLength);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStateWithLength obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tStateWithLength LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLocation : ParentContainer
    {

        private bool _shouldSerializeabsPosOffset;

        private bool _shouldSerializeabsPos;

        private bool _shouldSerializepos;

        private tGeoCoord _geoCoord;

        private string _ocpRef;

        private decimal _pos;

        private System.Nullable<decimal> _absPos;

        private System.Nullable<decimal> _absPosOffset;

        private static XmlSerializer serializer;

        public tLocation()
        {
            this._geoCoord = new tGeoCoord();
        }

        public tGeoCoord geoCoord
        {
            get
            {
                return this._geoCoord;
            }
            set
            {
                this._geoCoord = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpRef
        {
            get
            {
                return this._ocpRef;
            }
            set
            {
                this._ocpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal pos
        {
            get
            {
                return this._pos;
            }
            set
            {
                this._pos = value;
                _shouldSerializepos = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPos
        {
            get
            {
                if (this._absPos.HasValue)
                {
                    return this._absPos.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._absPos = value;
                _shouldSerializeabsPos = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absPosSpecified
        {
            get
            {
                return this._absPos.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absPos = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPosOffset
        {
            get
            {
                if (this._absPosOffset.HasValue)
                {
                    return this._absPosOffset.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._absPosOffset = value;
                _shouldSerializeabsPosOffset = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absPosOffsetSpecified
        {
            get
            {
                return this._absPosOffset.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absPosOffset = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLocation));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether pos should be serialized
        /// </summary>
        public virtual bool ShouldSerializepos()
        {
            if (_shouldSerializepos)
            {
                return true;
            }
            return (_pos != default(decimal));
        }

        /// <summary>
        /// Test whether absPos should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPos()
        {
            if (_shouldSerializeabsPos)
            {
                return true;
            }
            return (_absPos != default(decimal));
        }

        /// <summary>
        /// Test whether absPosOffset should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPosOffset()
        {
            if (_shouldSerializeabsPosOffset)
            {
                return true;
            }
            return (_absPosOffset != default(decimal));
        }

        /// <summary>
        /// Test whether geoCoord should be serialized
        /// </summary>
        public virtual bool ShouldSerializegeoCoord()
        {
            return (_geoCoord != null);
        }

        /// <summary>
        /// Test whether ocpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpRef()
        {
            return !string.IsNullOrEmpty(ocpRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLocation object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLocation object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLocation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLocation);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLocation obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tLocation Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLocation)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLocation Deserialize(System.IO.Stream s)
        {
            return ((tLocation)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLocation object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLocation object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLocation object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLocation obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLocation);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLocation obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tLocation LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStateWithLength))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tState : ParentContainer
    {

        private bool _shouldSerializedisabled;

        private List<System.Xml.XmlElement> _any;

        private bool _disabled;

        private string _operatingPeriodRef;

        private string _remarks;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tState()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
            this._any = new List<System.Xml.XmlElement>();
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool disabled
        {
            get
            {
                return this._disabled;
            }
            set
            {
                this._disabled = value;
                _shouldSerializedisabled = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string operatingPeriodRef
        {
            get
            {
                return this._operatingPeriodRef;
            }
            set
            {
                this._operatingPeriodRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string remarks
        {
            get
            {
                return this._remarks;
            }
            set
            {
                this._remarks = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tState));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether disabled should be serialized
        /// </summary>
        public virtual bool ShouldSerializedisabled()
        {
            if (_shouldSerializedisabled)
            {
                return true;
            }
            return (_disabled != default(bool));
        }

        /// <summary>
        /// Test whether operatingPeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingPeriodRef()
        {
            return !string.IsNullOrEmpty(operatingPeriodRef);
        }

        /// <summary>
        /// Test whether remarks should be serialized
        /// </summary>
        public virtual bool ShouldSerializeremarks()
        {
            return !string.IsNullOrEmpty(remarks);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tState object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tState object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tState object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tState obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tState);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tState obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tState Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tState)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tState Deserialize(System.IO.Stream s)
        {
            return ((tState)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tState object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tState object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tState object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tState obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tState);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tState obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tState LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBaseServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlatformEdge))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStrictOrientedElementWithLength : tPlacedElementWithLength
    {

        private bool _shouldSerializedir;

        private System.Nullable<tStrictDirection> _dir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tStrictDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tStrictDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStrictOrientedElementWithLength));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tStrictDirection));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStrictOrientedElementWithLength object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStrictOrientedElementWithLength object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStrictOrientedElementWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStrictOrientedElementWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStrictOrientedElementWithLength);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStrictOrientedElementWithLength obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tStrictOrientedElementWithLength Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStrictOrientedElementWithLength)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStrictOrientedElementWithLength Deserialize(System.IO.Stream s)
        {
            return ((tStrictOrientedElementWithLength)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStrictOrientedElementWithLength object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStrictOrientedElementWithLength object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStrictOrientedElementWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStrictOrientedElementWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStrictOrientedElementWithLength);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStrictOrientedElementWithLength obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tStrictOrientedElementWithLength LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tServiceSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPlatformEdge))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBaseServiceSection : tStrictOrientedElementWithLength
    {

        private bool _shouldSerializeside;

        private bool _shouldSerializeheight;

        private System.Nullable<decimal> _height;

        private System.Nullable<tSide> _side;

        private string _ocpRef;

        private List<System.Xml.XmlAttribute> _anyAttr1;

        private static XmlSerializer serializer;

        public tBaseServiceSection()
        {
            this._anyAttr1 = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal height
        {
            get
            {
                if (this._height.HasValue)
                {
                    return this._height.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._height = value;
                _shouldSerializeheight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool heightSpecified
        {
            get
            {
                return this._height.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._height = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tSide side
        {
            get
            {
                if (this._side.HasValue)
                {
                    return this._side.Value;
                }
                else
                {
                    return default(tSide);
                }
            }
            set
            {
                this._side = value;
                _shouldSerializeside = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sideSpecified
        {
            get
            {
                return this._side.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._side = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpRef
        {
            get
            {
                return this._ocpRef;
            }
            set
            {
                this._ocpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr1
        {
            get
            {
                return this._anyAttr1;
            }
            set
            {
                this._anyAttr1 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBaseServiceSection));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr1()
        {
            return AnyAttr1 != null && AnyAttr1.Count > 0;
        }

        /// <summary>
        /// Test whether height should be serialized
        /// </summary>
        public virtual bool ShouldSerializeheight()
        {
            if (_shouldSerializeheight)
            {
                return true;
            }
            return (_height != default(decimal));
        }

        /// <summary>
        /// Test whether side should be serialized
        /// </summary>
        public virtual bool ShouldSerializeside()
        {
            if (_shouldSerializeside)
            {
                return true;
            }
            return (_side != default(tSide));
        }

        /// <summary>
        /// Test whether ocpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpRef()
        {
            return !string.IsNullOrEmpty(ocpRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBaseServiceSection object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBaseServiceSection object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBaseServiceSection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBaseServiceSection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBaseServiceSection);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBaseServiceSection obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBaseServiceSection Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBaseServiceSection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBaseServiceSection Deserialize(System.IO.Stream s)
        {
            return ((tBaseServiceSection)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBaseServiceSection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBaseServiceSection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBaseServiceSection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBaseServiceSection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBaseServiceSection);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBaseServiceSection obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBaseServiceSection LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tSide
    {

        /// <remarks/>
        left,

        /// <remarks/>
        right,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tServiceSection : tBaseServiceSection
    {

        private bool _shouldSerializepreheating;

        private bool _shouldSerializeparking;

        private bool _shouldSerializefueling;

        private bool _shouldSerializecleaning;

        private bool _shouldSerializeloadingFacility;

        private bool _shouldSerializemaintenance;

        private bool _shouldSerializeramp;

        private string _parentServiceSectionRef;

        private System.Nullable<bool> _ramp;

        private System.Nullable<bool> _maintenance;

        private System.Nullable<bool> _loadingFacility;

        private System.Nullable<bool> _cleaning;

        private System.Nullable<bool> _fueling;

        private System.Nullable<bool> _parking;

        private System.Nullable<bool> _preheating;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string parentServiceSectionRef
        {
            get
            {
                return this._parentServiceSectionRef;
            }
            set
            {
                this._parentServiceSectionRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool ramp
        {
            get
            {
                if (this._ramp.HasValue)
                {
                    return this._ramp.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._ramp = value;
                _shouldSerializeramp = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rampSpecified
        {
            get
            {
                return this._ramp.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._ramp = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool maintenance
        {
            get
            {
                if (this._maintenance.HasValue)
                {
                    return this._maintenance.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._maintenance = value;
                _shouldSerializemaintenance = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maintenanceSpecified
        {
            get
            {
                return this._maintenance.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maintenance = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool loadingFacility
        {
            get
            {
                if (this._loadingFacility.HasValue)
                {
                    return this._loadingFacility.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._loadingFacility = value;
                _shouldSerializeloadingFacility = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loadingFacilitySpecified
        {
            get
            {
                return this._loadingFacility.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._loadingFacility = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool cleaning
        {
            get
            {
                if (this._cleaning.HasValue)
                {
                    return this._cleaning.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._cleaning = value;
                _shouldSerializecleaning = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cleaningSpecified
        {
            get
            {
                return this._cleaning.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._cleaning = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool fueling
        {
            get
            {
                if (this._fueling.HasValue)
                {
                    return this._fueling.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._fueling = value;
                _shouldSerializefueling = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool fuelingSpecified
        {
            get
            {
                return this._fueling.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._fueling = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool parking
        {
            get
            {
                if (this._parking.HasValue)
                {
                    return this._parking.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._parking = value;
                _shouldSerializeparking = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool parkingSpecified
        {
            get
            {
                return this._parking.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._parking = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool preheating
        {
            get
            {
                if (this._preheating.HasValue)
                {
                    return this._preheating.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._preheating = value;
                _shouldSerializepreheating = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool preheatingSpecified
        {
            get
            {
                return this._preheating.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._preheating = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tServiceSection));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ramp should be serialized
        /// </summary>
        public virtual bool ShouldSerializeramp()
        {
            if (_shouldSerializeramp)
            {
                return true;
            }
            return (_ramp != default(bool));
        }

        /// <summary>
        /// Test whether maintenance should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaintenance()
        {
            if (_shouldSerializemaintenance)
            {
                return true;
            }
            return (_maintenance != default(bool));
        }

        /// <summary>
        /// Test whether loadingFacility should be serialized
        /// </summary>
        public virtual bool ShouldSerializeloadingFacility()
        {
            if (_shouldSerializeloadingFacility)
            {
                return true;
            }
            return (_loadingFacility != default(bool));
        }

        /// <summary>
        /// Test whether cleaning should be serialized
        /// </summary>
        public virtual bool ShouldSerializecleaning()
        {
            if (_shouldSerializecleaning)
            {
                return true;
            }
            return (_cleaning != default(bool));
        }

        /// <summary>
        /// Test whether fueling should be serialized
        /// </summary>
        public virtual bool ShouldSerializefueling()
        {
            if (_shouldSerializefueling)
            {
                return true;
            }
            return (_fueling != default(bool));
        }

        /// <summary>
        /// Test whether parking should be serialized
        /// </summary>
        public virtual bool ShouldSerializeparking()
        {
            if (_shouldSerializeparking)
            {
                return true;
            }
            return (_parking != default(bool));
        }

        /// <summary>
        /// Test whether preheating should be serialized
        /// </summary>
        public virtual bool ShouldSerializepreheating()
        {
            if (_shouldSerializepreheating)
            {
                return true;
            }
            return (_preheating != default(bool));
        }

        /// <summary>
        /// Test whether parentServiceSectionRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeparentServiceSectionRef()
        {
            return !string.IsNullOrEmpty(parentServiceSectionRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tServiceSection object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tServiceSection object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tServiceSection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tServiceSection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tServiceSection);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tServiceSection obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tServiceSection Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tServiceSection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tServiceSection Deserialize(System.IO.Stream s)
        {
            return ((tServiceSection)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tServiceSection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tServiceSection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tServiceSection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tServiceSection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tServiceSection);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tServiceSection obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tServiceSection LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPlatformEdge : tBaseServiceSection
    {

        private string _parentPlatformEdgeRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string parentPlatformEdgeRef
        {
            get
            {
                return this._parentPlatformEdgeRef;
            }
            set
            {
                this._parentPlatformEdgeRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPlatformEdge));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether parentPlatformEdgeRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeparentPlatformEdgeRef()
        {
            return !string.IsNullOrEmpty(parentPlatformEdgeRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPlatformEdge object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPlatformEdge object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPlatformEdge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPlatformEdge obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlatformEdge);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPlatformEdge obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tPlatformEdge Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPlatformEdge)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPlatformEdge Deserialize(System.IO.Stream s)
        {
            return ((tPlatformEdge)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPlatformEdge object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPlatformEdge object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPlatformEdge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPlatformEdge obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlatformEdge);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPlatformEdge obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tPlatformEdge LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBridge))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTunnel))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tDelimitedOrientedElementWithLength : tPlacedElementWithLength
    {

        private bool _shouldSerializedir;

        private System.Nullable<tDelimitedDirection> _dir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tDelimitedDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tDelimitedDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tDelimitedOrientedElementWithLength));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tDelimitedDirection));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tDelimitedOrientedElementWithLength object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tDelimitedOrientedElementWithLength object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tDelimitedOrientedElementWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tDelimitedOrientedElementWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDelimitedOrientedElementWithLength);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tDelimitedOrientedElementWithLength obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tDelimitedOrientedElementWithLength Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tDelimitedOrientedElementWithLength)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tDelimitedOrientedElementWithLength Deserialize(System.IO.Stream s)
        {
            return ((tDelimitedOrientedElementWithLength)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tDelimitedOrientedElementWithLength object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tDelimitedOrientedElementWithLength object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tDelimitedOrientedElementWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tDelimitedOrientedElementWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDelimitedOrientedElementWithLength);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tDelimitedOrientedElementWithLength obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tDelimitedOrientedElementWithLength LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tDelimitedDirection
    {

        /// <remarks/>
        up,

        /// <remarks/>
        down,

        /// <remarks/>
        unknown,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBridge : tDelimitedOrientedElementWithLength
    {

        private bool _shouldSerializemeterload;

        private string _kind;

        private System.Nullable<decimal> _meterload;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                this._kind = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meterload
        {
            get
            {
                if (this._meterload.HasValue)
                {
                    return this._meterload.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meterload = value;
                _shouldSerializemeterload = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterloadSpecified
        {
            get
            {
                return this._meterload.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meterload = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBridge));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether meterload should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeterload()
        {
            if (_shouldSerializemeterload)
            {
                return true;
            }
            return (_meterload != default(decimal));
        }

        /// <summary>
        /// Test whether kind should be serialized
        /// </summary>
        public virtual bool ShouldSerializekind()
        {
            return !string.IsNullOrEmpty(kind);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBridge object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBridge object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBridge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBridge obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBridge);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBridge obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBridge Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBridge)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBridge Deserialize(System.IO.Stream s)
        {
            return ((tBridge)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBridge object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBridge object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBridge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBridge obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBridge);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBridge obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBridge LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTunnel : tDelimitedOrientedElementWithLength
    {

        private bool _shouldSerializecrossSection;

        private System.Nullable<decimal> _crossSection;

        private string _kind;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal crossSection
        {
            get
            {
                if (this._crossSection.HasValue)
                {
                    return this._crossSection.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._crossSection = value;
                _shouldSerializecrossSection = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool crossSectionSpecified
        {
            get
            {
                return this._crossSection.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._crossSection = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                this._kind = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTunnel));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether crossSection should be serialized
        /// </summary>
        public virtual bool ShouldSerializecrossSection()
        {
            if (_shouldSerializecrossSection)
            {
                return true;
            }
            return (_crossSection != default(decimal));
        }

        /// <summary>
        /// Test whether kind should be serialized
        /// </summary>
        public virtual bool ShouldSerializekind()
        {
            return !string.IsNullOrEmpty(kind);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTunnel object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTunnel object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTunnel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTunnel obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTunnel);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTunnel obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTunnel Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTunnel)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTunnel Deserialize(System.IO.Stream s)
        {
            return ((tTunnel)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTunnel object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTunnel object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTunnel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTunnel obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTunnel);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTunnel obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTunnel LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOrientedElementWithLength : tPlacedElementWithLength
    {

        private bool _shouldSerializedir;

        private System.Nullable<tLaxDirection> _dir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tLaxDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tLaxDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOrientedElementWithLength));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tLaxDirection));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOrientedElementWithLength object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOrientedElementWithLength object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOrientedElementWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOrientedElementWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOrientedElementWithLength);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOrientedElementWithLength obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOrientedElementWithLength Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOrientedElementWithLength)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOrientedElementWithLength Deserialize(System.IO.Stream s)
        {
            return ((tOrientedElementWithLength)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOrientedElementWithLength object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOrientedElementWithLength object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOrientedElementWithLength object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOrientedElementWithLength obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOrientedElementWithLength);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOrientedElementWithLength obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOrientedElementWithLength LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tLaxDirection
    {

        /// <remarks/>
        up,

        /// <remarks/>
        down,

        /// <remarks/>
        unknown,

        /// <remarks/>
        none,

        /// <remarks/>
        both,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCrossSection))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCommonSwitchAndCrossingData))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSwitch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eSwitch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStrictOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRadiusChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGradientChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSpeedChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tAxleWeightChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPowerTransmissionChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGaugeChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tElectrificationChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperationModeChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOwnerChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDelimitedOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackCircuitBorder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainDetector))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackCondition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tLevelCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBorder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOrientedElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBalise))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRuleCodeElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDerailer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStopPost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPlacedElement : tBasePlacedElement
    {

        private List<tState> _states;

        private static XmlSerializer serializer;

        public tPlacedElement()
        {
            this._states = new List<tState>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("state", IsNullable = false)]
        public List<tState> states
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPlacedElement));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether states should be serialized
        /// </summary>
        public virtual bool ShouldSerializestates()
        {
            return states != null && states.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPlacedElement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPlacedElement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPlacedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPlacedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlacedElement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPlacedElement obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tPlacedElement Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPlacedElement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPlacedElement Deserialize(System.IO.Stream s)
        {
            return ((tPlacedElement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPlacedElement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPlacedElement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPlacedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPlacedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPlacedElement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPlacedElement obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tPlacedElement LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCrossSection : tPlacedElement
    {

        private bool _shouldSerializedir;

        private string _type;

        private string _ocpRef;

        private System.Nullable<byte> _ocpTrackID;

        private System.Nullable<tLaxDirection> _dir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpRef
        {
            get
            {
                return this._ocpRef;
            }
            set
            {
                this._ocpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public byte ocpTrackID
        {
            get
            {
                if (this._ocpTrackID.HasValue)
                {
                    return this._ocpTrackID.Value;
                }
                else
                {
                    return default(byte);
                }
            }
            set
            {
                this._ocpTrackID = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ocpTrackIDSpecified
        {
            get
            {
                return this._ocpTrackID.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._ocpTrackID = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tLaxDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tLaxDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCrossSection));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tLaxDirection));
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether ocpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpRef()
        {
            return !string.IsNullOrEmpty(ocpRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCrossSection object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCrossSection object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCrossSection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCrossSection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCrossSection);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCrossSection obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tCrossSection Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCrossSection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCrossSection Deserialize(System.IO.Stream s)
        {
            return ((tCrossSection)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCrossSection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCrossSection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCrossSection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCrossSection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCrossSection);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCrossSection obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tCrossSection LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSwitch))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eSwitch))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCommonSwitchAndCrossingData : tPlacedElement
    {

        private bool _shouldSerializelength;

        private bool _shouldSerializetrackContinueRadius;

        private string _trackContinueCourse;

        private System.Nullable<decimal> _trackContinueRadius;

        private string _normalPosition;

        private string _model;

        private System.Nullable<decimal> _length;

        private string _ocpStationRef;

        private string _controllerRef;

        private List<System.Xml.XmlAttribute> _anyAttr1;

        private static XmlSerializer serializer;

        public tCommonSwitchAndCrossingData()
        {
            this._anyAttr1 = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trackContinueCourse
        {
            get
            {
                return this._trackContinueCourse;
            }
            set
            {
                this._trackContinueCourse = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal trackContinueRadius
        {
            get
            {
                if (this._trackContinueRadius.HasValue)
                {
                    return this._trackContinueRadius.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._trackContinueRadius = value;
                _shouldSerializetrackContinueRadius = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trackContinueRadiusSpecified
        {
            get
            {
                return this._trackContinueRadius.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trackContinueRadius = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string normalPosition
        {
            get
            {
                return this._normalPosition;
            }
            set
            {
                this._normalPosition = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string model
        {
            get
            {
                return this._model;
            }
            set
            {
                this._model = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal length
        {
            get
            {
                if (this._length.HasValue)
                {
                    return this._length.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._length = value;
                _shouldSerializelength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthSpecified
        {
            get
            {
                return this._length.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._length = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpStationRef
        {
            get
            {
                return this._ocpStationRef;
            }
            set
            {
                this._ocpStationRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string controllerRef
        {
            get
            {
                return this._controllerRef;
            }
            set
            {
                this._controllerRef = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr1
        {
            get
            {
                return this._anyAttr1;
            }
            set
            {
                this._anyAttr1 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCommonSwitchAndCrossingData));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr1()
        {
            return AnyAttr1 != null && AnyAttr1.Count > 0;
        }

        /// <summary>
        /// Test whether trackContinueRadius should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackContinueRadius()
        {
            if (_shouldSerializetrackContinueRadius)
            {
                return true;
            }
            return (_trackContinueRadius != default(decimal));
        }

        /// <summary>
        /// Test whether length should be serialized
        /// </summary>
        public virtual bool ShouldSerializelength()
        {
            if (_shouldSerializelength)
            {
                return true;
            }
            return (_length != default(decimal));
        }

        /// <summary>
        /// Test whether trackContinueCourse should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackContinueCourse()
        {
            return !string.IsNullOrEmpty(trackContinueCourse);
        }

        /// <summary>
        /// Test whether normalPosition should be serialized
        /// </summary>
        public virtual bool ShouldSerializenormalPosition()
        {
            return !string.IsNullOrEmpty(normalPosition);
        }

        /// <summary>
        /// Test whether model should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodel()
        {
            return !string.IsNullOrEmpty(model);
        }

        /// <summary>
        /// Test whether ocpStationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpStationRef()
        {
            return !string.IsNullOrEmpty(ocpStationRef);
        }

        /// <summary>
        /// Test whether controllerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrollerRef()
        {
            return !string.IsNullOrEmpty(controllerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCommonSwitchAndCrossingData object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCommonSwitchAndCrossingData object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCommonSwitchAndCrossingData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCommonSwitchAndCrossingData obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCommonSwitchAndCrossingData);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCommonSwitchAndCrossingData obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tCommonSwitchAndCrossingData Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCommonSwitchAndCrossingData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCommonSwitchAndCrossingData Deserialize(System.IO.Stream s)
        {
            return ((tCommonSwitchAndCrossingData)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCommonSwitchAndCrossingData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCommonSwitchAndCrossingData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCommonSwitchAndCrossingData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCommonSwitchAndCrossingData obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCommonSwitchAndCrossingData);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCommonSwitchAndCrossingData obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tCommonSwitchAndCrossingData LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eCrossing))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCrossing : tCommonSwitchAndCrossingData
    {

        private string _type;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCrossing));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCrossing object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCrossing object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCrossing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCrossing obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCrossing);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCrossing obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tCrossing Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCrossing)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCrossing Deserialize(System.IO.Stream s)
        {
            return ((tCrossing)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCrossing object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCrossing object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCrossing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCrossing obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCrossing);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCrossing obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tCrossing LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eCrossing : tCrossing
    {

        private List<tSwitchConnectionData> _connection;

        private static XmlSerializer serializer;

        public eCrossing()
        {
            this._connection = new List<tSwitchConnectionData>();
        }

        [System.Xml.Serialization.XmlElementAttribute("connection")]
        public List<tSwitchConnectionData> connection
        {
            get
            {
                return this._connection;
            }
            set
            {
                this._connection = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eCrossing));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether connection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconnection()
        {
            return connection != null && connection.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eCrossing object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eCrossing object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eCrossing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eCrossing obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eCrossing);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eCrossing obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eCrossing Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eCrossing)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eCrossing Deserialize(System.IO.Stream s)
        {
            return ((eCrossing)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eCrossing object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eCrossing object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eCrossing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eCrossing obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eCrossing);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eCrossing obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eCrossing LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSwitchConnectionData : tConnectionData
    {

        private bool _shouldSerializepassable;

        private bool _shouldSerializebranchDist;

        private bool _shouldSerializemaxSpeed;

        private bool _shouldSerializeradius;

        private string _course;

        private System.Nullable<decimal> _radius;

        private System.Nullable<decimal> _maxSpeed;

        private System.Nullable<decimal> _branchDist;

        private string _orientation;

        private bool _passable;

        private static XmlSerializer serializer;

        public tSwitchConnectionData()
        {
            this._passable = true;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string course
        {
            get
            {
                return this._course;
            }
            set
            {
                this._course = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal radius
        {
            get
            {
                if (this._radius.HasValue)
                {
                    return this._radius.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._radius = value;
                _shouldSerializeradius = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool radiusSpecified
        {
            get
            {
                return this._radius.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._radius = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxSpeed
        {
            get
            {
                if (this._maxSpeed.HasValue)
                {
                    return this._maxSpeed.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxSpeed = value;
                _shouldSerializemaxSpeed = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxSpeedSpecified
        {
            get
            {
                return this._maxSpeed.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxSpeed = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal branchDist
        {
            get
            {
                if (this._branchDist.HasValue)
                {
                    return this._branchDist.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._branchDist = value;
                _shouldSerializebranchDist = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool branchDistSpecified
        {
            get
            {
                return this._branchDist.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._branchDist = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string orientation
        {
            get
            {
                return this._orientation;
            }
            set
            {
                this._orientation = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(true)]
        public bool passable
        {
            get
            {
                return this._passable;
            }
            set
            {
                this._passable = value;
                _shouldSerializepassable = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSwitchConnectionData));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether radius should be serialized
        /// </summary>
        public virtual bool ShouldSerializeradius()
        {
            if (_shouldSerializeradius)
            {
                return true;
            }
            return (_radius != default(decimal));
        }

        /// <summary>
        /// Test whether maxSpeed should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxSpeed()
        {
            if (_shouldSerializemaxSpeed)
            {
                return true;
            }
            return (_maxSpeed != default(decimal));
        }

        /// <summary>
        /// Test whether branchDist should be serialized
        /// </summary>
        public virtual bool ShouldSerializebranchDist()
        {
            if (_shouldSerializebranchDist)
            {
                return true;
            }
            return (_branchDist != default(decimal));
        }

        /// <summary>
        /// Test whether passable should be serialized
        /// </summary>
        public virtual bool ShouldSerializepassable()
        {
            if (_shouldSerializepassable)
            {
                return true;
            }
            return (_passable != default(bool));
        }

        /// <summary>
        /// Test whether course should be serialized
        /// </summary>
        public virtual bool ShouldSerializecourse()
        {
            return !string.IsNullOrEmpty(course);
        }

        /// <summary>
        /// Test whether orientation should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorientation()
        {
            return !string.IsNullOrEmpty(orientation);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSwitchConnectionData object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSwitchConnectionData object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSwitchConnectionData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSwitchConnectionData obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSwitchConnectionData);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSwitchConnectionData obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSwitchConnectionData Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSwitchConnectionData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSwitchConnectionData Deserialize(System.IO.Stream s)
        {
            return ((tSwitchConnectionData)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSwitchConnectionData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSwitchConnectionData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSwitchConnectionData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSwitchConnectionData obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSwitchConnectionData);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSwitchConnectionData obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSwitchConnectionData LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSwitchConnectionData))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tConnectionData : ParentContainer
    {

        private string _id;

        private string _ref;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string @ref
        {
            get
            {
                return this._ref;
            }
            set
            {
                this._ref = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tConnectionData));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeid()
        {
            return !string.IsNullOrEmpty(id);
        }

        /// <summary>
        /// Test whether ref should be serialized
        /// </summary>
        public virtual bool ShouldSerializeref()
        {
            return !string.IsNullOrEmpty(@ref);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tConnectionData object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tConnectionData object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tConnectionData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tConnectionData obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tConnectionData);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tConnectionData obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tConnectionData Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tConnectionData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tConnectionData Deserialize(System.IO.Stream s)
        {
            return ((tConnectionData)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tConnectionData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tConnectionData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tConnectionData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tConnectionData obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tConnectionData);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tConnectionData obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tConnectionData LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eSwitch))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSwitch : tCommonSwitchAndCrossingData
    {

        private string _type;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSwitch));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSwitch object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSwitch object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSwitch obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSwitch);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSwitch obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSwitch Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSwitch)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSwitch Deserialize(System.IO.Stream s)
        {
            return ((tSwitch)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSwitch object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSwitch object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSwitch obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSwitch);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSwitch obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSwitch LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eSwitch : tSwitch
    {

        private List<tSwitchConnectionData> _connection;

        private static XmlSerializer serializer;

        public eSwitch()
        {
            this._connection = new List<tSwitchConnectionData>();
        }

        [System.Xml.Serialization.XmlElementAttribute("connection")]
        public List<tSwitchConnectionData> connection
        {
            get
            {
                return this._connection;
            }
            set
            {
                this._connection = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eSwitch));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether connection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconnection()
        {
            return connection != null && connection.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eSwitch object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eSwitch object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eSwitch obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eSwitch);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eSwitch obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eSwitch Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eSwitch)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eSwitch Deserialize(System.IO.Stream s)
        {
            return ((eSwitch)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eSwitch object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eSwitch object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eSwitch object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eSwitch obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eSwitch);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eSwitch obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eSwitch LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRadiusChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGradientChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSpeedChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tAxleWeightChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tPowerTransmissionChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tGaugeChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tElectrificationChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOperationModeChange))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tOwnerChange))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStrictOrientedElement : tPlacedElement
    {

        private bool _shouldSerializedir;

        private System.Nullable<tStrictDirection> _dir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tStrictDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tStrictDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStrictOrientedElement));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tStrictDirection));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStrictOrientedElement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStrictOrientedElement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStrictOrientedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStrictOrientedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStrictOrientedElement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStrictOrientedElement obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tStrictOrientedElement Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStrictOrientedElement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStrictOrientedElement Deserialize(System.IO.Stream s)
        {
            return ((tStrictOrientedElement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStrictOrientedElement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStrictOrientedElement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStrictOrientedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStrictOrientedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStrictOrientedElement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStrictOrientedElement obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tStrictOrientedElement LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tRadiusChange : tStrictOrientedElement
    {

        private bool _shouldSerializesuperelevation;

        private bool _shouldSerializeradius;

        private decimal _radius;

        private System.Nullable<decimal> _superelevation;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal radius
        {
            get
            {
                return this._radius;
            }
            set
            {
                this._radius = value;
                _shouldSerializeradius = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal superelevation
        {
            get
            {
                if (this._superelevation.HasValue)
                {
                    return this._superelevation.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._superelevation = value;
                _shouldSerializesuperelevation = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool superelevationSpecified
        {
            get
            {
                return this._superelevation.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._superelevation = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tRadiusChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether radius should be serialized
        /// </summary>
        public virtual bool ShouldSerializeradius()
        {
            if (_shouldSerializeradius)
            {
                return true;
            }
            return (_radius != default(decimal));
        }

        /// <summary>
        /// Test whether superelevation should be serialized
        /// </summary>
        public virtual bool ShouldSerializesuperelevation()
        {
            if (_shouldSerializesuperelevation)
            {
                return true;
            }
            return (_superelevation != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tRadiusChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tRadiusChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tRadiusChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tRadiusChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRadiusChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tRadiusChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tRadiusChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tRadiusChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tRadiusChange Deserialize(System.IO.Stream s)
        {
            return ((tRadiusChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tRadiusChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tRadiusChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tRadiusChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tRadiusChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRadiusChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tRadiusChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tRadiusChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tGradientChange : tStrictOrientedElement
    {

        private bool _shouldSerializetransitionRadius;

        private bool _shouldSerializetransitionLenght;

        private bool _shouldSerializeslope;

        private decimal _slope;

        private System.Nullable<decimal> _transitionLenght;

        private System.Nullable<decimal> _transitionRadius;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal slope
        {
            get
            {
                return this._slope;
            }
            set
            {
                this._slope = value;
                _shouldSerializeslope = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal transitionLenght
        {
            get
            {
                if (this._transitionLenght.HasValue)
                {
                    return this._transitionLenght.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._transitionLenght = value;
                _shouldSerializetransitionLenght = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool transitionLenghtSpecified
        {
            get
            {
                return this._transitionLenght.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._transitionLenght = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal transitionRadius
        {
            get
            {
                if (this._transitionRadius.HasValue)
                {
                    return this._transitionRadius.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._transitionRadius = value;
                _shouldSerializetransitionRadius = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool transitionRadiusSpecified
        {
            get
            {
                return this._transitionRadius.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._transitionRadius = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tGradientChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether slope should be serialized
        /// </summary>
        public virtual bool ShouldSerializeslope()
        {
            if (_shouldSerializeslope)
            {
                return true;
            }
            return (_slope != default(decimal));
        }

        /// <summary>
        /// Test whether transitionLenght should be serialized
        /// </summary>
        public virtual bool ShouldSerializetransitionLenght()
        {
            if (_shouldSerializetransitionLenght)
            {
                return true;
            }
            return (_transitionLenght != default(decimal));
        }

        /// <summary>
        /// Test whether transitionRadius should be serialized
        /// </summary>
        public virtual bool ShouldSerializetransitionRadius()
        {
            if (_shouldSerializetransitionRadius)
            {
                return true;
            }
            return (_transitionRadius != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tGradientChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tGradientChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tGradientChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tGradientChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGradientChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tGradientChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tGradientChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tGradientChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tGradientChange Deserialize(System.IO.Stream s)
        {
            return ((tGradientChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tGradientChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tGradientChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tGradientChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tGradientChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGradientChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tGradientChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tGradientChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSpeedChange : tStrictOrientedElement
    {

        private bool _shouldSerializesignalised;

        private bool _shouldSerializemandatoryStop;

        private bool _shouldSerializevMax;

        private string _trainCategory;

        private string _etcsTrainCategory;

        private string _profileRef;

        private string _status;

        private decimal _vMax;

        private string _trainRelation;

        private System.Nullable<bool> _mandatoryStop;

        private System.Nullable<bool> _signalised;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainCategory
        {
            get
            {
                return this._trainCategory;
            }
            set
            {
                this._trainCategory = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string etcsTrainCategory
        {
            get
            {
                return this._etcsTrainCategory;
            }
            set
            {
                this._etcsTrainCategory = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string profileRef
        {
            get
            {
                return this._profileRef;
            }
            set
            {
                this._profileRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal vMax
        {
            get
            {
                return this._vMax;
            }
            set
            {
                this._vMax = value;
                _shouldSerializevMax = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainRelation
        {
            get
            {
                return this._trainRelation;
            }
            set
            {
                this._trainRelation = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool mandatoryStop
        {
            get
            {
                if (this._mandatoryStop.HasValue)
                {
                    return this._mandatoryStop.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._mandatoryStop = value;
                _shouldSerializemandatoryStop = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mandatoryStopSpecified
        {
            get
            {
                return this._mandatoryStop.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._mandatoryStop = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool signalised
        {
            get
            {
                if (this._signalised.HasValue)
                {
                    return this._signalised.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._signalised = value;
                _shouldSerializesignalised = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool signalisedSpecified
        {
            get
            {
                return this._signalised.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._signalised = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSpeedChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether vMax should be serialized
        /// </summary>
        public virtual bool ShouldSerializevMax()
        {
            if (_shouldSerializevMax)
            {
                return true;
            }
            return (_vMax != default(decimal));
        }

        /// <summary>
        /// Test whether mandatoryStop should be serialized
        /// </summary>
        public virtual bool ShouldSerializemandatoryStop()
        {
            if (_shouldSerializemandatoryStop)
            {
                return true;
            }
            return (_mandatoryStop != default(bool));
        }

        /// <summary>
        /// Test whether signalised should be serialized
        /// </summary>
        public virtual bool ShouldSerializesignalised()
        {
            if (_shouldSerializesignalised)
            {
                return true;
            }
            return (_signalised != default(bool));
        }

        /// <summary>
        /// Test whether trainCategory should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainCategory()
        {
            return !string.IsNullOrEmpty(trainCategory);
        }

        /// <summary>
        /// Test whether etcsTrainCategory should be serialized
        /// </summary>
        public virtual bool ShouldSerializeetcsTrainCategory()
        {
            return !string.IsNullOrEmpty(etcsTrainCategory);
        }

        /// <summary>
        /// Test whether profileRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprofileRef()
        {
            return !string.IsNullOrEmpty(profileRef);
        }

        /// <summary>
        /// Test whether status should be serialized
        /// </summary>
        public virtual bool ShouldSerializestatus()
        {
            return !string.IsNullOrEmpty(status);
        }

        /// <summary>
        /// Test whether trainRelation should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainRelation()
        {
            return !string.IsNullOrEmpty(trainRelation);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSpeedChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSpeedChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSpeedChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSpeedChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpeedChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSpeedChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSpeedChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSpeedChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSpeedChange Deserialize(System.IO.Stream s)
        {
            return ((tSpeedChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSpeedChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSpeedChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSpeedChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSpeedChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpeedChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSpeedChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSpeedChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAxleWeightChange : tStrictOrientedElement
    {

        private bool _shouldSerializemeterload;

        private bool _shouldSerializevalue;

        private decimal _value;

        private System.Nullable<decimal> _meterload;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
                _shouldSerializevalue = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meterload
        {
            get
            {
                if (this._meterload.HasValue)
                {
                    return this._meterload.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meterload = value;
                _shouldSerializemeterload = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterloadSpecified
        {
            get
            {
                return this._meterload.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meterload = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAxleWeightChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            if (_shouldSerializevalue)
            {
                return true;
            }
            return (_value != default(decimal));
        }

        /// <summary>
        /// Test whether meterload should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeterload()
        {
            if (_shouldSerializemeterload)
            {
                return true;
            }
            return (_meterload != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAxleWeightChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAxleWeightChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAxleWeightChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAxleWeightChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAxleWeightChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAxleWeightChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tAxleWeightChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAxleWeightChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAxleWeightChange Deserialize(System.IO.Stream s)
        {
            return ((tAxleWeightChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAxleWeightChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAxleWeightChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAxleWeightChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAxleWeightChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAxleWeightChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAxleWeightChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tAxleWeightChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPowerTransmissionChange : tStrictOrientedElement
    {

        private string _type;

        private string _style;

        private static XmlSerializer serializer;

        public tPowerTransmissionChange()
        {
            this._type = "adhesion";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("adhesion")]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string style
        {
            get
            {
                return this._style;
            }
            set
            {
                this._style = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPowerTransmissionChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether style should be serialized
        /// </summary>
        public virtual bool ShouldSerializestyle()
        {
            return !string.IsNullOrEmpty(style);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPowerTransmissionChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPowerTransmissionChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPowerTransmissionChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPowerTransmissionChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPowerTransmissionChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPowerTransmissionChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tPowerTransmissionChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPowerTransmissionChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPowerTransmissionChange Deserialize(System.IO.Stream s)
        {
            return ((tPowerTransmissionChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPowerTransmissionChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPowerTransmissionChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPowerTransmissionChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPowerTransmissionChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPowerTransmissionChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPowerTransmissionChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tPowerTransmissionChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tGaugeChange : tStrictOrientedElement
    {

        private bool _shouldSerializevalue;

        private decimal _value;

        private static XmlSerializer serializer;

        public tGaugeChange()
        {
            this._value = ((decimal)(1435m));
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(decimal), "1435")]
        public decimal value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
                _shouldSerializevalue = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tGaugeChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            if (_shouldSerializevalue)
            {
                return true;
            }
            return (_value != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tGaugeChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tGaugeChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tGaugeChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tGaugeChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGaugeChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tGaugeChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tGaugeChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tGaugeChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tGaugeChange Deserialize(System.IO.Stream s)
        {
            return ((tGaugeChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tGaugeChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tGaugeChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tGaugeChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tGaugeChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGaugeChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tGaugeChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tGaugeChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tElectrificationChange : tStrictOrientedElement
    {

        private bool _shouldSerializeisolatedSection;

        private bool _shouldSerializevMax;

        private bool _shouldSerializefrequency;

        private bool _shouldSerializevoltage;

        private string _type;

        private decimal _voltage;

        private decimal _frequency;

        private System.Nullable<decimal> _vMax;

        private bool _isolatedSection;

        private static XmlSerializer serializer;

        public tElectrificationChange()
        {
            this._type = "none";
            this._voltage = ((decimal)(15000m));
            this._frequency = ((decimal)(16.667m));
            this._isolatedSection = false;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("none")]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(decimal), "15000")]
        public decimal voltage
        {
            get
            {
                return this._voltage;
            }
            set
            {
                this._voltage = value;
                _shouldSerializevoltage = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(decimal), "16.667")]
        public decimal frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                this._frequency = value;
                _shouldSerializefrequency = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal vMax
        {
            get
            {
                if (this._vMax.HasValue)
                {
                    return this._vMax.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._vMax = value;
                _shouldSerializevMax = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool vMaxSpecified
        {
            get
            {
                return this._vMax.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._vMax = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool isolatedSection
        {
            get
            {
                return this._isolatedSection;
            }
            set
            {
                this._isolatedSection = value;
                _shouldSerializeisolatedSection = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tElectrificationChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether voltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializevoltage()
        {
            if (_shouldSerializevoltage)
            {
                return true;
            }
            return (_voltage != default(decimal));
        }

        /// <summary>
        /// Test whether frequency should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrequency()
        {
            if (_shouldSerializefrequency)
            {
                return true;
            }
            return (_frequency != default(decimal));
        }

        /// <summary>
        /// Test whether vMax should be serialized
        /// </summary>
        public virtual bool ShouldSerializevMax()
        {
            if (_shouldSerializevMax)
            {
                return true;
            }
            return (_vMax != default(decimal));
        }

        /// <summary>
        /// Test whether isolatedSection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeisolatedSection()
        {
            if (_shouldSerializeisolatedSection)
            {
                return true;
            }
            return (_isolatedSection != default(bool));
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tElectrificationChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tElectrificationChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tElectrificationChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tElectrificationChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElectrificationChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tElectrificationChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tElectrificationChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tElectrificationChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tElectrificationChange Deserialize(System.IO.Stream s)
        {
            return ((tElectrificationChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tElectrificationChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tElectrificationChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tElectrificationChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tElectrificationChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElectrificationChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tElectrificationChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tElectrificationChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainProtectionChange : tStrictOrientedElement
    {

        private bool _shouldSerializemedium;

        private bool _shouldSerializemonitoring;

        private tTrainProtectionMonitoring _monitoring;

        private System.Nullable<tTrainProtectionMedium> _medium;

        private static XmlSerializer serializer;

        public tTrainProtectionChange()
        {
            this._monitoring = tTrainProtectionMonitoring.none;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(tTrainProtectionMonitoring.none)]
        public tTrainProtectionMonitoring monitoring
        {
            get
            {
                return this._monitoring;
            }
            set
            {
                this._monitoring = value;
                _shouldSerializemonitoring = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTrainProtectionMedium medium
        {
            get
            {
                if (this._medium.HasValue)
                {
                    return this._medium.Value;
                }
                else
                {
                    return default(tTrainProtectionMedium);
                }
            }
            set
            {
                this._medium = value;
                _shouldSerializemedium = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mediumSpecified
        {
            get
            {
                return this._medium.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._medium = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainProtectionChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether monitoring should be serialized
        /// </summary>
        public virtual bool ShouldSerializemonitoring()
        {
            if (_shouldSerializemonitoring)
            {
                return true;
            }
            return (_monitoring != default(tTrainProtectionMonitoring));
        }

        /// <summary>
        /// Test whether medium should be serialized
        /// </summary>
        public virtual bool ShouldSerializemedium()
        {
            if (_shouldSerializemedium)
            {
                return true;
            }
            return (_medium != default(tTrainProtectionMedium));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainProtectionChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainProtectionChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainProtectionChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainProtectionChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainProtectionChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainProtectionChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainProtectionChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainProtectionChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainProtectionChange Deserialize(System.IO.Stream s)
        {
            return ((tTrainProtectionChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainProtectionChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainProtectionChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainProtectionChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainProtectionChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainProtectionChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainProtectionChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainProtectionChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperationModeChange : tStrictOrientedElement
    {

        private string _modeLegislative;

        private string _modeExecutive;

        private string _clearanceManaging;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string modeLegislative
        {
            get
            {
                return this._modeLegislative;
            }
            set
            {
                this._modeLegislative = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string modeExecutive
        {
            get
            {
                return this._modeExecutive;
            }
            set
            {
                this._modeExecutive = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string clearanceManaging
        {
            get
            {
                return this._clearanceManaging;
            }
            set
            {
                this._clearanceManaging = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperationModeChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether modeLegislative should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodeLegislative()
        {
            return !string.IsNullOrEmpty(modeLegislative);
        }

        /// <summary>
        /// Test whether modeExecutive should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodeExecutive()
        {
            return !string.IsNullOrEmpty(modeExecutive);
        }

        /// <summary>
        /// Test whether clearanceManaging should be serialized
        /// </summary>
        public virtual bool ShouldSerializeclearanceManaging()
        {
            return !string.IsNullOrEmpty(clearanceManaging);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperationModeChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperationModeChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperationModeChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperationModeChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperationModeChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperationModeChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOperationModeChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperationModeChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperationModeChange Deserialize(System.IO.Stream s)
        {
            return ((tOperationModeChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperationModeChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperationModeChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperationModeChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperationModeChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperationModeChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperationModeChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOperationModeChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOwnerChange : tStrictOrientedElement
    {

        private string _ownerName;

        private string _uicno;

        private string _infrastructureManagerRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ownerName
        {
            get
            {
                return this._ownerName;
            }
            set
            {
                this._ownerName = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute("uic-no", DataType = "positiveInteger")]
        public string uicno
        {
            get
            {
                return this._uicno;
            }
            set
            {
                this._uicno = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string infrastructureManagerRef
        {
            get
            {
                return this._infrastructureManagerRef;
            }
            set
            {
                this._infrastructureManagerRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOwnerChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ownerName should be serialized
        /// </summary>
        public virtual bool ShouldSerializeownerName()
        {
            return !string.IsNullOrEmpty(ownerName);
        }

        /// <summary>
        /// Test whether uicno should be serialized
        /// </summary>
        public virtual bool ShouldSerializeuicno()
        {
            return !string.IsNullOrEmpty(uicno);
        }

        /// <summary>
        /// Test whether infrastructureManagerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructureManagerRef()
        {
            return !string.IsNullOrEmpty(infrastructureManagerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOwnerChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOwnerChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOwnerChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOwnerChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOwnerChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOwnerChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOwnerChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOwnerChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOwnerChange Deserialize(System.IO.Stream s)
        {
            return ((tOwnerChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOwnerChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOwnerChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOwnerChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOwnerChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOwnerChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOwnerChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOwnerChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackCircuitBorder))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainDetector))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrackCondition))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tLevelCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBorder))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tDelimitedOrientedElement : tPlacedElement
    {

        private bool _shouldSerializedir;

        private System.Nullable<tDelimitedDirection> _dir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tDelimitedDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tDelimitedDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tDelimitedOrientedElement));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tDelimitedDirection));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tDelimitedOrientedElement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tDelimitedOrientedElement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tDelimitedOrientedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tDelimitedOrientedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDelimitedOrientedElement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tDelimitedOrientedElement obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tDelimitedOrientedElement Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tDelimitedOrientedElement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tDelimitedOrientedElement Deserialize(System.IO.Stream s)
        {
            return ((tDelimitedOrientedElement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tDelimitedOrientedElement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tDelimitedOrientedElement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tDelimitedOrientedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tDelimitedOrientedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDelimitedOrientedElement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tDelimitedOrientedElement obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tDelimitedOrientedElement LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrackCircuitBorder : tDelimitedOrientedElement
    {

        private bool _shouldSerializeinsulatedRail;

        private System.Nullable<tInsulatedRailSide> _insulatedRail;

        private string _ocpStationRef;

        private string _controllerRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tInsulatedRailSide insulatedRail
        {
            get
            {
                if (this._insulatedRail.HasValue)
                {
                    return this._insulatedRail.Value;
                }
                else
                {
                    return default(tInsulatedRailSide);
                }
            }
            set
            {
                this._insulatedRail = value;
                _shouldSerializeinsulatedRail = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool insulatedRailSpecified
        {
            get
            {
                return this._insulatedRail.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._insulatedRail = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpStationRef
        {
            get
            {
                return this._ocpStationRef;
            }
            set
            {
                this._ocpStationRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string controllerRef
        {
            get
            {
                return this._controllerRef;
            }
            set
            {
                this._controllerRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrackCircuitBorder));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether insulatedRail should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinsulatedRail()
        {
            if (_shouldSerializeinsulatedRail)
            {
                return true;
            }
            return (_insulatedRail != default(tInsulatedRailSide));
        }

        /// <summary>
        /// Test whether ocpStationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpStationRef()
        {
            return !string.IsNullOrEmpty(ocpStationRef);
        }

        /// <summary>
        /// Test whether controllerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrollerRef()
        {
            return !string.IsNullOrEmpty(controllerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrackCircuitBorder object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrackCircuitBorder object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrackCircuitBorder object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrackCircuitBorder obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackCircuitBorder);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrackCircuitBorder obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrackCircuitBorder Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrackCircuitBorder)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrackCircuitBorder Deserialize(System.IO.Stream s)
        {
            return ((tTrackCircuitBorder)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrackCircuitBorder object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrackCircuitBorder object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrackCircuitBorder object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrackCircuitBorder obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackCircuitBorder);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrackCircuitBorder obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrackCircuitBorder LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tInsulatedRailSide
    {

        /// <remarks/>
        none,

        /// <remarks/>
        left,

        /// <remarks/>
        right,

        /// <remarks/>
        both,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainDetector : tDelimitedOrientedElement
    {

        private bool _shouldSerializeaxleCounting;

        private bool _shouldSerializedirectionDetection;

        private bool _shouldSerializeposInTrack;

        private string _detectionObject;

        private string _medium;

        private System.Nullable<tPosInTrack> _posInTrack;

        private System.Nullable<bool> _directionDetection;

        private string _model;

        private System.Nullable<bool> _axleCounting;

        private string _ocpStationRef;

        private string _controllerRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string detectionObject
        {
            get
            {
                return this._detectionObject;
            }
            set
            {
                this._detectionObject = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string medium
        {
            get
            {
                return this._medium;
            }
            set
            {
                this._medium = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tPosInTrack posInTrack
        {
            get
            {
                if (this._posInTrack.HasValue)
                {
                    return this._posInTrack.Value;
                }
                else
                {
                    return default(tPosInTrack);
                }
            }
            set
            {
                this._posInTrack = value;
                _shouldSerializeposInTrack = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool posInTrackSpecified
        {
            get
            {
                return this._posInTrack.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._posInTrack = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool directionDetection
        {
            get
            {
                if (this._directionDetection.HasValue)
                {
                    return this._directionDetection.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._directionDetection = value;
                _shouldSerializedirectionDetection = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool directionDetectionSpecified
        {
            get
            {
                return this._directionDetection.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._directionDetection = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string model
        {
            get
            {
                return this._model;
            }
            set
            {
                this._model = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool axleCounting
        {
            get
            {
                if (this._axleCounting.HasValue)
                {
                    return this._axleCounting.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._axleCounting = value;
                _shouldSerializeaxleCounting = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool axleCountingSpecified
        {
            get
            {
                return this._axleCounting.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._axleCounting = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpStationRef
        {
            get
            {
                return this._ocpStationRef;
            }
            set
            {
                this._ocpStationRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string controllerRef
        {
            get
            {
                return this._controllerRef;
            }
            set
            {
                this._controllerRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainDetector));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether posInTrack should be serialized
        /// </summary>
        public virtual bool ShouldSerializeposInTrack()
        {
            if (_shouldSerializeposInTrack)
            {
                return true;
            }
            return (_posInTrack != default(tPosInTrack));
        }

        /// <summary>
        /// Test whether directionDetection should be serialized
        /// </summary>
        public virtual bool ShouldSerializedirectionDetection()
        {
            if (_shouldSerializedirectionDetection)
            {
                return true;
            }
            return (_directionDetection != default(bool));
        }

        /// <summary>
        /// Test whether axleCounting should be serialized
        /// </summary>
        public virtual bool ShouldSerializeaxleCounting()
        {
            if (_shouldSerializeaxleCounting)
            {
                return true;
            }
            return (_axleCounting != default(bool));
        }

        /// <summary>
        /// Test whether detectionObject should be serialized
        /// </summary>
        public virtual bool ShouldSerializedetectionObject()
        {
            return !string.IsNullOrEmpty(detectionObject);
        }

        /// <summary>
        /// Test whether medium should be serialized
        /// </summary>
        public virtual bool ShouldSerializemedium()
        {
            return !string.IsNullOrEmpty(medium);
        }

        /// <summary>
        /// Test whether model should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodel()
        {
            return !string.IsNullOrEmpty(model);
        }

        /// <summary>
        /// Test whether ocpStationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpStationRef()
        {
            return !string.IsNullOrEmpty(ocpStationRef);
        }

        /// <summary>
        /// Test whether controllerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrollerRef()
        {
            return !string.IsNullOrEmpty(controllerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainDetector object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainDetector object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainDetector object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainDetector obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainDetector);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainDetector obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainDetector Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainDetector)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainDetector Deserialize(System.IO.Stream s)
        {
            return ((tTrainDetector)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainDetector object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainDetector object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainDetector object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainDetector obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainDetector);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainDetector obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainDetector LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tPosInTrack
    {

        /// <remarks/>
        center,

        /// <remarks/>
        leftRail,

        /// <remarks/>
        leftRailInside,

        /// <remarks/>
        leftRailOutside,

        /// <remarks/>
        rightRail,

        /// <remarks/>
        rightRailInside,

        /// <remarks/>
        rightRailOutside,

        /// <remarks/>
        outside,

        /// <remarks/>
        outsideLeft,

        /// <remarks/>
        outsideRight,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrackCondition : tDelimitedOrientedElement
    {

        private bool _shouldSerializelength;

        private System.Nullable<decimal> _length;

        private string _type;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal length
        {
            get
            {
                if (this._length.HasValue)
                {
                    return this._length.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._length = value;
                _shouldSerializelength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lengthSpecified
        {
            get
            {
                return this._length.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._length = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrackCondition));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether length should be serialized
        /// </summary>
        public virtual bool ShouldSerializelength()
        {
            if (_shouldSerializelength)
            {
                return true;
            }
            return (_length != default(decimal));
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrackCondition object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrackCondition object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrackCondition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrackCondition obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackCondition);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrackCondition obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrackCondition Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrackCondition)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrackCondition Deserialize(System.IO.Stream s)
        {
            return ((tTrackCondition)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrackCondition object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrackCondition object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrackCondition object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrackCondition obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackCondition);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrackCondition obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrackCondition LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLevelCrossing : tDelimitedOrientedElement
    {

        private bool _shouldSerializeangle;

        private bool _shouldSerializelength;

        private decimal _length;

        private decimal _angle;

        private string _protection;

        private string _ocpStationRef;

        private string _controllerRef;

        private static XmlSerializer serializer;

        public tLevelCrossing()
        {
            this._length = ((decimal)(0.000m));
            this._angle = ((decimal)(90m));
            this._protection = "none";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(decimal), "0.000")]
        public decimal length
        {
            get
            {
                return this._length;
            }
            set
            {
                this._length = value;
                _shouldSerializelength = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(decimal), "90")]
        public decimal angle
        {
            get
            {
                return this._angle;
            }
            set
            {
                this._angle = value;
                _shouldSerializeangle = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("none")]
        public string protection
        {
            get
            {
                return this._protection;
            }
            set
            {
                this._protection = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpStationRef
        {
            get
            {
                return this._ocpStationRef;
            }
            set
            {
                this._ocpStationRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string controllerRef
        {
            get
            {
                return this._controllerRef;
            }
            set
            {
                this._controllerRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLevelCrossing));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether length should be serialized
        /// </summary>
        public virtual bool ShouldSerializelength()
        {
            if (_shouldSerializelength)
            {
                return true;
            }
            return (_length != default(decimal));
        }

        /// <summary>
        /// Test whether angle should be serialized
        /// </summary>
        public virtual bool ShouldSerializeangle()
        {
            if (_shouldSerializeangle)
            {
                return true;
            }
            return (_angle != default(decimal));
        }

        /// <summary>
        /// Test whether protection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprotection()
        {
            return !string.IsNullOrEmpty(protection);
        }

        /// <summary>
        /// Test whether ocpStationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpStationRef()
        {
            return !string.IsNullOrEmpty(ocpStationRef);
        }

        /// <summary>
        /// Test whether controllerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrollerRef()
        {
            return !string.IsNullOrEmpty(controllerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLevelCrossing object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLevelCrossing object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLevelCrossing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLevelCrossing obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLevelCrossing);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLevelCrossing obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tLevelCrossing Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLevelCrossing)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLevelCrossing Deserialize(System.IO.Stream s)
        {
            return ((tLevelCrossing)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLevelCrossing object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLevelCrossing object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLevelCrossing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLevelCrossing obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLevelCrossing);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLevelCrossing obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tLevelCrossing LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBorder : tDelimitedOrientedElement
    {

        private string _type;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBorder));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBorder object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBorder object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBorder object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBorder obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBorder);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBorder obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBorder Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBorder)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBorder Deserialize(System.IO.Stream s)
        {
            return ((tBorder)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBorder object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBorder object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBorder object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBorder obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBorder);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBorder obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBorder LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tBalise))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTrainProtectionElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRuleCodeElement))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDerailer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStopPost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOrientedElement : tPlacedElement
    {

        private bool _shouldSerializedir;

        private System.Nullable<tLaxDirection> _dir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tLaxDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tLaxDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOrientedElement));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tLaxDirection));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOrientedElement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOrientedElement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOrientedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOrientedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOrientedElement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOrientedElement obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOrientedElement Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOrientedElement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOrientedElement Deserialize(System.IO.Stream s)
        {
            return ((tOrientedElement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOrientedElement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOrientedElement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOrientedElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOrientedElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOrientedElement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOrientedElement obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOrientedElement LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBalise : tOrientedElement
    {

        private bool _shouldSerializelinkReactionDescending;

        private bool _shouldSerializelinkReactionAscending;

        private string _countryID;

        private string _groupID;

        private string _linkingAccuracy;

        private System.Nullable<tBaliseLinkReaction> _linkReactionAscending;

        private System.Nullable<tBaliseLinkReaction> _linkReactionDescending;

        private string _staticTelegram;

        private string _ndx;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string countryID
        {
            get
            {
                return this._countryID;
            }
            set
            {
                this._countryID = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string groupID
        {
            get
            {
                return this._groupID;
            }
            set
            {
                this._groupID = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string linkingAccuracy
        {
            get
            {
                return this._linkingAccuracy;
            }
            set
            {
                this._linkingAccuracy = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tBaliseLinkReaction linkReactionAscending
        {
            get
            {
                if (this._linkReactionAscending.HasValue)
                {
                    return this._linkReactionAscending.Value;
                }
                else
                {
                    return default(tBaliseLinkReaction);
                }
            }
            set
            {
                this._linkReactionAscending = value;
                _shouldSerializelinkReactionAscending = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool linkReactionAscendingSpecified
        {
            get
            {
                return this._linkReactionAscending.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._linkReactionAscending = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tBaliseLinkReaction linkReactionDescending
        {
            get
            {
                if (this._linkReactionDescending.HasValue)
                {
                    return this._linkReactionDescending.Value;
                }
                else
                {
                    return default(tBaliseLinkReaction);
                }
            }
            set
            {
                this._linkReactionDescending = value;
                _shouldSerializelinkReactionDescending = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool linkReactionDescendingSpecified
        {
            get
            {
                return this._linkReactionDescending.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._linkReactionDescending = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string staticTelegram
        {
            get
            {
                return this._staticTelegram;
            }
            set
            {
                this._staticTelegram = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string ndx
        {
            get
            {
                return this._ndx;
            }
            set
            {
                this._ndx = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBalise));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether linkReactionAscending should be serialized
        /// </summary>
        public virtual bool ShouldSerializelinkReactionAscending()
        {
            if (_shouldSerializelinkReactionAscending)
            {
                return true;
            }
            return (_linkReactionAscending != default(tBaliseLinkReaction));
        }

        /// <summary>
        /// Test whether linkReactionDescending should be serialized
        /// </summary>
        public virtual bool ShouldSerializelinkReactionDescending()
        {
            if (_shouldSerializelinkReactionDescending)
            {
                return true;
            }
            return (_linkReactionDescending != default(tBaliseLinkReaction));
        }

        /// <summary>
        /// Test whether countryID should be serialized
        /// </summary>
        public virtual bool ShouldSerializecountryID()
        {
            return !string.IsNullOrEmpty(countryID);
        }

        /// <summary>
        /// Test whether groupID should be serialized
        /// </summary>
        public virtual bool ShouldSerializegroupID()
        {
            return !string.IsNullOrEmpty(groupID);
        }

        /// <summary>
        /// Test whether linkingAccuracy should be serialized
        /// </summary>
        public virtual bool ShouldSerializelinkingAccuracy()
        {
            return !string.IsNullOrEmpty(linkingAccuracy);
        }

        /// <summary>
        /// Test whether staticTelegram should be serialized
        /// </summary>
        public virtual bool ShouldSerializestaticTelegram()
        {
            return !string.IsNullOrEmpty(staticTelegram);
        }

        /// <summary>
        /// Test whether ndx should be serialized
        /// </summary>
        public virtual bool ShouldSerializendx()
        {
            return !string.IsNullOrEmpty(ndx);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBalise object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBalise object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBalise object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBalise obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBalise);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBalise obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBalise Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBalise)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBalise Deserialize(System.IO.Stream s)
        {
            return ((tBalise)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBalise object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBalise object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBalise object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBalise obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBalise);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBalise obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBalise LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tBaliseLinkReaction
    {

        /// <remarks/>
        trainTrip,

        /// <remarks/>
        applyServiceBrake,

        /// <remarks/>
        noReaction,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainProtectionElement : tOrientedElement
    {

        private bool _shouldSerializemedium;

        private System.Nullable<tTrainProtectionMedium> _medium;

        private string _system;

        private string _trainProtectionSystem;

        private string _model;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTrainProtectionMedium medium
        {
            get
            {
                if (this._medium.HasValue)
                {
                    return this._medium.Value;
                }
                else
                {
                    return default(tTrainProtectionMedium);
                }
            }
            set
            {
                this._medium = value;
                _shouldSerializemedium = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mediumSpecified
        {
            get
            {
                return this._medium.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._medium = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string system
        {
            get
            {
                return this._system;
            }
            set
            {
                this._system = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainProtectionSystem
        {
            get
            {
                return this._trainProtectionSystem;
            }
            set
            {
                this._trainProtectionSystem = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string model
        {
            get
            {
                return this._model;
            }
            set
            {
                this._model = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainProtectionElement));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether medium should be serialized
        /// </summary>
        public virtual bool ShouldSerializemedium()
        {
            if (_shouldSerializemedium)
            {
                return true;
            }
            return (_medium != default(tTrainProtectionMedium));
        }

        /// <summary>
        /// Test whether system should be serialized
        /// </summary>
        public virtual bool ShouldSerializesystem()
        {
            return !string.IsNullOrEmpty(system);
        }

        /// <summary>
        /// Test whether trainProtectionSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionSystem()
        {
            return !string.IsNullOrEmpty(trainProtectionSystem);
        }

        /// <summary>
        /// Test whether model should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodel()
        {
            return !string.IsNullOrEmpty(model);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainProtectionElement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainProtectionElement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainProtectionElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainProtectionElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainProtectionElement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainProtectionElement obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrainProtectionElement Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainProtectionElement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainProtectionElement Deserialize(System.IO.Stream s)
        {
            return ((tTrainProtectionElement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainProtectionElement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainProtectionElement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainProtectionElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainProtectionElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainProtectionElement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainProtectionElement obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrainProtectionElement LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tDerailer))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tStopPost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignal))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tRuleCodeElement : tOrientedElement
    {

        private string _ruleCode;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ruleCode
        {
            get
            {
                return this._ruleCode;
            }
            set
            {
                this._ruleCode = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tRuleCodeElement));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ruleCode should be serialized
        /// </summary>
        public virtual bool ShouldSerializeruleCode()
        {
            return !string.IsNullOrEmpty(ruleCode);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tRuleCodeElement object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tRuleCodeElement object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tRuleCodeElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tRuleCodeElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRuleCodeElement);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tRuleCodeElement obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tRuleCodeElement Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tRuleCodeElement)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tRuleCodeElement Deserialize(System.IO.Stream s)
        {
            return ((tRuleCodeElement)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tRuleCodeElement object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tRuleCodeElement object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tRuleCodeElement object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tRuleCodeElement obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRuleCodeElement);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tRuleCodeElement obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tRuleCodeElement LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tDerailer : tRuleCodeElement
    {

        private bool _shouldSerializekind;

        private bool _shouldSerializederailSide;

        private System.Nullable<tSide> _derailSide;

        private System.Nullable<tDerailKind> _kind;

        private string _model;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tSide derailSide
        {
            get
            {
                if (this._derailSide.HasValue)
                {
                    return this._derailSide.Value;
                }
                else
                {
                    return default(tSide);
                }
            }
            set
            {
                this._derailSide = value;
                _shouldSerializederailSide = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool derailSideSpecified
        {
            get
            {
                return this._derailSide.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._derailSide = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tDerailKind kind
        {
            get
            {
                if (this._kind.HasValue)
                {
                    return this._kind.Value;
                }
                else
                {
                    return default(tDerailKind);
                }
            }
            set
            {
                this._kind = value;
                _shouldSerializekind = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool kindSpecified
        {
            get
            {
                return this._kind.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._kind = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string model
        {
            get
            {
                return this._model;
            }
            set
            {
                this._model = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tDerailer));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether derailSide should be serialized
        /// </summary>
        public virtual bool ShouldSerializederailSide()
        {
            if (_shouldSerializederailSide)
            {
                return true;
            }
            return (_derailSide != default(tSide));
        }

        /// <summary>
        /// Test whether kind should be serialized
        /// </summary>
        public virtual bool ShouldSerializekind()
        {
            if (_shouldSerializekind)
            {
                return true;
            }
            return (_kind != default(tDerailKind));
        }

        /// <summary>
        /// Test whether model should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodel()
        {
            return !string.IsNullOrEmpty(model);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tDerailer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tDerailer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tDerailer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tDerailer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDerailer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tDerailer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tDerailer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tDerailer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tDerailer Deserialize(System.IO.Stream s)
        {
            return ((tDerailer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tDerailer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tDerailer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tDerailer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tDerailer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tDerailer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tDerailer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tDerailer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tDerailKind
    {

        /// <remarks/>
        blockDerail,

        /// <remarks/>
        singleCatchPoints,

        /// <remarks/>
        doubleCatchPoints,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tStopPost : tRuleCodeElement
    {

        private bool _shouldSerializevirtual;

        private bool _shouldSerializetrainLength;

        private List<tValidForMovements> _validForMovements;

        private List<tElementWithReference> _signalRef;

        private string _trainRelation;

        private string _platformEdgeRef;

        private System.Nullable<decimal> _trainLength;

        private string _axleCount;

        private string _wagonCount;

        private string _verbalConstraints;

        private System.Nullable<bool> _virtual;

        private string _ocpRef;

        private List<System.Xml.XmlAttribute> _anyAttr1;

        private static XmlSerializer serializer;

        public tStopPost()
        {
            this._anyAttr1 = new List<System.Xml.XmlAttribute>();
            this._signalRef = new List<tElementWithReference>();
            this._validForMovements = new List<tValidForMovements>();
        }

        [System.Xml.Serialization.XmlElementAttribute("validForMovements")]
        public List<tValidForMovements> validForMovements
        {
            get
            {
                return this._validForMovements;
            }
            set
            {
                this._validForMovements = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("signalRef")]
        public List<tElementWithReference> signalRef
        {
            get
            {
                return this._signalRef;
            }
            set
            {
                this._signalRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainRelation
        {
            get
            {
                return this._trainRelation;
            }
            set
            {
                this._trainRelation = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string platformEdgeRef
        {
            get
            {
                return this._platformEdgeRef;
            }
            set
            {
                this._platformEdgeRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal trainLength
        {
            get
            {
                if (this._trainLength.HasValue)
                {
                    return this._trainLength.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._trainLength = value;
                _shouldSerializetrainLength = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trainLengthSpecified
        {
            get
            {
                return this._trainLength.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trainLength = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string axleCount
        {
            get
            {
                return this._axleCount;
            }
            set
            {
                this._axleCount = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "positiveInteger")]
        public string wagonCount
        {
            get
            {
                return this._wagonCount;
            }
            set
            {
                this._wagonCount = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string verbalConstraints
        {
            get
            {
                return this._verbalConstraints;
            }
            set
            {
                this._verbalConstraints = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool @virtual
        {
            get
            {
                if (this._virtual.HasValue)
                {
                    return this._virtual.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._virtual = value;
                _shouldSerializevirtual = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool virtualSpecified
        {
            get
            {
                return this._virtual.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._virtual = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpRef
        {
            get
            {
                return this._ocpRef;
            }
            set
            {
                this._ocpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr1
        {
            get
            {
                return this._anyAttr1;
            }
            set
            {
                this._anyAttr1 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tStopPost));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether validForMovements should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalidForMovements()
        {
            return validForMovements != null && validForMovements.Count > 0;
        }

        /// <summary>
        /// Test whether signalRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializesignalRef()
        {
            return signalRef != null && signalRef.Count > 0;
        }

        /// <summary>
        /// Test whether AnyAttr1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr1()
        {
            return AnyAttr1 != null && AnyAttr1.Count > 0;
        }

        /// <summary>
        /// Test whether trainLength should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainLength()
        {
            if (_shouldSerializetrainLength)
            {
                return true;
            }
            return (_trainLength != default(decimal));
        }

        /// <summary>
        /// Test whether virtual should be serialized
        /// </summary>
        public virtual bool ShouldSerializevirtual()
        {
            if (_shouldSerializevirtual)
            {
                return true;
            }
            return (_virtual != default(bool));
        }

        /// <summary>
        /// Test whether trainRelation should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainRelation()
        {
            return !string.IsNullOrEmpty(trainRelation);
        }

        /// <summary>
        /// Test whether platformEdgeRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeplatformEdgeRef()
        {
            return !string.IsNullOrEmpty(platformEdgeRef);
        }

        /// <summary>
        /// Test whether axleCount should be serialized
        /// </summary>
        public virtual bool ShouldSerializeaxleCount()
        {
            return !string.IsNullOrEmpty(axleCount);
        }

        /// <summary>
        /// Test whether wagonCount should be serialized
        /// </summary>
        public virtual bool ShouldSerializewagonCount()
        {
            return !string.IsNullOrEmpty(wagonCount);
        }

        /// <summary>
        /// Test whether verbalConstraints should be serialized
        /// </summary>
        public virtual bool ShouldSerializeverbalConstraints()
        {
            return !string.IsNullOrEmpty(verbalConstraints);
        }

        /// <summary>
        /// Test whether ocpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpRef()
        {
            return !string.IsNullOrEmpty(ocpRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tStopPost object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tStopPost object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tStopPost object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tStopPost obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStopPost);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tStopPost obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tStopPost Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tStopPost)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tStopPost Deserialize(System.IO.Stream s)
        {
            return ((tStopPost)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tStopPost object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tStopPost object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tStopPost object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tStopPost obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tStopPost);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tStopPost obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tStopPost LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tValidForMovements : ParentContainer
    {

        private string _kind;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                this._kind = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tValidForMovements));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether kind should be serialized
        /// </summary>
        public virtual bool ShouldSerializekind()
        {
            return !string.IsNullOrEmpty(kind);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tValidForMovements object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tValidForMovements object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tValidForMovements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tValidForMovements obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValidForMovements);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tValidForMovements obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tValidForMovements Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tValidForMovements)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tValidForMovements Deserialize(System.IO.Stream s)
        {
            return ((tValidForMovements)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tValidForMovements object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tValidForMovements object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tValidForMovements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tValidForMovements obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tValidForMovements);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tValidForMovements obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tValidForMovements LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignal : tRuleCodeElement
    {

        private bool _shouldSerializeheight;

        private bool _shouldSerializetrackDist;

        private bool _shouldSerializedistNearestDangerPoint;

        private bool _shouldSerializevirtual;

        private bool _shouldSerializemaskableATC;

        private bool _shouldSerializemaskableRoute;

        private bool _shouldSerializeswitchable;

        private bool _shouldSerializesight;

        private tSignalSpeed _speed;

        private tSignalEtcs _etcs;

        private tSignalLevelCrossing _levelCrossing;

        private tSignalTrainRadio _trainRadio;

        private tSignalCatenary _catenary;

        private tSignalLine _line;

        private tSignalMilepost _milepost;

        private tSignalBraking _braking;

        private List<tElementWithReference> _trainProtectionElementGroupRef;

        private List<tElementWithReference> _baliseGroupRef;

        private System.Nullable<decimal> _sight;

        private string _type;

        private string _function;

        private string _sigSystem;

        private System.Nullable<bool> _switchable;

        private System.Nullable<bool> _maskableRoute;

        private System.Nullable<bool> _maskableATC;

        private bool _virtual;

        private string _signalBoxOcpRef;

        private string _stationOcpRef;

        private System.Nullable<decimal> _distNearestDangerPoint;

        private System.Nullable<decimal> _trackDist;

        private System.Nullable<decimal> _height;

        private string _ocpStationRef;

        private string _controllerRef;

        private static XmlSerializer serializer;

        public tSignal()
        {
            this._baliseGroupRef = new List<tElementWithReference>();
            this._trainProtectionElementGroupRef = new List<tElementWithReference>();
            this._braking = new tSignalBraking();
            this._milepost = new tSignalMilepost();
            this._line = new tSignalLine();
            this._catenary = new tSignalCatenary();
            this._trainRadio = new tSignalTrainRadio();
            this._levelCrossing = new tSignalLevelCrossing();
            this._etcs = new tSignalEtcs();
            this._speed = new tSignalSpeed();
            this._virtual = false;
        }

        public tSignalSpeed speed
        {
            get
            {
                return this._speed;
            }
            set
            {
                this._speed = value;
            }
        }

        public tSignalEtcs etcs
        {
            get
            {
                return this._etcs;
            }
            set
            {
                this._etcs = value;
            }
        }

        public tSignalLevelCrossing levelCrossing
        {
            get
            {
                return this._levelCrossing;
            }
            set
            {
                this._levelCrossing = value;
            }
        }

        public tSignalTrainRadio trainRadio
        {
            get
            {
                return this._trainRadio;
            }
            set
            {
                this._trainRadio = value;
            }
        }

        public tSignalCatenary catenary
        {
            get
            {
                return this._catenary;
            }
            set
            {
                this._catenary = value;
            }
        }

        public tSignalLine line
        {
            get
            {
                return this._line;
            }
            set
            {
                this._line = value;
            }
        }

        public tSignalMilepost milepost
        {
            get
            {
                return this._milepost;
            }
            set
            {
                this._milepost = value;
            }
        }

        public tSignalBraking braking
        {
            get
            {
                return this._braking;
            }
            set
            {
                this._braking = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("trainProtectionElementGroupRef")]
        public List<tElementWithReference> trainProtectionElementGroupRef
        {
            get
            {
                return this._trainProtectionElementGroupRef;
            }
            set
            {
                this._trainProtectionElementGroupRef = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("baliseGroupRef")]
        public List<tElementWithReference> baliseGroupRef
        {
            get
            {
                return this._baliseGroupRef;
            }
            set
            {
                this._baliseGroupRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal sight
        {
            get
            {
                if (this._sight.HasValue)
                {
                    return this._sight.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._sight = value;
                _shouldSerializesight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sightSpecified
        {
            get
            {
                return this._sight.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._sight = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string function
        {
            get
            {
                return this._function;
            }
            set
            {
                this._function = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string sigSystem
        {
            get
            {
                return this._sigSystem;
            }
            set
            {
                this._sigSystem = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool switchable
        {
            get
            {
                if (this._switchable.HasValue)
                {
                    return this._switchable.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._switchable = value;
                _shouldSerializeswitchable = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool switchableSpecified
        {
            get
            {
                return this._switchable.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._switchable = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool maskableRoute
        {
            get
            {
                if (this._maskableRoute.HasValue)
                {
                    return this._maskableRoute.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._maskableRoute = value;
                _shouldSerializemaskableRoute = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maskableRouteSpecified
        {
            get
            {
                return this._maskableRoute.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maskableRoute = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool maskableATC
        {
            get
            {
                if (this._maskableATC.HasValue)
                {
                    return this._maskableATC.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._maskableATC = value;
                _shouldSerializemaskableATC = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maskableATCSpecified
        {
            get
            {
                return this._maskableATC.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maskableATC = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(false)]
        public bool @virtual
        {
            get
            {
                return this._virtual;
            }
            set
            {
                this._virtual = value;
                _shouldSerializevirtual = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string signalBoxOcpRef
        {
            get
            {
                return this._signalBoxOcpRef;
            }
            set
            {
                this._signalBoxOcpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string stationOcpRef
        {
            get
            {
                return this._stationOcpRef;
            }
            set
            {
                this._stationOcpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal distNearestDangerPoint
        {
            get
            {
                if (this._distNearestDangerPoint.HasValue)
                {
                    return this._distNearestDangerPoint.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._distNearestDangerPoint = value;
                _shouldSerializedistNearestDangerPoint = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool distNearestDangerPointSpecified
        {
            get
            {
                return this._distNearestDangerPoint.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._distNearestDangerPoint = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal trackDist
        {
            get
            {
                if (this._trackDist.HasValue)
                {
                    return this._trackDist.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._trackDist = value;
                _shouldSerializetrackDist = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool trackDistSpecified
        {
            get
            {
                return this._trackDist.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._trackDist = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal height
        {
            get
            {
                if (this._height.HasValue)
                {
                    return this._height.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._height = value;
                _shouldSerializeheight = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool heightSpecified
        {
            get
            {
                return this._height.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._height = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpStationRef
        {
            get
            {
                return this._ocpStationRef;
            }
            set
            {
                this._ocpStationRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string controllerRef
        {
            get
            {
                return this._controllerRef;
            }
            set
            {
                this._controllerRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignal));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainProtectionElementGroupRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionElementGroupRef()
        {
            return trainProtectionElementGroupRef != null && trainProtectionElementGroupRef.Count > 0;
        }

        /// <summary>
        /// Test whether baliseGroupRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializebaliseGroupRef()
        {
            return baliseGroupRef != null && baliseGroupRef.Count > 0;
        }

        /// <summary>
        /// Test whether sight should be serialized
        /// </summary>
        public virtual bool ShouldSerializesight()
        {
            if (_shouldSerializesight)
            {
                return true;
            }
            return (_sight != default(decimal));
        }

        /// <summary>
        /// Test whether switchable should be serialized
        /// </summary>
        public virtual bool ShouldSerializeswitchable()
        {
            if (_shouldSerializeswitchable)
            {
                return true;
            }
            return (_switchable != default(bool));
        }

        /// <summary>
        /// Test whether maskableRoute should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaskableRoute()
        {
            if (_shouldSerializemaskableRoute)
            {
                return true;
            }
            return (_maskableRoute != default(bool));
        }

        /// <summary>
        /// Test whether maskableATC should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaskableATC()
        {
            if (_shouldSerializemaskableATC)
            {
                return true;
            }
            return (_maskableATC != default(bool));
        }

        /// <summary>
        /// Test whether virtual should be serialized
        /// </summary>
        public virtual bool ShouldSerializevirtual()
        {
            if (_shouldSerializevirtual)
            {
                return true;
            }
            return (_virtual != default(bool));
        }

        /// <summary>
        /// Test whether distNearestDangerPoint should be serialized
        /// </summary>
        public virtual bool ShouldSerializedistNearestDangerPoint()
        {
            if (_shouldSerializedistNearestDangerPoint)
            {
                return true;
            }
            return (_distNearestDangerPoint != default(decimal));
        }

        /// <summary>
        /// Test whether trackDist should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackDist()
        {
            if (_shouldSerializetrackDist)
            {
                return true;
            }
            return (_trackDist != default(decimal));
        }

        /// <summary>
        /// Test whether height should be serialized
        /// </summary>
        public virtual bool ShouldSerializeheight()
        {
            if (_shouldSerializeheight)
            {
                return true;
            }
            return (_height != default(decimal));
        }

        /// <summary>
        /// Test whether speed should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeed()
        {
            return (_speed != null);
        }

        /// <summary>
        /// Test whether etcs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeetcs()
        {
            return (_etcs != null);
        }

        /// <summary>
        /// Test whether levelCrossing should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevelCrossing()
        {
            return (_levelCrossing != null);
        }

        /// <summary>
        /// Test whether trainRadio should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainRadio()
        {
            return (_trainRadio != null);
        }

        /// <summary>
        /// Test whether catenary should be serialized
        /// </summary>
        public virtual bool ShouldSerializecatenary()
        {
            return (_catenary != null);
        }

        /// <summary>
        /// Test whether line should be serialized
        /// </summary>
        public virtual bool ShouldSerializeline()
        {
            return (_line != null);
        }

        /// <summary>
        /// Test whether milepost should be serialized
        /// </summary>
        public virtual bool ShouldSerializemilepost()
        {
            return (_milepost != null);
        }

        /// <summary>
        /// Test whether braking should be serialized
        /// </summary>
        public virtual bool ShouldSerializebraking()
        {
            return (_braking != null);
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether function should be serialized
        /// </summary>
        public virtual bool ShouldSerializefunction()
        {
            return !string.IsNullOrEmpty(function);
        }

        /// <summary>
        /// Test whether sigSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializesigSystem()
        {
            return !string.IsNullOrEmpty(sigSystem);
        }

        /// <summary>
        /// Test whether signalBoxOcpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializesignalBoxOcpRef()
        {
            return !string.IsNullOrEmpty(signalBoxOcpRef);
        }

        /// <summary>
        /// Test whether stationOcpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializestationOcpRef()
        {
            return !string.IsNullOrEmpty(stationOcpRef);
        }

        /// <summary>
        /// Test whether ocpStationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpStationRef()
        {
            return !string.IsNullOrEmpty(ocpStationRef);
        }

        /// <summary>
        /// Test whether controllerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrollerRef()
        {
            return !string.IsNullOrEmpty(controllerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignal object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignal object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignal);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignal obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignal Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignal)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignal Deserialize(System.IO.Stream s)
        {
            return ((tSignal)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignal object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignal object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignal object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignal obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignal);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignal obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignal LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalSpeed : tSignalBase
    {

        private List<tElementWithReference> _speedChangeRef;

        private string _kind;

        private string _trainRelation;

        private static XmlSerializer serializer;

        public tSignalSpeed()
        {
            this._speedChangeRef = new List<tElementWithReference>();
        }

        [System.Xml.Serialization.XmlElementAttribute("speedChangeRef")]
        public List<tElementWithReference> speedChangeRef
        {
            get
            {
                return this._speedChangeRef;
            }
            set
            {
                this._speedChangeRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string kind
        {
            get
            {
                return this._kind;
            }
            set
            {
                this._kind = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainRelation
        {
            get
            {
                return this._trainRelation;
            }
            set
            {
                this._trainRelation = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalSpeed));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether speedChangeRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeedChangeRef()
        {
            return speedChangeRef != null && speedChangeRef.Count > 0;
        }

        /// <summary>
        /// Test whether kind should be serialized
        /// </summary>
        public virtual bool ShouldSerializekind()
        {
            return !string.IsNullOrEmpty(kind);
        }

        /// <summary>
        /// Test whether trainRelation should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainRelation()
        {
            return !string.IsNullOrEmpty(trainRelation);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalSpeed object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalSpeed object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalSpeed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalSpeed obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalSpeed);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalSpeed obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalSpeed Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalSpeed)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalSpeed Deserialize(System.IO.Stream s)
        {
            return ((tSignalSpeed)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalSpeed object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalSpeed object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalSpeed object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalSpeed obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalSpeed);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalSpeed obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalSpeed LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalBraking))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalMilepost))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalLine))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalCatenary))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalTrainRadio))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalLevelCrossing))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalEtcs))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tSignalSpeed))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalBase : ParentContainer
    {

        private bool _shouldSerializeswitchable;

        private System.Nullable<bool> _switchable;

        private List<System.Xml.XmlAttribute> _anyAttr;

        private static XmlSerializer serializer;

        public tSignalBase()
        {
            this._anyAttr = new List<System.Xml.XmlAttribute>();
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool switchable
        {
            get
            {
                if (this._switchable.HasValue)
                {
                    return this._switchable.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._switchable = value;
                _shouldSerializeswitchable = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool switchableSpecified
        {
            get
            {
                return this._switchable.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._switchable = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public List<System.Xml.XmlAttribute> AnyAttr
        {
            get
            {
                return this._anyAttr;
            }
            set
            {
                this._anyAttr = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalBase));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether AnyAttr should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAnyAttr()
        {
            return AnyAttr != null && AnyAttr.Count > 0;
        }

        /// <summary>
        /// Test whether switchable should be serialized
        /// </summary>
        public virtual bool ShouldSerializeswitchable()
        {
            if (_shouldSerializeswitchable)
            {
                return true;
            }
            return (_switchable != default(bool));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalBase object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalBase object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalBase obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalBase);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalBase obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tSignalBase Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalBase)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalBase Deserialize(System.IO.Stream s)
        {
            return ((tSignalBase)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalBase object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalBase object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalBase object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalBase obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalBase);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalBase obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tSignalBase LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalBraking : tSignalBase
    {

        private string _trackConditionRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string trackConditionRef
        {
            get
            {
                return this._trackConditionRef;
            }
            set
            {
                this._trackConditionRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalBraking));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackConditionRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackConditionRef()
        {
            return !string.IsNullOrEmpty(trackConditionRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalBraking object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalBraking object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalBraking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalBraking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalBraking);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalBraking obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalBraking Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalBraking)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalBraking Deserialize(System.IO.Stream s)
        {
            return ((tSignalBraking)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalBraking object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalBraking object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalBraking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalBraking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalBraking);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalBraking obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalBraking LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalMilepost : tSignalBase
    {

        private bool _shouldSerializeshownValue;

        private System.Nullable<decimal> _shownValue;

        private string _shownRemark;

        private string _mileageChangeRef;

        private string _lineRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal shownValue
        {
            get
            {
                if (this._shownValue.HasValue)
                {
                    return this._shownValue.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._shownValue = value;
                _shouldSerializeshownValue = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shownValueSpecified
        {
            get
            {
                return this._shownValue.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._shownValue = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string shownRemark
        {
            get
            {
                return this._shownRemark;
            }
            set
            {
                this._shownRemark = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string mileageChangeRef
        {
            get
            {
                return this._mileageChangeRef;
            }
            set
            {
                this._mileageChangeRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string lineRef
        {
            get
            {
                return this._lineRef;
            }
            set
            {
                this._lineRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalMilepost));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether shownValue should be serialized
        /// </summary>
        public virtual bool ShouldSerializeshownValue()
        {
            if (_shouldSerializeshownValue)
            {
                return true;
            }
            return (_shownValue != default(decimal));
        }

        /// <summary>
        /// Test whether shownRemark should be serialized
        /// </summary>
        public virtual bool ShouldSerializeshownRemark()
        {
            return !string.IsNullOrEmpty(shownRemark);
        }

        /// <summary>
        /// Test whether mileageChangeRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializemileageChangeRef()
        {
            return !string.IsNullOrEmpty(mileageChangeRef);
        }

        /// <summary>
        /// Test whether lineRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializelineRef()
        {
            return !string.IsNullOrEmpty(lineRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalMilepost object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalMilepost object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalMilepost object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalMilepost obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalMilepost);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalMilepost obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalMilepost Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalMilepost)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalMilepost Deserialize(System.IO.Stream s)
        {
            return ((tSignalMilepost)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalMilepost object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalMilepost object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalMilepost object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalMilepost obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalMilepost);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalMilepost obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalMilepost LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalLine : tSignalBase
    {

        private string _ref;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string @ref
        {
            get
            {
                return this._ref;
            }
            set
            {
                this._ref = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalLine));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ref should be serialized
        /// </summary>
        public virtual bool ShouldSerializeref()
        {
            return !string.IsNullOrEmpty(@ref);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalLine object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalLine object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalLine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalLine);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalLine obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalLine Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalLine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalLine Deserialize(System.IO.Stream s)
        {
            return ((tSignalLine)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalLine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalLine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalLine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalLine);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalLine obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalLine LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalCatenary : tSignalBase
    {

        private string _trackConditionRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string trackConditionRef
        {
            get
            {
                return this._trackConditionRef;
            }
            set
            {
                this._trackConditionRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalCatenary));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackConditionRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackConditionRef()
        {
            return !string.IsNullOrEmpty(trackConditionRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalCatenary object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalCatenary object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalCatenary object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalCatenary obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalCatenary);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalCatenary obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalCatenary Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalCatenary)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalCatenary Deserialize(System.IO.Stream s)
        {
            return ((tSignalCatenary)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalCatenary object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalCatenary object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalCatenary object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalCatenary obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalCatenary);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalCatenary obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalCatenary LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalTrainRadio : tSignalBase
    {

        private string _trackConditionRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string trackConditionRef
        {
            get
            {
                return this._trackConditionRef;
            }
            set
            {
                this._trackConditionRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalTrainRadio));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackConditionRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackConditionRef()
        {
            return !string.IsNullOrEmpty(trackConditionRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalTrainRadio object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalTrainRadio object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalTrainRadio object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalTrainRadio obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalTrainRadio);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalTrainRadio obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalTrainRadio Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalTrainRadio)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalTrainRadio Deserialize(System.IO.Stream s)
        {
            return ((tSignalTrainRadio)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalTrainRadio object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalTrainRadio object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalTrainRadio object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalTrainRadio obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalTrainRadio);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalTrainRadio obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalTrainRadio LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalLevelCrossing : tSignalBase
    {

        private string _type;

        private string _ref;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string @ref
        {
            get
            {
                return this._ref;
            }
            set
            {
                this._ref = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalLevelCrossing));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether ref should be serialized
        /// </summary>
        public virtual bool ShouldSerializeref()
        {
            return !string.IsNullOrEmpty(@ref);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalLevelCrossing object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalLevelCrossing object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalLevelCrossing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalLevelCrossing obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalLevelCrossing);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalLevelCrossing obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalLevelCrossing Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalLevelCrossing)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalLevelCrossing Deserialize(System.IO.Stream s)
        {
            return ((tSignalLevelCrossing)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalLevelCrossing object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalLevelCrossing object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalLevelCrossing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalLevelCrossing obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalLevelCrossing);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalLevelCrossing obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalLevelCrossing LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSignalEtcs : tSignalBase
    {

        private bool _shouldSerializelevel_3;

        private bool _shouldSerializelevel_2;

        private bool _shouldSerializelevel_1;

        private bool _shouldSerializelevel_0;

        private string _srsVersion;

        private System.Nullable<bool> _level_0;

        private System.Nullable<bool> _level_1;

        private System.Nullable<bool> _level_2;

        private System.Nullable<bool> _level_3;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string srsVersion
        {
            get
            {
                return this._srsVersion;
            }
            set
            {
                this._srsVersion = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_0
        {
            get
            {
                if (this._level_0.HasValue)
                {
                    return this._level_0.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_0 = value;
                _shouldSerializelevel_0 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_0Specified
        {
            get
            {
                return this._level_0.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_0 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_1
        {
            get
            {
                if (this._level_1.HasValue)
                {
                    return this._level_1.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_1 = value;
                _shouldSerializelevel_1 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_1Specified
        {
            get
            {
                return this._level_1.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_1 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_2
        {
            get
            {
                if (this._level_2.HasValue)
                {
                    return this._level_2.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_2 = value;
                _shouldSerializelevel_2 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_2Specified
        {
            get
            {
                return this._level_2.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_2 = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool level_3
        {
            get
            {
                if (this._level_3.HasValue)
                {
                    return this._level_3.Value;
                }
                else
                {
                    return default(bool);
                }
            }
            set
            {
                this._level_3 = value;
                _shouldSerializelevel_3 = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool level_3Specified
        {
            get
            {
                return this._level_3.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._level_3 = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSignalEtcs));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether level_0 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_0()
        {
            if (_shouldSerializelevel_0)
            {
                return true;
            }
            return (_level_0 != default(bool));
        }

        /// <summary>
        /// Test whether level_1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_1()
        {
            if (_shouldSerializelevel_1)
            {
                return true;
            }
            return (_level_1 != default(bool));
        }

        /// <summary>
        /// Test whether level_2 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_2()
        {
            if (_shouldSerializelevel_2)
            {
                return true;
            }
            return (_level_2 != default(bool));
        }

        /// <summary>
        /// Test whether level_3 should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevel_3()
        {
            if (_shouldSerializelevel_3)
            {
                return true;
            }
            return (_level_3 != default(bool));
        }

        /// <summary>
        /// Test whether srsVersion should be serialized
        /// </summary>
        public virtual bool ShouldSerializesrsVersion()
        {
            return !string.IsNullOrEmpty(srsVersion);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSignalEtcs object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSignalEtcs object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSignalEtcs object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSignalEtcs obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalEtcs);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSignalEtcs obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSignalEtcs Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSignalEtcs)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSignalEtcs Deserialize(System.IO.Stream s)
        {
            return ((tSignalEtcs)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSignalEtcs object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSignalEtcs object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSignalEtcs object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSignalEtcs obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSignalEtcs);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSignalEtcs obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSignalEtcs LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tMileageChange : tElementWithIDAndName
    {

        private bool _shouldSerializedir;

        private bool _shouldSerializeabsDir;

        private bool _shouldSerializepos;

        private bool _shouldSerializeabsPos;

        private bool _shouldSerializetype;

        private bool _shouldSerializeabsPosInOffset;

        private bool _shouldSerializeabsPosIn;

        private tGeoCoord _geoCoord;

        private decimal _absPosIn;

        private System.Nullable<decimal> _absPosInOffset;

        private tMileageChangeDescr _type;

        private decimal _absPos;

        private decimal _pos;

        private System.Nullable<tMileageDirection> _absDir;

        private System.Nullable<tStrictDirection> _dir;

        private static XmlSerializer serializer;

        public tMileageChange()
        {
            this._geoCoord = new tGeoCoord();
        }

        public tGeoCoord geoCoord
        {
            get
            {
                return this._geoCoord;
            }
            set
            {
                this._geoCoord = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPosIn
        {
            get
            {
                return this._absPosIn;
            }
            set
            {
                this._absPosIn = value;
                _shouldSerializeabsPosIn = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPosInOffset
        {
            get
            {
                if (this._absPosInOffset.HasValue)
                {
                    return this._absPosInOffset.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._absPosInOffset = value;
                _shouldSerializeabsPosInOffset = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absPosInOffsetSpecified
        {
            get
            {
                return this._absPosInOffset.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absPosInOffset = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tMileageChangeDescr type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
                _shouldSerializetype = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPos
        {
            get
            {
                return this._absPos;
            }
            set
            {
                this._absPos = value;
                _shouldSerializeabsPos = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal pos
        {
            get
            {
                return this._pos;
            }
            set
            {
                this._pos = value;
                _shouldSerializepos = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tMileageDirection absDir
        {
            get
            {
                if (this._absDir.HasValue)
                {
                    return this._absDir.Value;
                }
                else
                {
                    return default(tMileageDirection);
                }
            }
            set
            {
                this._absDir = value;
                _shouldSerializeabsDir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absDirSpecified
        {
            get
            {
                return this._absDir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absDir = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tStrictDirection dir
        {
            get
            {
                if (this._dir.HasValue)
                {
                    return this._dir.Value;
                }
                else
                {
                    return default(tStrictDirection);
                }
            }
            set
            {
                this._dir = value;
                _shouldSerializedir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dirSpecified
        {
            get
            {
                return this._dir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._dir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tMileageChange));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether absPosIn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPosIn()
        {
            if (_shouldSerializeabsPosIn)
            {
                return true;
            }
            return (_absPosIn != default(decimal));
        }

        /// <summary>
        /// Test whether absPosInOffset should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPosInOffset()
        {
            if (_shouldSerializeabsPosInOffset)
            {
                return true;
            }
            return (_absPosInOffset != default(decimal));
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            if (_shouldSerializetype)
            {
                return true;
            }
            return (_type != default(tMileageChangeDescr));
        }

        /// <summary>
        /// Test whether absPos should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPos()
        {
            if (_shouldSerializeabsPos)
            {
                return true;
            }
            return (_absPos != default(decimal));
        }

        /// <summary>
        /// Test whether pos should be serialized
        /// </summary>
        public virtual bool ShouldSerializepos()
        {
            if (_shouldSerializepos)
            {
                return true;
            }
            return (_pos != default(decimal));
        }

        /// <summary>
        /// Test whether absDir should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsDir()
        {
            if (_shouldSerializeabsDir)
            {
                return true;
            }
            return (_absDir != default(tMileageDirection));
        }

        /// <summary>
        /// Test whether dir should be serialized
        /// </summary>
        public virtual bool ShouldSerializedir()
        {
            if (_shouldSerializedir)
            {
                return true;
            }
            return (_dir != default(tStrictDirection));
        }

        /// <summary>
        /// Test whether geoCoord should be serialized
        /// </summary>
        public virtual bool ShouldSerializegeoCoord()
        {
            return (_geoCoord != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tMileageChange object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tMileageChange object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tMileageChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tMileageChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMileageChange);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tMileageChange obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tMileageChange Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tMileageChange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tMileageChange Deserialize(System.IO.Stream s)
        {
            return ((tMileageChange)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tMileageChange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tMileageChange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tMileageChange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tMileageChange obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMileageChange);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tMileageChange obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tMileageChange LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tMileageChangeDescr
    {

        /// <remarks/>
        overlapping,

        /// <remarks/>
        missing,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tMileageDirection
    {

        /// <remarks/>
        raising,

        /// <remarks/>
        falling,
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrack))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrack : tElementWithIDAndName
    {

        private bool _shouldSerializemainDir;

        private List<tStateWithLength> _states;

        private string _type;

        private System.Nullable<tExtendedDirection> _mainDir;

        private string _infraAttrGroupRef;

        private static XmlSerializer serializer;

        public tTrack()
        {
            this._states = new List<tStateWithLength>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("state", IsNullable = false)]
        public List<tStateWithLength> states
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tExtendedDirection mainDir
        {
            get
            {
                if (this._mainDir.HasValue)
                {
                    return this._mainDir.Value;
                }
                else
                {
                    return default(tExtendedDirection);
                }
            }
            set
            {
                this._mainDir = value;
                _shouldSerializemainDir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mainDirSpecified
        {
            get
            {
                return this._mainDir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._mainDir = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string infraAttrGroupRef
        {
            get
            {
                return this._infraAttrGroupRef;
            }
            set
            {
                this._infraAttrGroupRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrack));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether states should be serialized
        /// </summary>
        public virtual bool ShouldSerializestates()
        {
            return states != null && states.Count > 0;
        }

        /// <summary>
        /// Test whether mainDir should be serialized
        /// </summary>
        public virtual bool ShouldSerializemainDir()
        {
            if (_shouldSerializemainDir)
            {
                return true;
            }
            return (_mainDir != default(tExtendedDirection));
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether infraAttrGroupRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfraAttrGroupRef()
        {
            return !string.IsNullOrEmpty(infraAttrGroupRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrack object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrack object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrack object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrack obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrack);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrack obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTrack Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrack)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrack Deserialize(System.IO.Stream s)
        {
            return ((tTrack)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrack object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrack object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrack object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrack obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrack);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrack obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTrack LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tExtendedDirection
    {

        /// <remarks/>
        up,

        /// <remarks/>
        down,

        /// <remarks/>
        unknown,

        /// <remarks/>
        none,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrack : tTrack
    {

        private List<string> _trackDescr;

        private eTrackTopology _trackTopology;

        private eTrackElements _trackElements;

        private eOcsElements _ocsElements;

        private List<tElementWithReference> _infraAttrGroupRefs;

        private List<System.Xml.XmlElement> _any1;

        private static XmlSerializer serializer;

        public eTrack()
        {
            this._any1 = new List<System.Xml.XmlElement>();
            this._infraAttrGroupRefs = new List<tElementWithReference>();
            this._ocsElements = new eOcsElements();
            this._trackElements = new eTrackElements();
            this._trackTopology = new eTrackTopology();
            this._trackDescr = new List<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute("trackDescr")]
        public List<string> trackDescr
        {
            get
            {
                return this._trackDescr;
            }
            set
            {
                this._trackDescr = value;
            }
        }

        public eTrackTopology trackTopology
        {
            get
            {
                return this._trackTopology;
            }
            set
            {
                this._trackTopology = value;
            }
        }

        [XmlElement(IsNullable = false)]
        public eTrackElements trackElements
        {
            get
            {
                return this._trackElements;
            }
            set
            {
                this._trackElements = value;
            }
        }

        [XmlElement(IsNullable = false)]
        public eOcsElements ocsElements
        {
            get
            {
                return this._ocsElements;
            }
            set
            {
                this._ocsElements = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("infraAttrGroupRef", IsNullable = false)]
        public List<tElementWithReference> infraAttrGroupRefs
        {
            get
            {
                return this._infraAttrGroupRefs;
            }
            set
            {
                this._infraAttrGroupRefs = value;
            }
        }

        public List<System.Xml.XmlElement> Any1
        {
            get
            {
                return this._any1;
            }
            set
            {
                this._any1 = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrack));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackDescr should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackDescr()
        {
            return trackDescr != null && trackDescr.Count > 0;
        }

        /// <summary>
        /// Test whether infraAttrGroupRefs should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfraAttrGroupRefs()
        {
            return infraAttrGroupRefs != null && infraAttrGroupRefs.Count > 0;
        }

        /// <summary>
        /// Test whether Any1 should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny1()
        {
            return Any1 != null && Any1.Count > 0;
        }

        /// <summary>
        /// Test whether trackTopology should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackTopology()
        {
            return (_trackTopology != null);
        }

        /// <summary>
        /// Test whether trackElements should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackElements()
        {
            return (_trackElements != null);// && _trackElements.Any.Count > 0;
        }

        /// <summary>
        /// Test whether ocsElements should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocsElements()
        {
            return (_ocsElements != null) && _ocsElements.Any.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrack object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrack object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrack object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrack obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrack);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrack obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrack Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrack)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrack Deserialize(System.IO.Stream s)
        {
            return ((eTrack)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrack object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrack object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrack object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrack obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrack);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrack obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrack LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrackTopology : ParentContainer
    {

        private eTrackBegin _trackBegin;

        private eTrackEnd _trackEnd;

        private List<tMileageChange> _mileageChanges;

        private List<tCommonSwitchAndCrossingData> _connections;

        private List<tCrossSection> _crossSections;

        private List<tBorder> _borders;

        private static XmlSerializer serializer;

        public eTrackTopology()
        {
            this._borders = new List<tBorder>();
            this._crossSections = new List<tCrossSection>();
            this._connections = new List<tCommonSwitchAndCrossingData>();
            this._mileageChanges = new List<tMileageChange>();
            this._trackEnd = new eTrackEnd();
            this._trackBegin = new eTrackBegin();
        }

        public eTrackBegin trackBegin
        {
            get
            {
                return this._trackBegin;
            }
            set
            {
                this._trackBegin = value;
            }
        }

        public eTrackEnd trackEnd
        {
            get
            {
                return this._trackEnd;
            }
            set
            {
                this._trackEnd = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("mileageChange", IsNullable = false)]
        public List<tMileageChange> mileageChanges
        {
            get
            {
                return this._mileageChanges;
            }
            set
            {
                this._mileageChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("crossing", typeof(eCrossing), IsNullable = false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("switch", typeof(eSwitch), IsNullable = false)]
        public List<tCommonSwitchAndCrossingData> connections
        {
            get
            {
                return this._connections;
            }
            set
            {
                this._connections = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("crossSection", IsNullable = false)]
        public List<tCrossSection> crossSections
        {
            get
            {
                return this._crossSections;
            }
            set
            {
                this._crossSections = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("border", IsNullable = false)]
        public List<tBorder> borders
        {
            get
            {
                return this._borders;
            }
            set
            {
                this._borders = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrackTopology));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether mileageChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializemileageChanges()
        {
            return mileageChanges != null && mileageChanges.Count > 0;
        }

        /// <summary>
        /// Test whether connections should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconnections()
        {
            return connections != null && connections.Count > 0;
        }

        /// <summary>
        /// Test whether crossSections should be serialized
        /// </summary>
        public virtual bool ShouldSerializecrossSections()
        {
            return crossSections != null && crossSections.Count > 0;
        }

        /// <summary>
        /// Test whether borders should be serialized
        /// </summary>
        public virtual bool ShouldSerializeborders()
        {
            return borders != null && borders.Count > 0;
        }

        /// <summary>
        /// Test whether trackBegin should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackBegin()
        {
            return (_trackBegin != null);
        }

        /// <summary>
        /// Test whether trackEnd should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackEnd()
        {
            return (_trackEnd != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrackTopology object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrackTopology object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrackTopology object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrackTopology obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackTopology);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrackTopology obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eTrackTopology Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrackTopology)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrackTopology Deserialize(System.IO.Stream s)
        {
            return ((eTrackTopology)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrackTopology object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrackTopology object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrackTopology object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrackTopology obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackTopology);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrackTopology obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eTrackTopology LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrackBegin : eTrackNode
    {

        private bool _shouldSerializeabsDir;

        private System.Nullable<tMileageDirection> _absDir;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tMileageDirection absDir
        {
            get
            {
                if (this._absDir.HasValue)
                {
                    return this._absDir.Value;
                }
                else
                {
                    return default(tMileageDirection);
                }
            }
            set
            {
                this._absDir = value;
                _shouldSerializeabsDir = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absDirSpecified
        {
            get
            {
                return this._absDir.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absDir = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrackBegin));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether absDir should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsDir()
        {
            if (_shouldSerializeabsDir)
            {
                return true;
            }
            return (_absDir != default(tMileageDirection));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrackBegin object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrackBegin object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrackBegin object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrackBegin obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackBegin);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrackBegin obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrackBegin Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrackBegin)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrackBegin Deserialize(System.IO.Stream s)
        {
            return ((eTrackBegin)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrackBegin object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrackBegin object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrackBegin object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrackBegin obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackBegin);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrackBegin obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrackBegin LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrackEnd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrackBegin))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrackNode : tTrackNode
    {

        private bool _shouldSerializeItem;

        private object _item;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("bufferStop", typeof(tBufferStop))]
        [System.Xml.Serialization.XmlElementAttribute("connection", typeof(tConnectionData))]
        [System.Xml.Serialization.XmlElementAttribute("macroscopicNode", typeof(tMacroscopicNode))]
        [System.Xml.Serialization.XmlElementAttribute("openEnd", typeof(tOpenEnd))]
        public object Item
        {
            get
            {
                return this._item;
            }
            set
            {
                this._item = value;
                _shouldSerializeItem = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrackNode));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether Item should be serialized
        /// </summary>
        public virtual bool ShouldSerializeItem()
        {
            if (_shouldSerializeItem)
            {
                return true;
            }
            return (_item != default(object));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrackNode object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrackNode object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrackNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrackNode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackNode);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrackNode obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrackNode Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrackNode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrackNode Deserialize(System.IO.Stream s)
        {
            return ((eTrackNode)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrackNode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrackNode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrackNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrackNode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackNode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrackNode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrackNode LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBufferStop : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBufferStop));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBufferStop object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBufferStop object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBufferStop object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBufferStop obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBufferStop);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBufferStop obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tBufferStop Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBufferStop)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBufferStop Deserialize(System.IO.Stream s)
        {
            return ((tBufferStop)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBufferStop object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBufferStop object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBufferStop object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBufferStop obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBufferStop);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBufferStop obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tBufferStop LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tMacroscopicNode : ParentContainer
    {

        private string _ocpRef;

        private string _flowDirection;

        private static XmlSerializer serializer;

        public tMacroscopicNode()
        {
            this._flowDirection = "both";
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpRef
        {
            get
            {
                return this._ocpRef;
            }
            set
            {
                this._ocpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("both")]
        public string flowDirection
        {
            get
            {
                return this._flowDirection;
            }
            set
            {
                this._flowDirection = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tMacroscopicNode));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether ocpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpRef()
        {
            return !string.IsNullOrEmpty(ocpRef);
        }

        /// <summary>
        /// Test whether flowDirection should be serialized
        /// </summary>
        public virtual bool ShouldSerializeflowDirection()
        {
            return !string.IsNullOrEmpty(flowDirection);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tMacroscopicNode object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tMacroscopicNode object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tMacroscopicNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tMacroscopicNode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMacroscopicNode);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tMacroscopicNode obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tMacroscopicNode Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tMacroscopicNode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tMacroscopicNode Deserialize(System.IO.Stream s)
        {
            return ((tMacroscopicNode)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tMacroscopicNode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tMacroscopicNode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tMacroscopicNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tMacroscopicNode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMacroscopicNode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tMacroscopicNode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tMacroscopicNode LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOpenEnd : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOpenEnd));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOpenEnd object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOpenEnd object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOpenEnd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOpenEnd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOpenEnd);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOpenEnd obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOpenEnd Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOpenEnd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOpenEnd Deserialize(System.IO.Stream s)
        {
            return ((tOpenEnd)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOpenEnd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOpenEnd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOpenEnd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOpenEnd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOpenEnd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOpenEnd obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOpenEnd LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrackNode))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrackEnd))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eTrackBegin))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrackNode : ParentContainer
    {

        private bool _shouldSerializeabsPosOffset;

        private bool _shouldSerializeabsPos;

        private bool _shouldSerializepos;

        private tGeoCoord _geoCoord;

        private string _id;

        private decimal _pos;

        private System.Nullable<decimal> _absPos;

        private System.Nullable<decimal> _absPosOffset;

        private static XmlSerializer serializer;

        public tTrackNode()
        {
            this._geoCoord = new tGeoCoord();
        }

        public tGeoCoord geoCoord
        {
            get
            {
                return this._geoCoord;
            }
            set
            {
                this._geoCoord = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal pos
        {
            get
            {
                return this._pos;
            }
            set
            {
                this._pos = value;
                _shouldSerializepos = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPos
        {
            get
            {
                if (this._absPos.HasValue)
                {
                    return this._absPos.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._absPos = value;
                _shouldSerializeabsPos = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absPosSpecified
        {
            get
            {
                return this._absPos.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absPos = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPosOffset
        {
            get
            {
                if (this._absPosOffset.HasValue)
                {
                    return this._absPosOffset.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._absPosOffset = value;
                _shouldSerializeabsPosOffset = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absPosOffsetSpecified
        {
            get
            {
                return this._absPosOffset.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absPosOffset = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrackNode));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether pos should be serialized
        /// </summary>
        public virtual bool ShouldSerializepos()
        {
            if (_shouldSerializepos)
            {
                return true;
            }
            return (_pos != default(decimal));
        }

        /// <summary>
        /// Test whether absPos should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPos()
        {
            if (_shouldSerializeabsPos)
            {
                return true;
            }
            return (_absPos != default(decimal));
        }

        /// <summary>
        /// Test whether absPosOffset should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPosOffset()
        {
            if (_shouldSerializeabsPosOffset)
            {
                return true;
            }
            return (_absPosOffset != default(decimal));
        }

        /// <summary>
        /// Test whether geoCoord should be serialized
        /// </summary>
        public virtual bool ShouldSerializegeoCoord()
        {
            return (_geoCoord != null) && _geoCoord.coord.Count > 0;
        }

        /// <summary>
        /// Test whether id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeid()
        {
            return !string.IsNullOrEmpty(id);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrackNode object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrackNode object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrackNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrackNode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackNode);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrackNode obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTrackNode Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrackNode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrackNode Deserialize(System.IO.Stream s)
        {
            return ((tTrackNode)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrackNode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrackNode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrackNode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrackNode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrackNode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrackNode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTrackNode LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrackEnd : eTrackNode
    {

        private bool _shouldSerializeabsPosIn;

        private System.Nullable<decimal> _absPosIn;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal absPosIn
        {
            get
            {
                if (this._absPosIn.HasValue)
                {
                    return this._absPosIn.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._absPosIn = value;
                _shouldSerializeabsPosIn = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool absPosInSpecified
        {
            get
            {
                return this._absPosIn.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._absPosIn = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrackEnd));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether absPosIn should be serialized
        /// </summary>
        public virtual bool ShouldSerializeabsPosIn()
        {
            if (_shouldSerializeabsPosIn)
            {
                return true;
            }
            return (_absPosIn != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrackEnd object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrackEnd object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrackEnd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrackEnd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackEnd);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrackEnd obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eTrackEnd Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrackEnd)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrackEnd Deserialize(System.IO.Stream s)
        {
            return ((eTrackEnd)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrackEnd object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrackEnd object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrackEnd object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrackEnd obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackEnd);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrackEnd obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eTrackEnd LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrackElements : ParentContainer
    {

        private List<tSpeedChange> _speedChanges;

        private List<tGradientChange> _gradientChanges;

        private List<tRadiusChange> _radiusChanges;

        private List<tTunnel> _tunnels;

        private List<tBridge> _bridges;

        private List<tLevelCrossing> _levelCrossings;

        private List<tOwnerChange> _ownerChanges;

        private List<tOperationModeChange> _operationModeChanges;

        private List<tTrainProtectionChange> _trainProtectionChanges;

        private List<tElectrificationChange> _electrificationChanges;

        private List<tPowerTransmissionChange> _powerTransmissionChanges;

        private List<tAxleWeightChange> _axleWeightChanges;

        private List<tGaugeChange> _gaugeChanges;

        private List<tPlacedElement> _geoMappings;

        private List<tTrackCondition> _trackConditions;

        private List<tPlatformEdge> _platformEdges;

        private List<tServiceSection> _serviceSections;

        private List<System.Xml.XmlElement> _any;

        private static XmlSerializer serializer;

        public eTrackElements()
        {
            this._any = new List<System.Xml.XmlElement>();
            this._serviceSections = new List<tServiceSection>();
            this._platformEdges = new List<tPlatformEdge>();
            this._trackConditions = new List<tTrackCondition>();
            this._geoMappings = new List<tPlacedElement>();
            this._gaugeChanges = new List<tGaugeChange>();
            this._axleWeightChanges = new List<tAxleWeightChange>();
            this._powerTransmissionChanges = new List<tPowerTransmissionChange>();
            this._electrificationChanges = new List<tElectrificationChange>();
            this._trainProtectionChanges = new List<tTrainProtectionChange>();
            this._operationModeChanges = new List<tOperationModeChange>();
            this._ownerChanges = new List<tOwnerChange>();
            this._levelCrossings = new List<tLevelCrossing>();
            this._bridges = new List<tBridge>();
            this._tunnels = new List<tTunnel>();
            this._radiusChanges = new List<tRadiusChange>();
            this._gradientChanges = new List<tGradientChange>();
            this._speedChanges = new List<tSpeedChange>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("speedChange", IsNullable = false)]
        public List<tSpeedChange> speedChanges
        {
            get
            {
                return this._speedChanges;
            }
            set
            {
                this._speedChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("gradientChange", IsNullable = false)]
        public List<tGradientChange> gradientChanges
        {
            get
            {
                return this._gradientChanges;
            }
            set
            {
                this._gradientChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("radiusChange", IsNullable = false)]
        public List<tRadiusChange> radiusChanges
        {
            get
            {
                return this._radiusChanges;
            }
            set
            {
                this._radiusChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("tunnel", IsNullable = false)]
        public List<tTunnel> tunnels
        {
            get
            {
                return this._tunnels;
            }
            set
            {
                this._tunnels = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("brigde", IsNullable = false)]
        public List<tBridge> bridges
        {
            get
            {
                return this._bridges;
            }
            set
            {
                this._bridges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("levelCrossing", IsNullable = false)]
        public List<tLevelCrossing> levelCrossings
        {
            get
            {
                return this._levelCrossings;
            }
            set
            {
                this._levelCrossings = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("ownerChange", IsNullable = false)]
        public List<tOwnerChange> ownerChanges
        {
            get
            {
                return this._ownerChanges;
            }
            set
            {
                this._ownerChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("operationModeChange", IsNullable = false)]
        public List<tOperationModeChange> operationModeChanges
        {
            get
            {
                return this._operationModeChanges;
            }
            set
            {
                this._operationModeChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("trainProtectionChange", IsNullable = false)]
        public List<tTrainProtectionChange> trainProtectionChanges
        {
            get
            {
                return this._trainProtectionChanges;
            }
            set
            {
                this._trainProtectionChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("electrificationChange", IsNullable = false)]
        public List<tElectrificationChange> electrificationChanges
        {
            get
            {
                return this._electrificationChanges;
            }
            set
            {
                this._electrificationChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("powerTransmissionChange", IsNullable = false)]
        public List<tPowerTransmissionChange> powerTransmissionChanges
        {
            get
            {
                return this._powerTransmissionChanges;
            }
            set
            {
                this._powerTransmissionChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("axleWeightChange", IsNullable = false)]
        public List<tAxleWeightChange> axleWeightChanges
        {
            get
            {
                return this._axleWeightChanges;
            }
            set
            {
                this._axleWeightChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("gaugeChange", IsNullable = false)]
        public List<tGaugeChange> gaugeChanges
        {
            get
            {
                return this._gaugeChanges;
            }
            set
            {
                this._gaugeChanges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("geoMapping", IsNullable = false)]
        public List<tPlacedElement> geoMappings
        {
            get
            {
                return this._geoMappings;
            }
            set
            {
                this._geoMappings = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("trackCondition", IsNullable = false)]
        public List<tTrackCondition> trackConditions
        {
            get
            {
                return this._trackConditions;
            }
            set
            {
                this._trackConditions = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("platformEdge", IsNullable = false)]
        public List<tPlatformEdge> platformEdges
        {
            get
            {
                return this._platformEdges;
            }
            set
            {
                this._platformEdges = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("serviceSection", IsNullable = false)]
        public List<tServiceSection> serviceSections
        {
            get
            {
                return this._serviceSections;
            }
            set
            {
                this._serviceSections = value;
            }
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrackElements));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether speedChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializespeedChanges()
        {
            return speedChanges != null && speedChanges.Count > 0;
        }

        /// <summary>
        /// Test whether gradientChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializegradientChanges()
        {
            return gradientChanges != null && gradientChanges.Count > 0;
        }

        /// <summary>
        /// Test whether radiusChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializeradiusChanges()
        {
            return radiusChanges != null && radiusChanges.Count > 0;
        }

        /// <summary>
        /// Test whether tunnels should be serialized
        /// </summary>
        public virtual bool ShouldSerializetunnels()
        {
            return tunnels != null && tunnels.Count > 0;
        }

        /// <summary>
        /// Test whether bridges should be serialized
        /// </summary>
        public virtual bool ShouldSerializebridges()
        {
            return bridges != null && bridges.Count > 0;
        }

        /// <summary>
        /// Test whether levelCrossings should be serialized
        /// </summary>
        public virtual bool ShouldSerializelevelCrossings()
        {
            return levelCrossings != null && levelCrossings.Count > 0;
        }

        /// <summary>
        /// Test whether ownerChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializeownerChanges()
        {
            return ownerChanges != null && ownerChanges.Count > 0;
        }

        /// <summary>
        /// Test whether operationModeChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationModeChanges()
        {
            return operationModeChanges != null && operationModeChanges.Count > 0;
        }

        /// <summary>
        /// Test whether trainProtectionChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionChanges()
        {
            return trainProtectionChanges != null && trainProtectionChanges.Count > 0;
        }

        /// <summary>
        /// Test whether electrificationChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializeelectrificationChanges()
        {
            return electrificationChanges != null && electrificationChanges.Count > 0;
        }

        /// <summary>
        /// Test whether powerTransmissionChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializepowerTransmissionChanges()
        {
            return powerTransmissionChanges != null && powerTransmissionChanges.Count > 0;
        }

        /// <summary>
        /// Test whether axleWeightChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializeaxleWeightChanges()
        {
            return axleWeightChanges != null && axleWeightChanges.Count > 0;
        }

        /// <summary>
        /// Test whether gaugeChanges should be serialized
        /// </summary>
        public virtual bool ShouldSerializegaugeChanges()
        {
            return gaugeChanges != null && gaugeChanges.Count > 0;
        }

        /// <summary>
        /// Test whether geoMappings should be serialized
        /// </summary>
        public virtual bool ShouldSerializegeoMappings()
        {
            return geoMappings != null && geoMappings.Count > 0;
        }

        /// <summary>
        /// Test whether trackConditions should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackConditions()
        {
            return trackConditions != null && trackConditions.Count > 0;
        }

        /// <summary>
        /// Test whether platformEdges should be serialized
        /// </summary>
        public virtual bool ShouldSerializeplatformEdges()
        {
            return platformEdges != null && platformEdges.Count > 0;
        }

        /// <summary>
        /// Test whether serviceSections should be serialized
        /// </summary>
        public virtual bool ShouldSerializeserviceSections()
        {
            return serviceSections != null && serviceSections.Count > 0;
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrackElements object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrackElements object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrackElements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrackElements obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackElements);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrackElements obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eTrackElements Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrackElements)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrackElements Deserialize(System.IO.Stream s)
        {
            return ((eTrackElements)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrackElements object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrackElements object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrackElements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrackElements obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackElements);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrackElements obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eTrackElements LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eOcsElements : ParentContainer
    {

        private List<object> _signals;

        private List<tDelimitedOrientedElement> _trainDetectionElements;

        private eBalises _balises;

        private eTrainProtectionElements _trainProtectionElements;

        private List<tStopPost> _stopPosts;

        private List<tDerailer> _derailers;

        private List<System.Xml.XmlElement> _any;

        private static XmlSerializer serializer;

        public eOcsElements()
        {
            this._any = new List<System.Xml.XmlElement>();
            this._derailers = new List<tDerailer>();
            this._stopPosts = new List<tStopPost>();
            this._trainProtectionElements = new eTrainProtectionElements();
            this._balises = new eBalises();
            this._trainDetectionElements = new List<tDelimitedOrientedElement>();
            this._signals = new List<object>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("signal", typeof(tSignal), IsNullable = false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("signalGroups", typeof(eSignalGroups), IsNullable = false)]
        public List<object> signals
        {
            get
            {
                return this._signals;
            }
            set
            {
                this._signals = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("trackCircuitBorder", typeof(tTrackCircuitBorder), IsNullable = false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("trainDetector", typeof(tTrainDetector), IsNullable = false)]
        public List<tDelimitedOrientedElement> trainDetectionElements
        {
            get
            {
                return this._trainDetectionElements;
            }
            set
            {
                this._trainDetectionElements = value;
            }
        }

        public eBalises balises
        {
            get
            {
                return this._balises;
            }
            set
            {
                this._balises = value;
            }
        }

        public eTrainProtectionElements trainProtectionElements
        {
            get
            {
                return this._trainProtectionElements;
            }
            set
            {
                this._trainProtectionElements = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("stopPost", IsNullable = false)]
        public List<tStopPost> stopPosts
        {
            get
            {
                return this._stopPosts;
            }
            set
            {
                this._stopPosts = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("derailer", IsNullable = false)]
        public List<tDerailer> derailers
        {
            get
            {
                return this._derailers;
            }
            set
            {
                this._derailers = value;
            }
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eOcsElements));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether signals should be serialized
        /// </summary>
        public virtual bool ShouldSerializesignals()
        {
            return signals != null && signals.Count > 0;
        }

        /// <summary>
        /// Test whether trainDetectionElements should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainDetectionElements()
        {
            return trainDetectionElements != null && trainDetectionElements.Count > 0;
        }

        /// <summary>
        /// Test whether stopPosts should be serialized
        /// </summary>
        public virtual bool ShouldSerializestopPosts()
        {
            return stopPosts != null && stopPosts.Count > 0;
        }

        /// <summary>
        /// Test whether derailers should be serialized
        /// </summary>
        public virtual bool ShouldSerializederailers()
        {
            return derailers != null && derailers.Count > 0;
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        /// <summary>
        /// Test whether balises should be serialized
        /// </summary>
        public virtual bool ShouldSerializebalises()
        {
            return (_balises != null);
        }

        /// <summary>
        /// Test whether trainProtectionElements should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionElements()
        {
            return (_trainProtectionElements != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eOcsElements object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eOcsElements object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eOcsElements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eOcsElements obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcsElements);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eOcsElements obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eOcsElements Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eOcsElements)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eOcsElements Deserialize(System.IO.Stream s)
        {
            return ((eOcsElements)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eOcsElements object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eOcsElements object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eOcsElements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eOcsElements obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eOcsElements);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eOcsElements obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eOcsElements LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eSignalGroups : ParentContainer
    {

        private List<eSignalGroup> _signalGroup;

        private static XmlSerializer serializer;

        public eSignalGroups()
        {
            this._signalGroup = new List<eSignalGroup>();
        }

        [System.Xml.Serialization.XmlElementAttribute("signalGroup")]
        public List<eSignalGroup> signalGroup
        {
            get
            {
                return this._signalGroup;
            }
            set
            {
                this._signalGroup = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eSignalGroups));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether signalGroup should be serialized
        /// </summary>
        public virtual bool ShouldSerializesignalGroup()
        {
            return signalGroup != null && signalGroup.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eSignalGroups object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eSignalGroups object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eSignalGroups object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eSignalGroups obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eSignalGroups);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eSignalGroups obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eSignalGroups Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eSignalGroups)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eSignalGroups Deserialize(System.IO.Stream s)
        {
            return ((eSignalGroups)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eSignalGroups object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eSignalGroups object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eSignalGroups object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eSignalGroups obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eSignalGroups);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eSignalGroups obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eSignalGroups LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eBalises : ParentContainer
    {

        private List<tBalise> _balise;

        private List<tBaliseGroup> _baliseGroup;

        private static XmlSerializer serializer;

        public eBalises()
        {
            this._baliseGroup = new List<tBaliseGroup>();
            this._balise = new List<tBalise>();
        }

        [System.Xml.Serialization.XmlElementAttribute("balise")]
        public List<tBalise> balise
        {
            get
            {
                return this._balise;
            }
            set
            {
                this._balise = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("baliseGroup")]
        public List<tBaliseGroup> baliseGroup
        {
            get
            {
                return this._baliseGroup;
            }
            set
            {
                this._baliseGroup = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eBalises));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether balise should be serialized
        /// </summary>
        public virtual bool ShouldSerializebalise()
        {
            return balise != null && balise.Count > 0;
        }

        /// <summary>
        /// Test whether baliseGroup should be serialized
        /// </summary>
        public virtual bool ShouldSerializebaliseGroup()
        {
            return baliseGroup != null && baliseGroup.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eBalises object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eBalises object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eBalises object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eBalises obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBalises);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eBalises obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eBalises Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eBalises)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eBalises Deserialize(System.IO.Stream s)
        {
            return ((eBalises)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eBalises object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eBalises object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eBalises object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eBalises obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eBalises);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eBalises obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eBalises LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrainProtectionElements : ParentContainer
    {

        private List<tTrainProtectionElement> _trainProtectionElement;

        private List<tTrainProtectionElementGroup> _trainProtectionElementGroup;

        private static XmlSerializer serializer;

        public eTrainProtectionElements()
        {
            this._trainProtectionElementGroup = new List<tTrainProtectionElementGroup>();
            this._trainProtectionElement = new List<tTrainProtectionElement>();
        }

        [System.Xml.Serialization.XmlElementAttribute("trainProtectionElement")]
        public List<tTrainProtectionElement> trainProtectionElement
        {
            get
            {
                return this._trainProtectionElement;
            }
            set
            {
                this._trainProtectionElement = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("trainProtectionElementGroup")]
        public List<tTrainProtectionElementGroup> trainProtectionElementGroup
        {
            get
            {
                return this._trainProtectionElementGroup;
            }
            set
            {
                this._trainProtectionElementGroup = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrainProtectionElements));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trainProtectionElement should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionElement()
        {
            return trainProtectionElement != null && trainProtectionElement.Count > 0;
        }

        /// <summary>
        /// Test whether trainProtectionElementGroup should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionElementGroup()
        {
            return trainProtectionElementGroup != null && trainProtectionElementGroup.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrainProtectionElements object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrainProtectionElements object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrainProtectionElements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrainProtectionElements obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainProtectionElements);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrainProtectionElements obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eTrainProtectionElements Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrainProtectionElements)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrainProtectionElements Deserialize(System.IO.Stream s)
        {
            return ((eTrainProtectionElements)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrainProtectionElements object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrainProtectionElements object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrainProtectionElements object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrainProtectionElements obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrainProtectionElements);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrainProtectionElements obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eTrainProtectionElements LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eLocallyControlledArea))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLocallyControlledArea : tElementWithIDAndName
    {

        private List<tState> _states;

        private string _ocpRef;

        private string _ocpStationRef;

        private string _controllerRef;

        private static XmlSerializer serializer;

        public tLocallyControlledArea()
        {
            this._states = new List<tState>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("state", IsNullable = false)]
        public List<tState> states
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpRef
        {
            get
            {
                return this._ocpRef;
            }
            set
            {
                this._ocpRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string ocpStationRef
        {
            get
            {
                return this._ocpStationRef;
            }
            set
            {
                this._ocpStationRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string controllerRef
        {
            get
            {
                return this._controllerRef;
            }
            set
            {
                this._controllerRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLocallyControlledArea));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether states should be serialized
        /// </summary>
        public virtual bool ShouldSerializestates()
        {
            return states != null && states.Count > 0;
        }

        /// <summary>
        /// Test whether ocpRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpRef()
        {
            return !string.IsNullOrEmpty(ocpRef);
        }

        /// <summary>
        /// Test whether ocpStationRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpStationRef()
        {
            return !string.IsNullOrEmpty(ocpStationRef);
        }

        /// <summary>
        /// Test whether controllerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontrollerRef()
        {
            return !string.IsNullOrEmpty(controllerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLocallyControlledArea object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLocallyControlledArea object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLocallyControlledArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLocallyControlledArea obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLocallyControlledArea);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLocallyControlledArea obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tLocallyControlledArea Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLocallyControlledArea)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLocallyControlledArea Deserialize(System.IO.Stream s)
        {
            return ((tLocallyControlledArea)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLocallyControlledArea object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLocallyControlledArea object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLocallyControlledArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLocallyControlledArea obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLocallyControlledArea);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLocallyControlledArea obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tLocallyControlledArea LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eLocallyControlledArea : tLocallyControlledArea
    {

        private List<tTrackRefInGroup> _trackRef;

        private static XmlSerializer serializer;

        public eLocallyControlledArea()
        {
            this._trackRef = new List<tTrackRefInGroup>();
        }

        [System.Xml.Serialization.XmlElementAttribute("trackRef")]
        public List<tTrackRefInGroup> trackRef
        {
            get
            {
                return this._trackRef;
            }
            set
            {
                this._trackRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eLocallyControlledArea));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether trackRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackRef()
        {
            return trackRef != null && trackRef.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eLocallyControlledArea object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eLocallyControlledArea object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eLocallyControlledArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eLocallyControlledArea obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLocallyControlledArea);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eLocallyControlledArea obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eLocallyControlledArea Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eLocallyControlledArea)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eLocallyControlledArea Deserialize(System.IO.Stream s)
        {
            return ((eLocallyControlledArea)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eLocallyControlledArea object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eLocallyControlledArea object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eLocallyControlledArea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eLocallyControlledArea obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLocallyControlledArea);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eLocallyControlledArea obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eLocallyControlledArea LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eLine))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tLine : tElementWithIDAndName
    {

        private List<tState> _states;

        private string _type;

        private string _infrastructureManagerRef;

        private static XmlSerializer serializer;

        public tLine()
        {
            this._states = new List<tState>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("state", IsNullable = false)]
        public List<tState> states
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string infrastructureManagerRef
        {
            get
            {
                return this._infrastructureManagerRef;
            }
            set
            {
                this._infrastructureManagerRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tLine));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether states should be serialized
        /// </summary>
        public virtual bool ShouldSerializestates()
        {
            return states != null && states.Count > 0;
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether infrastructureManagerRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructureManagerRef()
        {
            return !string.IsNullOrEmpty(infrastructureManagerRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tLine object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tLine object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tLine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLine);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tLine obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tLine Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tLine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tLine Deserialize(System.IO.Stream s)
        {
            return ((tLine)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tLine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tLine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tLine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tLine);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tLine obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tLine LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eLine : tLine
    {

        private List<string> _lineDescr;

        private List<tTrackRefInGroup> _trackRef;

        private static XmlSerializer serializer;

        public eLine()
        {
            this._trackRef = new List<tTrackRefInGroup>();
            this._lineDescr = new List<string>();
        }

        [System.Xml.Serialization.XmlElementAttribute("lineDescr")]
        public List<string> lineDescr
        {
            get
            {
                return this._lineDescr;
            }
            set
            {
                this._lineDescr = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("trackRef")]
        public List<tTrackRefInGroup> trackRef
        {
            get
            {
                return this._trackRef;
            }
            set
            {
                this._trackRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eLine));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether lineDescr should be serialized
        /// </summary>
        public virtual bool ShouldSerializelineDescr()
        {
            return lineDescr != null && lineDescr.Count > 0;
        }

        /// <summary>
        /// Test whether trackRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrackRef()
        {
            return trackRef != null && trackRef.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eLine object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eLine object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eLine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLine);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eLine obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eLine Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eLine)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eLine Deserialize(System.IO.Stream s)
        {
            return ((eLine)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eLine object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eLine object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eLine object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eLine obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eLine);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eLine obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eLine LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSpeedProfile : tElementWithIDAndName
    {

        private bool _shouldSerializemaxMeterLoad;

        private bool _shouldSerializemaxAxleLoad;

        private tTilting _tilting;

        private tBraking _braking;

        private List<tOcpRefInGroup> _path;

        private string _influence;

        private System.Nullable<decimal> _maxAxleLoad;

        private System.Nullable<decimal> _maxMeterLoad;

        private string _operatingPeriodRef;

        private string _trainProtectionSystem;

        private string _verbalConstraint;

        private static XmlSerializer serializer;

        public tSpeedProfile()
        {
            this._path = new List<tOcpRefInGroup>();
            this._braking = new tBraking();
            this._tilting = new tTilting();
        }

        public tTilting tilting
        {
            get
            {
                return this._tilting;
            }
            set
            {
                this._tilting = value;
            }
        }

        public tBraking braking
        {
            get
            {
                return this._braking;
            }
            set
            {
                this._braking = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("ocpRef", IsNullable = false)]
        public List<tOcpRefInGroup> path
        {
            get
            {
                return this._path;
            }
            set
            {
                this._path = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string influence
        {
            get
            {
                return this._influence;
            }
            set
            {
                this._influence = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxAxleLoad
        {
            get
            {
                if (this._maxAxleLoad.HasValue)
                {
                    return this._maxAxleLoad.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxAxleLoad = value;
                _shouldSerializemaxAxleLoad = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxAxleLoadSpecified
        {
            get
            {
                return this._maxAxleLoad.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxAxleLoad = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal maxMeterLoad
        {
            get
            {
                if (this._maxMeterLoad.HasValue)
                {
                    return this._maxMeterLoad.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._maxMeterLoad = value;
                _shouldSerializemaxMeterLoad = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool maxMeterLoadSpecified
        {
            get
            {
                return this._maxMeterLoad.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._maxMeterLoad = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string operatingPeriodRef
        {
            get
            {
                return this._operatingPeriodRef;
            }
            set
            {
                this._operatingPeriodRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainProtectionSystem
        {
            get
            {
                return this._trainProtectionSystem;
            }
            set
            {
                this._trainProtectionSystem = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string verbalConstraint
        {
            get
            {
                return this._verbalConstraint;
            }
            set
            {
                this._verbalConstraint = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSpeedProfile));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether path should be serialized
        /// </summary>
        public virtual bool ShouldSerializepath()
        {
            return path != null && path.Count > 0;
        }

        /// <summary>
        /// Test whether maxAxleLoad should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxAxleLoad()
        {
            if (_shouldSerializemaxAxleLoad)
            {
                return true;
            }
            return (_maxAxleLoad != default(decimal));
        }

        /// <summary>
        /// Test whether maxMeterLoad should be serialized
        /// </summary>
        public virtual bool ShouldSerializemaxMeterLoad()
        {
            if (_shouldSerializemaxMeterLoad)
            {
                return true;
            }
            return (_maxMeterLoad != default(decimal));
        }

        /// <summary>
        /// Test whether tilting should be serialized
        /// </summary>
        public virtual bool ShouldSerializetilting()
        {
            return (_tilting != null);
        }

        /// <summary>
        /// Test whether braking should be serialized
        /// </summary>
        public virtual bool ShouldSerializebraking()
        {
            return (_braking != null);
        }

        /// <summary>
        /// Test whether influence should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfluence()
        {
            return !string.IsNullOrEmpty(influence);
        }

        /// <summary>
        /// Test whether operatingPeriodRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingPeriodRef()
        {
            return !string.IsNullOrEmpty(operatingPeriodRef);
        }

        /// <summary>
        /// Test whether trainProtectionSystem should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainProtectionSystem()
        {
            return !string.IsNullOrEmpty(trainProtectionSystem);
        }

        /// <summary>
        /// Test whether verbalConstraint should be serialized
        /// </summary>
        public virtual bool ShouldSerializeverbalConstraint()
        {
            return !string.IsNullOrEmpty(verbalConstraint);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSpeedProfile object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSpeedProfile object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSpeedProfile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSpeedProfile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpeedProfile);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSpeedProfile obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tSpeedProfile Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSpeedProfile)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSpeedProfile Deserialize(System.IO.Stream s)
        {
            return ((tSpeedProfile)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSpeedProfile object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSpeedProfile object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSpeedProfile object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSpeedProfile obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpeedProfile);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSpeedProfile obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tSpeedProfile LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tBraking : ParentContainer
    {

        private bool _shouldSerializeairBrakeApplicationPosition;

        private string _brakeType;

        private System.Nullable<tAirBrakeApplicationPosition> _airBrakeApplicationPosition;

        private string _minimumBrakePercentage;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string brakeType
        {
            get
            {
                return this._brakeType;
            }
            set
            {
                this._brakeType = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tAirBrakeApplicationPosition airBrakeApplicationPosition
        {
            get
            {
                if (this._airBrakeApplicationPosition.HasValue)
                {
                    return this._airBrakeApplicationPosition.Value;
                }
                else
                {
                    return default(tAirBrakeApplicationPosition);
                }
            }
            set
            {
                this._airBrakeApplicationPosition = value;
                _shouldSerializeairBrakeApplicationPosition = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool airBrakeApplicationPositionSpecified
        {
            get
            {
                return this._airBrakeApplicationPosition.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._airBrakeApplicationPosition = null;
                }
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string minimumBrakePercentage
        {
            get
            {
                return this._minimumBrakePercentage;
            }
            set
            {
                this._minimumBrakePercentage = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tBraking));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether airBrakeApplicationPosition should be serialized
        /// </summary>
        public virtual bool ShouldSerializeairBrakeApplicationPosition()
        {
            if (_shouldSerializeairBrakeApplicationPosition)
            {
                return true;
            }
            return (_airBrakeApplicationPosition != default(tAirBrakeApplicationPosition));
        }

        /// <summary>
        /// Test whether brakeType should be serialized
        /// </summary>
        public virtual bool ShouldSerializebrakeType()
        {
            return !string.IsNullOrEmpty(brakeType);
        }

        /// <summary>
        /// Test whether minimumBrakePercentage should be serialized
        /// </summary>
        public virtual bool ShouldSerializeminimumBrakePercentage()
        {
            return !string.IsNullOrEmpty(minimumBrakePercentage);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tBraking object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tBraking object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tBraking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tBraking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBraking);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tBraking obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tBraking Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tBraking)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tBraking Deserialize(System.IO.Stream s)
        {
            return ((tBraking)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tBraking object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tBraking object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tBraking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tBraking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tBraking);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tBraking obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tBraking LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public enum tAirBrakeApplicationPosition
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("N/A")]
        NA,

        /// <remarks/>
        G,

        /// <remarks/>
        P,

        /// <remarks/>
        R,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tController : tElementWithIDAndName
    {

        private List<tState> _states;

        private static XmlSerializer serializer;

        public tController()
        {
            this._states = new List<tState>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("state", IsNullable = false)]
        public List<tState> states
        {
            get
            {
                return this._states;
            }
            set
            {
                this._states = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tController));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether states should be serialized
        /// </summary>
        public virtual bool ShouldSerializestates()
        {
            return states != null && states.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tController object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tController object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tController object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tController obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tController);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tController obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tController Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tController)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tController Deserialize(System.IO.Stream s)
        {
            return ((tController)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tController object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tController object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tController object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tController obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tController);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tController obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tController LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tContractor : tElementWithIDAndName
    {

        private string _role;

        private string _subLevel;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string role
        {
            get
            {
                return this._role;
            }
            set
            {
                this._role = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "nonNegativeInteger")]
        public string subLevel
        {
            get
            {
                return this._subLevel;
            }
            set
            {
                this._subLevel = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tContractor));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether role should be serialized
        /// </summary>
        public virtual bool ShouldSerializerole()
        {
            return !string.IsNullOrEmpty(role);
        }

        /// <summary>
        /// Test whether subLevel should be serialized
        /// </summary>
        public virtual bool ShouldSerializesubLevel()
        {
            return !string.IsNullOrEmpty(subLevel);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tContractor object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tContractor object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tContractor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tContractor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tContractor);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tContractor obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tContractor Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tContractor)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tContractor Deserialize(System.IO.Stream s)
        {
            return ((tContractor)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tContractor object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tContractor object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tContractor object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tContractor obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tContractor);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tContractor obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tContractor LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tConcessionaire : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tConcessionaire));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tConcessionaire object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tConcessionaire object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tConcessionaire object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tConcessionaire obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tConcessionaire);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tConcessionaire obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tConcessionaire Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tConcessionaire)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tConcessionaire Deserialize(System.IO.Stream s)
        {
            return ((tConcessionaire)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tConcessionaire object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tConcessionaire object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tConcessionaire object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tConcessionaire obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tConcessionaire);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tConcessionaire obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tConcessionaire LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperationalUndertaking : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperationalUndertaking));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperationalUndertaking object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperationalUndertaking object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperationalUndertaking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperationalUndertaking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperationalUndertaking);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperationalUndertaking obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tOperationalUndertaking Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperationalUndertaking)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperationalUndertaking Deserialize(System.IO.Stream s)
        {
            return ((tOperationalUndertaking)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperationalUndertaking object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperationalUndertaking object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperationalUndertaking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperationalUndertaking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperationalUndertaking);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperationalUndertaking obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tOperationalUndertaking LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tRailwayUndertaking : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tRailwayUndertaking));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tRailwayUndertaking object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tRailwayUndertaking object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tRailwayUndertaking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tRailwayUndertaking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRailwayUndertaking);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tRailwayUndertaking obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tRailwayUndertaking Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tRailwayUndertaking)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tRailwayUndertaking Deserialize(System.IO.Stream s)
        {
            return ((tRailwayUndertaking)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tRailwayUndertaking object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tRailwayUndertaking object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tRailwayUndertaking object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tRailwayUndertaking obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRailwayUndertaking);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tRailwayUndertaking obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tRailwayUndertaking LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tCustomer : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tCustomer));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tCustomer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tCustomer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tCustomer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tCustomer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCustomer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tCustomer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tCustomer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tCustomer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tCustomer Deserialize(System.IO.Stream s)
        {
            return ((tCustomer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tCustomer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tCustomer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tCustomer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tCustomer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tCustomer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tCustomer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tCustomer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tVehicleOperator : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tVehicleOperator));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tVehicleOperator object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tVehicleOperator object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tVehicleOperator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tVehicleOperator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tVehicleOperator);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tVehicleOperator obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tVehicleOperator Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tVehicleOperator)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tVehicleOperator Deserialize(System.IO.Stream s)
        {
            return ((tVehicleOperator)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tVehicleOperator object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tVehicleOperator object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tVehicleOperator object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tVehicleOperator obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tVehicleOperator);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tVehicleOperator obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tVehicleOperator LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tVehicleManufacturer : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tVehicleManufacturer));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tVehicleManufacturer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tVehicleManufacturer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tVehicleManufacturer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tVehicleManufacturer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tVehicleManufacturer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tVehicleManufacturer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tVehicleManufacturer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tVehicleManufacturer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tVehicleManufacturer Deserialize(System.IO.Stream s)
        {
            return ((tVehicleManufacturer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tVehicleManufacturer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tVehicleManufacturer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tVehicleManufacturer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tVehicleManufacturer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tVehicleManufacturer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tVehicleManufacturer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tVehicleManufacturer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tInfrastructureManager : tElementWithIDAndName
    {

        private static XmlSerializer serializer;

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tInfrastructureManager));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tInfrastructureManager object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tInfrastructureManager object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tInfrastructureManager object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tInfrastructureManager obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tInfrastructureManager);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tInfrastructureManager obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tInfrastructureManager Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tInfrastructureManager)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tInfrastructureManager Deserialize(System.IO.Stream s)
        {
            return ((tInfrastructureManager)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tInfrastructureManager object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tInfrastructureManager object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tInfrastructureManager object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tInfrastructureManager obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tInfrastructureManager);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tInfrastructureManager obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tInfrastructureManager LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tTimetable))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tRollingstock))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tInfrastructure))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tGlobalElementWithMetadata : tElementWithIDAndName
    {

        private elementContainer _metadata;

        private string _version;

        private string _base;

        private static XmlSerializer serializer;

        public tGlobalElementWithMetadata()
        {
            this._metadata = new elementContainer();
        }

        public elementContainer metadata
        {
            get
            {
                return this._metadata;
            }
            set
            {
                this._metadata = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string @base
        {
            get
            {
                return this._base;
            }
            set
            {
                this._base = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tGlobalElementWithMetadata));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether metadata should be serialized
        /// </summary>
        public virtual bool ShouldSerializemetadata()
        {
            return (_metadata != null);
        }

        /// <summary>
        /// Test whether version should be serialized
        /// </summary>
        public virtual bool ShouldSerializeversion()
        {
            return !string.IsNullOrEmpty(version);
        }

        /// <summary>
        /// Test whether base should be serialized
        /// </summary>
        public virtual bool ShouldSerializebase()
        {
            return !string.IsNullOrEmpty(@base);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tGlobalElementWithMetadata object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tGlobalElementWithMetadata object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tGlobalElementWithMetadata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tGlobalElementWithMetadata obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGlobalElementWithMetadata);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tGlobalElementWithMetadata obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tGlobalElementWithMetadata Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tGlobalElementWithMetadata)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tGlobalElementWithMetadata Deserialize(System.IO.Stream s)
        {
            return ((tGlobalElementWithMetadata)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tGlobalElementWithMetadata object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tGlobalElementWithMetadata object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tGlobalElementWithMetadata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tGlobalElementWithMetadata obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGlobalElementWithMetadata);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tGlobalElementWithMetadata obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tGlobalElementWithMetadata LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(tMetadata))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://purl.org/dc/elements/1.1/")]
    public partial class elementContainer : ParentContainer
    {

        private SimpleLiteral[] _items;

        private ItemsChoiceType[] _itemsElementName;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("any", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("contributor", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("coverage", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("creator", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("date", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("description", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("format", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("identifier", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("language", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("publisher", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("relation", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("rights", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("source", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("subject", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("title", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlElementAttribute("type", typeof(SimpleLiteral))]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public SimpleLiteral[] Items
        {
            get
            {
                return this._items;
            }
            set
            {
                this._items = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName")]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemsChoiceType[] ItemsElementName
        {
            get
            {
                return this._itemsElementName;
            }
            set
            {
                this._itemsElementName = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(elementContainer));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current elementContainer object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an elementContainer object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output elementContainer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out elementContainer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(elementContainer);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out elementContainer obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static elementContainer Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((elementContainer)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static elementContainer Deserialize(System.IO.Stream s)
        {
            return ((elementContainer)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current elementContainer object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an elementContainer object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output elementContainer object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out elementContainer obj, out System.Exception exception)
        {
            exception = null;
            obj = default(elementContainer);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out elementContainer obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static elementContainer LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://purl.org/dc/elements/1.1/", IncludeInSchema = false)]
    public enum ItemsChoiceType
    {

        /// <remarks/>
        any,

        /// <remarks/>
        contributor,

        /// <remarks/>
        coverage,

        /// <remarks/>
        creator,

        /// <remarks/>
        date,

        /// <remarks/>
        description,

        /// <remarks/>
        format,

        /// <remarks/>
        identifier,

        /// <remarks/>
        language,

        /// <remarks/>
        publisher,

        /// <remarks/>
        relation,

        /// <remarks/>
        rights,

        /// <remarks/>
        source,

        /// <remarks/>
        subject,

        /// <remarks/>
        title,

        /// <remarks/>
        type,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tMetadata : elementContainer
    {

        private tOrganizationalUnits _organizationalUnits;

        private static XmlSerializer serializer;

        public tMetadata()
        {
            this._organizationalUnits = new tOrganizationalUnits();
        }

        public tOrganizationalUnits organizationalUnits
        {
            get
            {
                return this._organizationalUnits;
            }
            set
            {
                this._organizationalUnits = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tMetadata));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether organizationalUnits should be serialized
        /// </summary>
        public virtual bool ShouldSerializeorganizationalUnits()
        {
            return (_organizationalUnits != null);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tMetadata object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tMetadata object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tMetadata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tMetadata obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMetadata);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tMetadata obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tMetadata Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tMetadata)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tMetadata Deserialize(System.IO.Stream s)
        {
            return ((tMetadata)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tMetadata object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tMetadata object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tMetadata object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tMetadata obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tMetadata);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tMetadata obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tMetadata LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOrganizationalUnits : ParentContainer
    {

        private List<tInfrastructureManager> _infrastructureManager;

        private List<tVehicleManufacturer> _vehicleManufacturer;

        private List<tVehicleOperator> _vehicleOperator;

        private List<tCustomer> _customer;

        private List<tRailwayUndertaking> _railwayUndertaking;

        private List<tOperationalUndertaking> _operationalUndertaking;

        private List<tConcessionaire> _concessionaire;

        private List<tContractor> _contractor;

        private static XmlSerializer serializer;

        public tOrganizationalUnits()
        {
            this._contractor = new List<tContractor>();
            this._concessionaire = new List<tConcessionaire>();
            this._operationalUndertaking = new List<tOperationalUndertaking>();
            this._railwayUndertaking = new List<tRailwayUndertaking>();
            this._customer = new List<tCustomer>();
            this._vehicleOperator = new List<tVehicleOperator>();
            this._vehicleManufacturer = new List<tVehicleManufacturer>();
            this._infrastructureManager = new List<tInfrastructureManager>();
        }

        [System.Xml.Serialization.XmlElementAttribute("infrastructureManager")]
        public List<tInfrastructureManager> infrastructureManager
        {
            get
            {
                return this._infrastructureManager;
            }
            set
            {
                this._infrastructureManager = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("vehicleManufacturer")]
        public List<tVehicleManufacturer> vehicleManufacturer
        {
            get
            {
                return this._vehicleManufacturer;
            }
            set
            {
                this._vehicleManufacturer = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("vehicleOperator")]
        public List<tVehicleOperator> vehicleOperator
        {
            get
            {
                return this._vehicleOperator;
            }
            set
            {
                this._vehicleOperator = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("customer")]
        public List<tCustomer> customer
        {
            get
            {
                return this._customer;
            }
            set
            {
                this._customer = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("railwayUndertaking")]
        public List<tRailwayUndertaking> railwayUndertaking
        {
            get
            {
                return this._railwayUndertaking;
            }
            set
            {
                this._railwayUndertaking = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("operationalUndertaking")]
        public List<tOperationalUndertaking> operationalUndertaking
        {
            get
            {
                return this._operationalUndertaking;
            }
            set
            {
                this._operationalUndertaking = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("concessionaire")]
        public List<tConcessionaire> concessionaire
        {
            get
            {
                return this._concessionaire;
            }
            set
            {
                this._concessionaire = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("contractor")]
        public List<tContractor> contractor
        {
            get
            {
                return this._contractor;
            }
            set
            {
                this._contractor = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOrganizationalUnits));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether infrastructureManager should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructureManager()
        {
            return infrastructureManager != null && infrastructureManager.Count > 0;
        }

        /// <summary>
        /// Test whether vehicleManufacturer should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleManufacturer()
        {
            return vehicleManufacturer != null && vehicleManufacturer.Count > 0;
        }

        /// <summary>
        /// Test whether vehicleOperator should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicleOperator()
        {
            return vehicleOperator != null && vehicleOperator.Count > 0;
        }

        /// <summary>
        /// Test whether customer should be serialized
        /// </summary>
        public virtual bool ShouldSerializecustomer()
        {
            return customer != null && customer.Count > 0;
        }

        /// <summary>
        /// Test whether railwayUndertaking should be serialized
        /// </summary>
        public virtual bool ShouldSerializerailwayUndertaking()
        {
            return railwayUndertaking != null && railwayUndertaking.Count > 0;
        }

        /// <summary>
        /// Test whether operationalUndertaking should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperationalUndertaking()
        {
            return operationalUndertaking != null && operationalUndertaking.Count > 0;
        }

        /// <summary>
        /// Test whether concessionaire should be serialized
        /// </summary>
        public virtual bool ShouldSerializeconcessionaire()
        {
            return concessionaire != null && concessionaire.Count > 0;
        }

        /// <summary>
        /// Test whether contractor should be serialized
        /// </summary>
        public virtual bool ShouldSerializecontractor()
        {
            return contractor != null && contractor.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOrganizationalUnits object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOrganizationalUnits object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOrganizationalUnits object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOrganizationalUnits obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOrganizationalUnits);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOrganizationalUnits obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOrganizationalUnits Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOrganizationalUnits)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOrganizationalUnits Deserialize(System.IO.Stream s)
        {
            return ((tOrganizationalUnits)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOrganizationalUnits object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOrganizationalUnits object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOrganizationalUnits object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOrganizationalUnits obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOrganizationalUnits);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOrganizationalUnits obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOrganizationalUnits LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTimetable : tGlobalElementWithMetadata
    {

        private string _infrastructureRef;

        private string _rollingstockRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string infrastructureRef
        {
            get
            {
                return this._infrastructureRef;
            }
            set
            {
                this._infrastructureRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string rollingstockRef
        {
            get
            {
                return this._rollingstockRef;
            }
            set
            {
                this._rollingstockRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTimetable));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether infrastructureRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructureRef()
        {
            return !string.IsNullOrEmpty(infrastructureRef);
        }

        /// <summary>
        /// Test whether rollingstockRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializerollingstockRef()
        {
            return !string.IsNullOrEmpty(rollingstockRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTimetable object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTimetable object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTimetable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTimetable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTimetable);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTimetable obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tTimetable Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTimetable)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTimetable Deserialize(System.IO.Stream s)
        {
            return ((tTimetable)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTimetable object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTimetable object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTimetable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTimetable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTimetable);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTimetable obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tTimetable LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tRollingstock : tGlobalElementWithMetadata
    {

        private string _timetableRef;

        private string _infrastructureRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string timetableRef
        {
            get
            {
                return this._timetableRef;
            }
            set
            {
                this._timetableRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string infrastructureRef
        {
            get
            {
                return this._infrastructureRef;
            }
            set
            {
                this._infrastructureRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tRollingstock));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether timetableRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimetableRef()
        {
            return !string.IsNullOrEmpty(timetableRef);
        }

        /// <summary>
        /// Test whether infrastructureRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructureRef()
        {
            return !string.IsNullOrEmpty(infrastructureRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tRollingstock object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tRollingstock object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tRollingstock object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tRollingstock obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRollingstock);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tRollingstock obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tRollingstock Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tRollingstock)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tRollingstock Deserialize(System.IO.Stream s)
        {
            return ((tRollingstock)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tRollingstock object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tRollingstock object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tRollingstock object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tRollingstock obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tRollingstock);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tRollingstock obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tRollingstock LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tInfrastructure : tGlobalElementWithMetadata
    {

        private string _timetableRef;

        private string _rollingstockRef;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string timetableRef
        {
            get
            {
                return this._timetableRef;
            }
            set
            {
                this._timetableRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string rollingstockRef
        {
            get
            {
                return this._rollingstockRef;
            }
            set
            {
                this._rollingstockRef = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tInfrastructure));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether timetableRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimetableRef()
        {
            return !string.IsNullOrEmpty(timetableRef);
        }

        /// <summary>
        /// Test whether rollingstockRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializerollingstockRef()
        {
            return !string.IsNullOrEmpty(rollingstockRef);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tInfrastructure object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tInfrastructure object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tInfrastructure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tInfrastructure obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tInfrastructure);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tInfrastructure obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static tInfrastructure Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tInfrastructure)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tInfrastructure Deserialize(System.IO.Stream s)
        {
            return ((tInfrastructure)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tInfrastructure object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tInfrastructure object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tInfrastructure object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tInfrastructure obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tInfrastructure);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tInfrastructure obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static tInfrastructure LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eTrackGroups : ParentContainer
    {

        private List<eLine> _line;

        private List<eLocallyControlledArea> _locallyControlledArea;

        private List<System.Xml.XmlElement> _any;

        private List<functionalLocation> _functionalLocations;

        private static XmlSerializer serializer;

        public eTrackGroups()
        {
            this._any = new List<System.Xml.XmlElement>();
            this._locallyControlledArea = new List<eLocallyControlledArea>();
            this._line = new List<eLine>();
            this._functionalLocations = new List<functionalLocation>();
        }

        public List<functionalLocation> functionalLocations
        {
            get { return this._functionalLocations; }
            set { this._functionalLocations = value; }
        }

        [System.Xml.Serialization.XmlElementAttribute("line")]
        public List<eLine> line
        {
            get
            {
                return this._line;
            }
            set
            {
                this._line = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("locallyControlledArea")]
        public List<eLocallyControlledArea> locallyControlledArea
        {
            get
            {
                return this._locallyControlledArea;
            }
            set
            {
                this._locallyControlledArea = value;
            }
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eTrackGroups));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether line should be serialized
        /// </summary>
        public virtual bool ShouldSerializeline()
        {
            return line != null && line.Count > 0;
        }

        /// <summary>
        /// Test whether locallyControlledArea should be serialized
        /// </summary>
        public virtual bool ShouldSerializelocallyControlledArea()
        {
            return locallyControlledArea != null && locallyControlledArea.Count > 0;
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eTrackGroups object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eTrackGroups object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eTrackGroups object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eTrackGroups obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackGroups);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eTrackGroups obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eTrackGroups Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eTrackGroups)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eTrackGroups Deserialize(System.IO.Stream s)
        {
            return ((eTrackGroups)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eTrackGroups object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eTrackGroups object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eTrackGroups object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eTrackGroups obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eTrackGroups);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eTrackGroups obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eTrackGroups LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(eInfrastructureVisualization))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tInfrastructureVisualization : ParentContainer
    {

        private string _version;

        private string _infrastructureRef;

        private string _id;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string infrastructureRef
        {
            get
            {
                return this._infrastructureRef;
            }
            set
            {
                this._infrastructureRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "ID")]
        public string id
        {
            get
            {
                return this._id;
            }
            set
            {
                this._id = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tInfrastructureVisualization));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether version should be serialized
        /// </summary>
        public virtual bool ShouldSerializeversion()
        {
            return !string.IsNullOrEmpty(version);
        }

        /// <summary>
        /// Test whether infrastructureRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructureRef()
        {
            return !string.IsNullOrEmpty(infrastructureRef);
        }

        /// <summary>
        /// Test whether id should be serialized
        /// </summary>
        public virtual bool ShouldSerializeid()
        {
            return !string.IsNullOrEmpty(id);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tInfrastructureVisualization object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tInfrastructureVisualization object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tInfrastructureVisualization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tInfrastructureVisualization obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tInfrastructureVisualization);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tInfrastructureVisualization obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tInfrastructureVisualization Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tInfrastructureVisualization)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tInfrastructureVisualization Deserialize(System.IO.Stream s)
        {
            return ((tInfrastructureVisualization)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tInfrastructureVisualization object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tInfrastructureVisualization object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tInfrastructureVisualization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tInfrastructureVisualization obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tInfrastructureVisualization);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tInfrastructureVisualization obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tInfrastructureVisualization LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eInfrastructureVisualization : tInfrastructureVisualization
    {

        private List<eLineVis> _lineVis;

        private List<eOcpVis> _ocpVis;

        private static XmlSerializer serializer;

        public eInfrastructureVisualization()
        {
            this._ocpVis = new List<eOcpVis>();
            this._lineVis = new List<eLineVis>();
        }

        [System.Xml.Serialization.XmlElementAttribute("lineVis")]
        public List<eLineVis> lineVis
        {
            get
            {
                return this._lineVis;
            }
            set
            {
                this._lineVis = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("ocpVis")]
        public List<eOcpVis> ocpVis
        {
            get
            {
                return this._ocpVis;
            }
            set
            {
                this._ocpVis = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eInfrastructureVisualization));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether lineVis should be serialized
        /// </summary>
        public virtual bool ShouldSerializelineVis()
        {
            return lineVis != null && lineVis.Count > 0;
        }

        /// <summary>
        /// Test whether ocpVis should be serialized
        /// </summary>
        public virtual bool ShouldSerializeocpVis()
        {
            return ocpVis != null && ocpVis.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eInfrastructureVisualization object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eInfrastructureVisualization object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eInfrastructureVisualization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eInfrastructureVisualization obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eInfrastructureVisualization);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eInfrastructureVisualization obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static eInfrastructureVisualization Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eInfrastructureVisualization)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eInfrastructureVisualization Deserialize(System.IO.Stream s)
        {
            return ((eInfrastructureVisualization)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eInfrastructureVisualization object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eInfrastructureVisualization object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eInfrastructureVisualization object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eInfrastructureVisualization obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eInfrastructureVisualization);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eInfrastructureVisualization obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static eInfrastructureVisualization LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAttribute : ParentContainer
    {

        private string _name;

        private string _value;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAttribute));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether name should be serialized
        /// </summary>
        public virtual bool ShouldSerializename()
        {
            return !string.IsNullOrEmpty(name);
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            return !string.IsNullOrEmpty(value);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAttribute object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAttribute object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAttribute obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAttribute);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAttribute obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tAttribute Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAttribute)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAttribute Deserialize(System.IO.Stream s)
        {
            return ((tAttribute)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAttribute object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAttribute object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAttribute obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAttribute);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAttribute obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tAttribute LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class eGeneralInfraAttribute : ParentContainer
    {

        private List<tAttribute> _attributes;

        private List<System.Xml.XmlElement> _any;

        private static XmlSerializer serializer;

        public eGeneralInfraAttribute()
        {
            this._any = new List<System.Xml.XmlElement>();
            this._attributes = new List<tAttribute>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("attribute", IsNullable = false)]
        public List<tAttribute> attributes
        {
            get
            {
                return this._attributes;
            }
            set
            {
                this._attributes = value;
            }
        }

        [System.Xml.Serialization.XmlAnyElementAttribute()]
        public List<System.Xml.XmlElement> Any
        {
            get
            {
                return this._any;
            }
            set
            {
                this._any = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(eGeneralInfraAttribute));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether attributes should be serialized
        /// </summary>
        public virtual bool ShouldSerializeattributes()
        {
            return attributes != null && attributes.Count > 0;
        }

        /// <summary>
        /// Test whether Any should be serialized
        /// </summary>
        public virtual bool ShouldSerializeAny()
        {
            return Any != null && Any.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current eGeneralInfraAttribute object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an eGeneralInfraAttribute object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output eGeneralInfraAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out eGeneralInfraAttribute obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eGeneralInfraAttribute);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out eGeneralInfraAttribute obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static eGeneralInfraAttribute Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((eGeneralInfraAttribute)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static eGeneralInfraAttribute Deserialize(System.IO.Stream s)
        {
            return ((eGeneralInfraAttribute)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current eGeneralInfraAttribute object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an eGeneralInfraAttribute object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output eGeneralInfraAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out eGeneralInfraAttribute obj, out System.Exception exception)
        {
            exception = null;
            obj = default(eGeneralInfraAttribute);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out eGeneralInfraAttribute obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static eGeneralInfraAttribute LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tEpsgCode : ParentContainer
    {

        private string _default;

        private string _extraHeight;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
        public string @default
        {
            get
            {
                return this._default;
            }
            set
            {
                this._default = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "anyURI")]
        public string extraHeight
        {
            get
            {
                return this._extraHeight;
            }
            set
            {
                this._extraHeight = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tEpsgCode));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether default should be serialized
        /// </summary>
        public virtual bool ShouldSerializedefault()
        {
            return !string.IsNullOrEmpty(@default);
        }

        /// <summary>
        /// Test whether extraHeight should be serialized
        /// </summary>
        public virtual bool ShouldSerializeextraHeight()
        {
            return !string.IsNullOrEmpty(extraHeight);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tEpsgCode object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tEpsgCode object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tEpsgCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tEpsgCode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEpsgCode);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tEpsgCode obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tEpsgCode Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tEpsgCode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tEpsgCode Deserialize(System.IO.Stream s)
        {
            return ((tEpsgCode)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tEpsgCode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tEpsgCode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tEpsgCode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tEpsgCode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tEpsgCode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tEpsgCode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tEpsgCode LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tSpeedInfo : ParentContainer
    {

        private bool _shouldSerializevMax;

        private string _trainCategory;

        private string _etcsTrainCategory;

        private string _profileRef;

        private string _status;

        private decimal _vMax;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string trainCategory
        {
            get
            {
                return this._trainCategory;
            }
            set
            {
                this._trainCategory = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "integer")]
        public string etcsTrainCategory
        {
            get
            {
                return this._etcsTrainCategory;
            }
            set
            {
                this._etcsTrainCategory = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(DataType = "IDREF")]
        public string profileRef
        {
            get
            {
                return this._profileRef;
            }
            set
            {
                this._profileRef = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string status
        {
            get
            {
                return this._status;
            }
            set
            {
                this._status = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal vMax
        {
            get
            {
                return this._vMax;
            }
            set
            {
                this._vMax = value;
                _shouldSerializevMax = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tSpeedInfo));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether vMax should be serialized
        /// </summary>
        public virtual bool ShouldSerializevMax()
        {
            if (_shouldSerializevMax)
            {
                return true;
            }
            return (_vMax != default(decimal));
        }

        /// <summary>
        /// Test whether trainCategory should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainCategory()
        {
            return !string.IsNullOrEmpty(trainCategory);
        }

        /// <summary>
        /// Test whether etcsTrainCategory should be serialized
        /// </summary>
        public virtual bool ShouldSerializeetcsTrainCategory()
        {
            return !string.IsNullOrEmpty(etcsTrainCategory);
        }

        /// <summary>
        /// Test whether profileRef should be serialized
        /// </summary>
        public virtual bool ShouldSerializeprofileRef()
        {
            return !string.IsNullOrEmpty(profileRef);
        }

        /// <summary>
        /// Test whether status should be serialized
        /// </summary>
        public virtual bool ShouldSerializestatus()
        {
            return !string.IsNullOrEmpty(status);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tSpeedInfo object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tSpeedInfo object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tSpeedInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tSpeedInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpeedInfo);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tSpeedInfo obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tSpeedInfo Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tSpeedInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tSpeedInfo Deserialize(System.IO.Stream s)
        {
            return ((tSpeedInfo)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tSpeedInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tSpeedInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tSpeedInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tSpeedInfo obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tSpeedInfo);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tSpeedInfo obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tSpeedInfo LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tGauge : ParentContainer
    {

        private bool _shouldSerializevalue;

        private decimal _value;

        private static XmlSerializer serializer;

        public tGauge()
        {
            this._value = ((decimal)(1435m));
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(decimal), "1435")]
        public decimal value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
                _shouldSerializevalue = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tGauge));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            if (_shouldSerializevalue)
            {
                return true;
            }
            return (_value != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tGauge object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tGauge object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tGauge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tGauge obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGauge);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tGauge obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tGauge Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tGauge)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tGauge Deserialize(System.IO.Stream s)
        {
            return ((tGauge)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tGauge object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tGauge object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tGauge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tGauge obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tGauge);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tGauge obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tGauge LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tAxleWeight : ParentContainer
    {

        private bool _shouldSerializemeterload;

        private bool _shouldSerializevalue;

        private decimal _value;

        private System.Nullable<decimal> _meterload;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal value
        {
            get
            {
                return this._value;
            }
            set
            {
                this._value = value;
                _shouldSerializevalue = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public decimal meterload
        {
            get
            {
                if (this._meterload.HasValue)
                {
                    return this._meterload.Value;
                }
                else
                {
                    return default(decimal);
                }
            }
            set
            {
                this._meterload = value;
                _shouldSerializemeterload = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool meterloadSpecified
        {
            get
            {
                return this._meterload.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._meterload = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tAxleWeight));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether value should be serialized
        /// </summary>
        public virtual bool ShouldSerializevalue()
        {
            if (_shouldSerializevalue)
            {
                return true;
            }
            return (_value != default(decimal));
        }

        /// <summary>
        /// Test whether meterload should be serialized
        /// </summary>
        public virtual bool ShouldSerializemeterload()
        {
            if (_shouldSerializemeterload)
            {
                return true;
            }
            return (_meterload != default(decimal));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tAxleWeight object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tAxleWeight object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tAxleWeight object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tAxleWeight obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAxleWeight);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tAxleWeight obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tAxleWeight Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tAxleWeight)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tAxleWeight Deserialize(System.IO.Stream s)
        {
            return ((tAxleWeight)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tAxleWeight object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tAxleWeight object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tAxleWeight object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tAxleWeight obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tAxleWeight);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tAxleWeight obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tAxleWeight LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tPowerTransmission : ParentContainer
    {

        private string _type;

        private string _style;

        private static XmlSerializer serializer;

        public tPowerTransmission()
        {
            this._type = "adhesion";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("adhesion")]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string style
        {
            get
            {
                return this._style;
            }
            set
            {
                this._style = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tPowerTransmission));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        /// <summary>
        /// Test whether style should be serialized
        /// </summary>
        public virtual bool ShouldSerializestyle()
        {
            return !string.IsNullOrEmpty(style);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tPowerTransmission object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tPowerTransmission object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tPowerTransmission object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tPowerTransmission obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPowerTransmission);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tPowerTransmission obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tPowerTransmission Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tPowerTransmission)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tPowerTransmission Deserialize(System.IO.Stream s)
        {
            return ((tPowerTransmission)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tPowerTransmission object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tPowerTransmission object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tPowerTransmission object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tPowerTransmission obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tPowerTransmission);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tPowerTransmission obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tPowerTransmission LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tElectrification : ParentContainer
    {

        private bool _shouldSerializefrequency;

        private bool _shouldSerializevoltage;

        private string _type;

        private decimal _voltage;

        private decimal _frequency;

        private static XmlSerializer serializer;

        public tElectrification()
        {
            this._type = "none";
            this._voltage = ((decimal)(15000m));
            this._frequency = ((decimal)(16.667m));
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute("none")]
        public string type
        {
            get
            {
                return this._type;
            }
            set
            {
                this._type = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(decimal), "15000")]
        public decimal voltage
        {
            get
            {
                return this._voltage;
            }
            set
            {
                this._voltage = value;
                _shouldSerializevoltage = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(typeof(decimal), "16.667")]
        public decimal frequency
        {
            get
            {
                return this._frequency;
            }
            set
            {
                this._frequency = value;
                _shouldSerializefrequency = true;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tElectrification));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether voltage should be serialized
        /// </summary>
        public virtual bool ShouldSerializevoltage()
        {
            if (_shouldSerializevoltage)
            {
                return true;
            }
            return (_voltage != default(decimal));
        }

        /// <summary>
        /// Test whether frequency should be serialized
        /// </summary>
        public virtual bool ShouldSerializefrequency()
        {
            if (_shouldSerializefrequency)
            {
                return true;
            }
            return (_frequency != default(decimal));
        }

        /// <summary>
        /// Test whether type should be serialized
        /// </summary>
        public virtual bool ShouldSerializetype()
        {
            return !string.IsNullOrEmpty(type);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tElectrification object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tElectrification object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tElectrification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tElectrification obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElectrification);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tElectrification obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tElectrification Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tElectrification)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tElectrification Deserialize(System.IO.Stream s)
        {
            return ((tElectrification)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tElectrification object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tElectrification object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tElectrification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tElectrification obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tElectrification);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tElectrification obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tElectrification LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tTrainProtection : ParentContainer
    {

        private bool _shouldSerializemedium;

        private bool _shouldSerializemonitoring;

        private tTrainProtectionMonitoring _monitoring;

        private System.Nullable<tTrainProtectionMedium> _medium;

        private static XmlSerializer serializer;

        public tTrainProtection()
        {
            this._monitoring = tTrainProtectionMonitoring.none;
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        [System.ComponentModel.DefaultValueAttribute(tTrainProtectionMonitoring.none)]
        public tTrainProtectionMonitoring monitoring
        {
            get
            {
                return this._monitoring;
            }
            set
            {
                this._monitoring = value;
                _shouldSerializemonitoring = true;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public tTrainProtectionMedium medium
        {
            get
            {
                if (this._medium.HasValue)
                {
                    return this._medium.Value;
                }
                else
                {
                    return default(tTrainProtectionMedium);
                }
            }
            set
            {
                this._medium = value;
                _shouldSerializemedium = true;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mediumSpecified
        {
            get
            {
                return this._medium.HasValue;
            }
            set
            {
                if (value == false)
                {
                    this._medium = null;
                }
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tTrainProtection));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether monitoring should be serialized
        /// </summary>
        public virtual bool ShouldSerializemonitoring()
        {
            if (_shouldSerializemonitoring)
            {
                return true;
            }
            return (_monitoring != default(tTrainProtectionMonitoring));
        }

        /// <summary>
        /// Test whether medium should be serialized
        /// </summary>
        public virtual bool ShouldSerializemedium()
        {
            if (_shouldSerializemedium)
            {
                return true;
            }
            return (_medium != default(tTrainProtectionMedium));
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tTrainProtection object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tTrainProtection object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tTrainProtection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tTrainProtection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainProtection);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tTrainProtection obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tTrainProtection Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tTrainProtection)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tTrainProtection Deserialize(System.IO.Stream s)
        {
            return ((tTrainProtection)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tTrainProtection object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tTrainProtection object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tTrainProtection object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tTrainProtection obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tTrainProtection);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tTrainProtection obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tTrainProtection LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://www.railml.org/schemas/2013")]
    public partial class tOperationMode : ParentContainer
    {

        private string _modeLegislative;

        private string _modeExecutive;

        private string _clearanceManaging;

        private static XmlSerializer serializer;

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string modeLegislative
        {
            get
            {
                return this._modeLegislative;
            }
            set
            {
                this._modeLegislative = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string modeExecutive
        {
            get
            {
                return this._modeExecutive;
            }
            set
            {
                this._modeExecutive = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string clearanceManaging
        {
            get
            {
                return this._clearanceManaging;
            }
            set
            {
                this._clearanceManaging = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(tOperationMode));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether modeLegislative should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodeLegislative()
        {
            return !string.IsNullOrEmpty(modeLegislative);
        }

        /// <summary>
        /// Test whether modeExecutive should be serialized
        /// </summary>
        public virtual bool ShouldSerializemodeExecutive()
        {
            return !string.IsNullOrEmpty(modeExecutive);
        }

        /// <summary>
        /// Test whether clearanceManaging should be serialized
        /// </summary>
        public virtual bool ShouldSerializeclearanceManaging()
        {
            return !string.IsNullOrEmpty(clearanceManaging);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current tOperationMode object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an tOperationMode object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output tOperationMode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out tOperationMode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperationMode);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out tOperationMode obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static tOperationMode Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((tOperationMode)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static tOperationMode Deserialize(System.IO.Stream s)
        {
            return ((tOperationMode)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current tOperationMode object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an tOperationMode object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output tOperationMode object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out tOperationMode obj, out System.Exception exception)
        {
            exception = null;
            obj = default(tOperationMode);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out tOperationMode obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static tOperationMode LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.railml.org/schemas/2013", IsNullable = false)]
    public partial class infrastructureVisualizations : ParentContainer
    {

        private List<eInfrastructureVisualization> _visualization;

        private string _base;

        private static XmlSerializer serializer;

        public infrastructureVisualizations()
        {
            this._visualization = new List<eInfrastructureVisualization>();
        }

        [System.Xml.Serialization.XmlElementAttribute("visualization")]
        public List<eInfrastructureVisualization> visualization
        {
            get
            {
                return this._visualization;
            }
            set
            {
                this._visualization = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute(Form = System.Xml.Schema.XmlSchemaForm.Qualified, Namespace = "http://www.w3.org/XML/1998/namespace")]
        public string @base
        {
            get
            {
                return this._base;
            }
            set
            {
                this._base = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(infrastructureVisualizations));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether visualization should be serialized
        /// </summary>
        public virtual bool ShouldSerializevisualization()
        {
            return visualization != null && visualization.Count > 0;
        }

        /// <summary>
        /// Test whether base should be serialized
        /// </summary>
        public virtual bool ShouldSerializebase()
        {
            return !string.IsNullOrEmpty(@base);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current infrastructureVisualizations object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an infrastructureVisualizations object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output infrastructureVisualizations object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out infrastructureVisualizations obj, out System.Exception exception)
        {
            exception = null;
            obj = default(infrastructureVisualizations);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out infrastructureVisualizations obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static infrastructureVisualizations Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((infrastructureVisualizations)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static infrastructureVisualizations Deserialize(System.IO.Stream s)
        {
            return ((infrastructureVisualizations)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current infrastructureVisualizations object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an infrastructureVisualizations object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output infrastructureVisualizations object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out infrastructureVisualizations obj, out System.Exception exception)
        {
            exception = null;
            obj = default(infrastructureVisualizations);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out infrastructureVisualizations obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static infrastructureVisualizations LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.railml.org/schemas/2013", IsNullable = false)]
    public partial class rollingstock : tRollingstock
    {

        private List<eVehicle> _vehicles;

        private List<eFormation> _formations;

        private static XmlSerializer serializer;

        public rollingstock()
        {
            this._formations = new List<eFormation>();
            this._vehicles = new List<eVehicle>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("vehicle", IsNullable = false)]
        public List<eVehicle> vehicles
        {
            get
            {
                return this._vehicles;
            }
            set
            {
                this._vehicles = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("formation", IsNullable = false)]
        public List<eFormation> formations
        {
            get
            {
                return this._formations;
            }
            set
            {
                this._formations = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(rollingstock));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether vehicles should be serialized
        /// </summary>
        public virtual bool ShouldSerializevehicles()
        {
            return vehicles != null && vehicles.Count > 0;
        }

        /// <summary>
        /// Test whether formations should be serialized
        /// </summary>
        public virtual bool ShouldSerializeformations()
        {
            return formations != null && formations.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current rollingstock object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an rollingstock object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output rollingstock object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out rollingstock obj, out System.Exception exception)
        {
            exception = null;
            obj = default(rollingstock);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out rollingstock obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static rollingstock Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((rollingstock)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static rollingstock Deserialize(System.IO.Stream s)
        {
            return ((rollingstock)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current rollingstock object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an rollingstock object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output rollingstock object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out rollingstock obj, out System.Exception exception)
        {
            exception = null;
            obj = default(rollingstock);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out rollingstock obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static rollingstock LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.railml.org/schemas/2013", IsNullable = false)]
    public partial class timetable : tTimetable
    {

        private List<eTimetablePeriod> _timetablePeriods;

        private List<eOperatingPeriod> _operatingPeriods;

        private List<eCategory> _categories;

        private List<eAnnotation> _annotations;

        private List<eTrainPart> _trainParts;

        private List<eTrain> _trains;

        private List<eTrainGroup> _trainGroups;

        private List<eRostering> _rosterings;

        private static XmlSerializer serializer;

        public timetable()
        {
            this._rosterings = new List<eRostering>();
            this._trainGroups = new List<eTrainGroup>();
            this._trains = new List<eTrain>();
            this._trainParts = new List<eTrainPart>();
            this._annotations = new List<eAnnotation>();
            this._categories = new List<eCategory>();
            this._operatingPeriods = new List<eOperatingPeriod>();
            this._timetablePeriods = new List<eTimetablePeriod>();
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("timetablePeriod", IsNullable = false)]
        public List<eTimetablePeriod> timetablePeriods
        {
            get
            {
                return this._timetablePeriods;
            }
            set
            {
                this._timetablePeriods = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("operatingPeriod", IsNullable = false)]
        public List<eOperatingPeriod> operatingPeriods
        {
            get
            {
                return this._operatingPeriods;
            }
            set
            {
                this._operatingPeriods = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("category", IsNullable = false)]
        public List<eCategory> categories
        {
            get
            {
                return this._categories;
            }
            set
            {
                this._categories = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("annotation", IsNullable = false)]
        public List<eAnnotation> annotations
        {
            get
            {
                return this._annotations;
            }
            set
            {
                this._annotations = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("trainPart", IsNullable = false)]
        public List<eTrainPart> trainParts
        {
            get
            {
                return this._trainParts;
            }
            set
            {
                this._trainParts = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("train", IsNullable = false)]
        public List<eTrain> trains
        {
            get
            {
                return this._trains;
            }
            set
            {
                this._trains = value;
            }
        }

        [System.Xml.Serialization.XmlArrayItemAttribute("trainGroup", IsNullable = false)]
        public List<eTrainGroup> trainGroups
        {
            get
            {
                return this._trainGroups;
            }
            set
            {
                this._trainGroups = value;
            }
        }


        [System.Xml.Serialization.XmlArrayItemAttribute("rostering", IsNullable = false)]
        public List<eRostering> rosterings
        {
            get
            {
                return this._rosterings;
            }
            set
            {
                this._rosterings = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(timetable));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether timetablePeriods should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimetablePeriods()
        {
            return timetablePeriods != null && timetablePeriods.Count > 0;
        }

        /// <summary>
        /// Test whether operatingPeriods should be serialized
        /// </summary>
        public virtual bool ShouldSerializeoperatingPeriods()
        {
            return operatingPeriods != null && operatingPeriods.Count > 0;
        }

        /// <summary>
        /// Test whether categories should be serialized
        /// </summary>
        public virtual bool ShouldSerializecategories()
        {
            return categories != null && categories.Count > 0;
        }

        /// <summary>
        /// Test whether annotations should be serialized
        /// </summary>
        public virtual bool ShouldSerializeannotations()
        {
            return annotations != null && annotations.Count > 0;
        }

        /// <summary>
        /// Test whether trainParts should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainParts()
        {
            return trainParts != null && trainParts.Count > 0;
        }

        /// <summary>
        /// Test whether trains should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrains()
        {
            return trains != null && trains.Count > 0;
        }

        /// <summary>
        /// Test whether trainGroups should be serialized
        /// </summary>
        public virtual bool ShouldSerializetrainGroups()
        {
            return trainGroups != null && trainGroups.Count > 0;
        }

        /// <summary>
        /// Test whether rosterings should be serialized
        /// </summary>
        public virtual bool ShouldSerializerosterings()
        {
            return rosterings != null && rosterings.Count > 0;
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current timetable object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an timetable object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output timetable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out timetable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(timetable);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out timetable obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public new static timetable Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((timetable)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static timetable Deserialize(System.IO.Stream s)
        {
            return ((timetable)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current timetable object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an timetable object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output timetable object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out timetable obj, out System.Exception exception)
        {
            exception = null;
            obj = default(timetable);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out timetable obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public new static timetable LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "http://www.railml.org/schemas/2013")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "http://www.railml.org/schemas/2013", IsNullable = false)]
    public partial class railml
    {

        private tMetadata _metadata;

        private infrastructure _infrastructure;

        private infrastructureVisualizations _infrastructureVisualizations;

        private rollingstock _rollingstock;

        private timetable _timetable;

        private string _version;

        private static XmlSerializer serializer;

        public railml()
        {
            this._timetable = new timetable();
            this._rollingstock = new rollingstock();
            this._infrastructureVisualizations = new infrastructureVisualizations();
            this._infrastructure = new infrastructure();
            this._metadata = new tMetadata();
        }

        public tMetadata metadata
        {
            get
            {
                return this._metadata;
            }
            set
            {
                this._metadata = value;
            }
        }

        public infrastructure infrastructure
        {
            get
            {
                return this._infrastructure;
            }
            set
            {
                this._infrastructure = value;
            }
        }

        public infrastructureVisualizations infrastructureVisualizations
        {
            get
            {
                return this._infrastructureVisualizations;
            }
            set
            {
                this._infrastructureVisualizations = value;
            }
        }

        public rollingstock rollingstock
        {
            get
            {
                return this._rollingstock;
            }
            set
            {
                this._rollingstock = value;
            }
        }

        public timetable timetable
        {
            get
            {
                return this._timetable;
            }
            set
            {
                this._timetable = value;
            }
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string version
        {
            get
            {
                return this._version;
            }
            set
            {
                this._version = value;
            }
        }

        private static XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new XmlSerializerFactory().CreateSerializer(typeof(railml));
                }
                return serializer;
            }
        }

        /// <summary>
        /// Test whether metadata should be serialized
        /// </summary>
        public virtual bool ShouldSerializemetadata()
        {
            return (_metadata != null);
        }

        /// <summary>
        /// Test whether infrastructure should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructure()
        {
            return (_infrastructure != null);
        }

        /// <summary>
        /// Test whether infrastructureVisualizations should be serialized
        /// </summary>
        public virtual bool ShouldSerializeinfrastructureVisualizations()
        {
            return (_infrastructureVisualizations != null);
        }

        /// <summary>
        /// Test whether rollingstock should be serialized
        /// </summary>
        public virtual bool ShouldSerializerollingstock()
        {
            return (_rollingstock != null);
        }

        /// <summary>
        /// Test whether timetable should be serialized
        /// </summary>
        public virtual bool ShouldSerializetimetable()
        {
            return (_timetable != null);
        }

        /// <summary>
        /// Test whether version should be serialized
        /// </summary>
        public virtual bool ShouldSerializeversion()
        {
            return !string.IsNullOrEmpty(version);
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current railml object into an XML string
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Indent = false;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an railml object
        /// </summary>
        /// <param name="input">string workflow markup to deserialize</param>
        /// <param name="obj">Output railml object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string input, out railml obj, out System.Exception exception)
        {
            exception = null;
            obj = default(railml);
            try
            {
                obj = Deserialize(input);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string input, out railml obj)
        {
            System.Exception exception = null;
            return Deserialize(input, out obj, out exception);
        }

        public static railml Deserialize(string input)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(input);
                return ((railml)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        public static railml Deserialize(System.IO.Stream s)
        {
            return ((railml)(Serializer.Deserialize(s)));
        }
        #endregion

        /// <summary>
        /// Serializes current railml object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an railml object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output railml object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this Serializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out railml obj, out System.Exception exception)
        {
            exception = null;
            obj = default(railml);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out railml obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static railml LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
    }

    public partial class functionalLocation : ParentContainer
    {
        private string _sectorID;
        private string _name;
        private List<tTrackRef> _trackrefs;

        public functionalLocation()
        {
            this._trackrefs = new List<tTrackRef>();
        }

        public string name
        {
            get { return this._name; }
            set { this._name = value; }
        }
        public string sectorID
        {
            get { return this._sectorID; }
            set { this._sectorID = value; }
        }
        public List<tTrackRef> trackrefs
        {
            get { return this._trackrefs; }
            set { this._trackrefs = value; }

        }


    }
}
#pragma warning restore
